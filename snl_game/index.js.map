{"version":3,"sources":["../file:/E:/milo/milo-games/snl/assets/SNLGame/scripts/file:/E:/milo/milo-games/snl/assets/SNLGame/scripts/AnimationPoints.ts","../file:/E:/milo/milo-games/snl/assets/SNLGame/scripts/type/file:/E:/milo/milo-games/snl/assets/SNLGame/scripts/type/AnimationTag.ts","../file:/E:/milo/milo-games/snl/assets/SNLGame/scripts/file:/E:/milo/milo-games/snl/assets/SNLGame/scripts/AudioManager.ts","../file:/E:/milo/milo-games/snl/assets/SNLGame/scripts/pooling/file:/E:/milo/milo-games/snl/assets/SNLGame/scripts/pooling/AutoReturnToPool.ts","../file:/E:/milo/milo-games/snl/assets/SNLGame/pulse/schema/file:/E:/milo/milo-games/snl/assets/SNLGame/pulse/schema/BasePlayerData.ts","../file:/E:/milo/milo-games/snl/assets/SNLGame/pulse/schema/file:/E:/milo/milo-games/snl/assets/SNLGame/pulse/schema/BaseRoomSettings.ts","../file:/E:/milo/milo-games/snl/assets/SNLGame/pulse/schema/file:/E:/milo/milo-games/snl/assets/SNLGame/pulse/schema/BaseRoomState.ts","../file:/E:/milo/milo-games/snl/assets/SNLGame/scripts/file:/E:/milo/milo-games/snl/assets/SNLGame/scripts/Board.ts","../file:/E:/milo/milo-games/snl/assets/SNLGame/scripts/Config/file:/E:/milo/milo-games/snl/assets/SNLGame/scripts/Config/BoardData.ts","../file:/E:/milo/milo-games/snl/assets/SNLGame/UIPack/Scripts/file:/E:/milo/milo-games/snl/assets/SNLGame/UIPack/Scripts/BotMadeMoveScreen.ts","../file:/E:/milo/milo-games/snl/assets/SNLGame/pulse/pb-cocos-utils/file:/E:/milo/milo-games/snl/assets/SNLGame/pulse/pb-cocos-utils/CameraManger.ts","../file:/E:/milo/milo-games/snl/assets/SNLGame/UIPack/Scripts/file:/E:/milo/milo-games/snl/assets/SNLGame/UIPack/Scripts/CountdownScreen.ts","../file:/E:/milo/milo-games/snl/assets/SNLGame/scripts/file:/E:/milo/milo-games/snl/assets/SNLGame/scripts/DeathPopup.ts","../file:/E:/milo/milo-games/snl/assets/SNLGame/scripts/type/file:/E:/milo/milo-games/snl/assets/SNLGame/scripts/type/DeathType.ts","../file:/E:/milo/milo-games/snl/assets/SNLGame/milo-game-sdk/src/config/file:/E:/milo/milo-games/snl/assets/SNLGame/milo-game-sdk/src/config/defaultConfig.ts","../file:/E:/milo/milo-games/snl/assets/SNLGame/scripts/file:/E:/milo/milo-games/snl/assets/SNLGame/scripts/Dice.ts","../file:/E:/milo/milo-games/snl/assets/SNLGame/UIPack/Scripts/file:/E:/milo/milo-games/snl/assets/SNLGame/UIPack/Scripts/EndRoundScreen.ts","../file:/E:/milo/milo-games/snl/assets/SNLGame/milo-game-sdk/src/file:/E:/milo/milo-games/snl/assets/SNLGame/milo-game-sdk/src/events.ts","../file:/E:/milo/milo-games/snl/assets/SNLGame/pulse/pb-cocos-utils/file:/E:/milo/milo-games/snl/assets/SNLGame/pulse/pb-cocos-utils/FitToScreen.ts","../file:/E:/milo/milo-games/snl/assets/SNLGame/scripts/Config/file:/E:/milo/milo-games/snl/assets/SNLGame/scripts/Config/GameConfig.ts","../file:/E:/milo/milo-games/snl/assets/SNLGame/scripts/file:/E:/milo/milo-games/snl/assets/SNLGame/scripts/GameManager.ts","../file:/E:/milo/milo-games/snl/assets/SNLGame/scripts/type/file:/E:/milo/milo-games/snl/assets/SNLGame/scripts/type/GameMessageType.ts","../file:/E:/milo/milo-games/snl/assets/SNLGame/UIPack/Scripts/file:/E:/milo/milo-games/snl/assets/SNLGame/UIPack/Scripts/HowToPlay.ts","../file:/E:/milo/milo-games/snl/assets/SNLGame/scripts/Player/file:/E:/milo/milo-games/snl/assets/SNLGame/scripts/Player/IdleState.ts","../file:/E:/milo/milo-games/snl/assets/SNLGame/milo-game-sdk/src/file:/E:/milo/milo-games/snl/assets/SNLGame/milo-game-sdk/src/index.ts","../file:/E:/milo/milo-games/snl/assets/SNLGame/milo-game-sdk/src/transport/file:/E:/milo/milo-games/snl/assets/SNLGame/milo-game-sdk/src/transport/index.ts","../file:/E:/milo/milo-games/snl/assets/SNLGame/UIPack/Scripts/file:/E:/milo/milo-games/snl/assets/SNLGame/UIPack/Scripts/InGameMenu.ts","../file:/E:/milo/milo-games/snl/assets/SNLGame/scripts/file:/E:/milo/milo-games/snl/assets/SNLGame/scripts/InputManager.ts","../file:/E:/milo/milo-games/snl/assets/SNLGame/UIPack/Scripts/file:/E:/milo/milo-games/snl/assets/SNLGame/UIPack/Scripts/InstructionsScreen.ts","../file:/E:/milo/milo-games/snl/assets/SNLGame/UIPack/Scripts/file:/E:/milo/milo-games/snl/assets/SNLGame/UIPack/Scripts/KickedOutScreen.ts","../file:/E:/milo/milo-games/snl/assets/SNLGame/UIPack/Scripts/file:/E:/milo/milo-games/snl/assets/SNLGame/UIPack/Scripts/Menu.ts","../file:/E:/milo/milo-games/snl/assets/SNLGame/milo-game-sdk/src/core/file:/E:/milo/milo-games/snl/assets/SNLGame/milo-game-sdk/src/core/MiloGameSDK.ts","../file:/E:/milo/milo-games/snl/assets/SNLGame/pulse/pb-cocos-utils/file:/E:/milo/milo-games/snl/assets/SNLGame/pulse/pb-cocos-utils/MiloLayout.ts","../file:/E:/milo/milo-games/snl/assets/SNLGame/scripts/file:/E:/milo/milo-games/snl/assets/SNLGame/scripts/MoveOptionsInput.ts","../file:/E:/milo/milo-games/snl/assets/SNLGame/scripts/Player/file:/E:/milo/milo-games/snl/assets/SNLGame/scripts/Player/MovePieceState.ts","../file:/E:/milo/milo-games/snl/assets/SNLGame/pulse/networking/file:/E:/milo/milo-games/snl/assets/SNLGame/pulse/networking/NetworkConfig.ts","../file:/E:/milo/milo-games/snl/assets/SNLGame/pulse/networking/file:/E:/milo/milo-games/snl/assets/SNLGame/pulse/networking/NetworkManager.ts","../file:/E:/milo/milo-games/snl/assets/SNLGame/pulse/types/file:/E:/milo/milo-games/snl/assets/SNLGame/pulse/types/NetworkTypes.ts","../file:/E:/milo/milo-games/snl/assets/SNLGame/scripts/file:/E:/milo/milo-games/snl/assets/SNLGame/scripts/OutComesUIManager.ts","../file:/E:/milo/milo-games/snl/assets/SNLGame/scripts/file:/E:/milo/milo-games/snl/assets/SNLGame/scripts/PawnHandler.ts","../file:/E:/milo/milo-games/snl/assets/SNLGame/pulse/pb-cocos-utils/file:/E:/milo/milo-games/snl/assets/SNLGame/pulse/pb-cocos-utils/PbExtensions.ts","../file:/E:/milo/milo-games/snl/assets/SNLGame/pulse/pb-cocos-utils/file:/E:/milo/milo-games/snl/assets/SNLGame/pulse/pb-cocos-utils/PBLogger.ts","../file:/E:/milo/milo-games/snl/assets/SNLGame/pulse/pb-cocos-utils/file:/E:/milo/milo-games/snl/assets/SNLGame/pulse/pb-cocos-utils/PbSaveSystem.ts","../file:/E:/milo/milo-games/snl/assets/SNLGame/scripts/file:/E:/milo/milo-games/snl/assets/SNLGame/scripts/Piece.ts","../file:/E:/milo/milo-games/snl/assets/SNLGame/scripts/file:/E:/milo/milo-games/snl/assets/SNLGame/scripts/Player.ts","../file:/E:/milo/milo-games/snl/assets/SNLGame/scripts/file:/E:/milo/milo-games/snl/assets/SNLGame/scripts/PlayerAssets.ts","../file:/E:/milo/milo-games/snl/assets/SNLGame/pulse/pb-cocos-utils/file:/E:/milo/milo-games/snl/assets/SNLGame/pulse/pb-cocos-utils/PlayerAvatar.ts","../file:/E:/milo/milo-games/snl/assets/SNLGame/scripts/Player/file:/E:/milo/milo-games/snl/assets/SNLGame/scripts/Player/PlayerBaseState.ts","../file:/E:/milo/milo-games/snl/assets/SNLGame/scripts/file:/E:/milo/milo-games/snl/assets/SNLGame/scripts/PlayerService.ts","../file:/E:/milo/milo-games/snl/assets/SNLGame/scripts/Player/file:/E:/milo/milo-games/snl/assets/SNLGame/scripts/Player/PlayerStateMachine.ts","../file:/E:/milo/milo-games/snl/assets/SNLGame/pulse/types/file:/E:/milo/milo-games/snl/assets/SNLGame/pulse/types/PlayerTypes.ts","../file:/E:/milo/milo-games/snl/assets/SNLGame/scripts/pooling/file:/E:/milo/milo-games/snl/assets/SNLGame/scripts/pooling/Pooler.ts","../file:/E:/milo/milo-games/snl/assets/SNLGame/scripts/pooling/file:/E:/milo/milo-games/snl/assets/SNLGame/scripts/pooling/PoolManager.ts","../file:/E:/milo/milo-games/snl/assets/SNLGame/scripts/file:/E:/milo/milo-games/snl/assets/SNLGame/scripts/PowerUp.ts","../file:/E:/milo/milo-games/snl/assets/SNLGame/UIPack/Scripts/file:/E:/milo/milo-games/snl/assets/SNLGame/UIPack/Scripts/ReconnectingScreen.ts","../file:/E:/milo/milo-games/snl/assets/SNLGame/scripts/Player/file:/E:/milo/milo-games/snl/assets/SNLGame/scripts/Player/RollingState.ts","../file:/E:/milo/milo-games/snl/assets/SNLGame/pulse/types/file:/E:/milo/milo-games/snl/assets/SNLGame/pulse/types/RoomTypes.ts","../file:/E:/milo/milo-games/snl/assets/SNLGame/scripts/file:/E:/milo/milo-games/snl/assets/SNLGame/scripts/RoundCompleted.ts","../file:/E:/milo/milo-games/snl/assets/SNLGame/scripts/schema/file:/E:/milo/milo-games/snl/assets/SNLGame/scripts/schema/SNLBoard.ts","../file:/E:/milo/milo-games/snl/assets/SNLGame/scripts/file:/E:/milo/milo-games/snl/assets/SNLGame/scripts/SNLGameHandler.ts","../file:/E:/milo/milo-games/snl/assets/SNLGame/scripts/type/file:/E:/milo/milo-games/snl/assets/SNLGame/scripts/type/SNLGameState.ts","../file:/E:/milo/milo-games/snl/assets/SNLGame/scripts/schema/file:/E:/milo/milo-games/snl/assets/SNLGame/scripts/schema/SNLPlayerData.ts","../file:/E:/milo/milo-games/snl/assets/SNLGame/scripts/schema/file:/E:/milo/milo-games/snl/assets/SNLGame/scripts/schema/SNLRoomSettings.ts","../file:/E:/milo/milo-games/snl/assets/SNLGame/scripts/schema/file:/E:/milo/milo-games/snl/assets/SNLGame/scripts/schema/SNLRoomState.ts","../file:/E:/milo/milo-games/snl/assets/SNLGame/scripts/type/file:/E:/milo/milo-games/snl/assets/SNLGame/scripts/type/SNLTileType.ts","../file:/E:/milo/milo-games/snl/assets/SNLGame/scripts/file:/E:/milo/milo-games/snl/assets/SNLGame/scripts/Timer.ts","../file:/E:/milo/milo-games/snl/assets/SNLGame/UIPack/Scripts/file:/E:/milo/milo-games/snl/assets/SNLGame/UIPack/Scripts/TutorialScreen.ts","../file:/E:/milo/milo-games/snl/assets/SNLGame/milo-game-sdk/src/file:/E:/milo/milo-games/snl/assets/SNLGame/milo-game-sdk/src/types.ts","../file:/E:/milo/milo-games/snl/assets/SNLGame/UIPack/Scripts/file:/E:/milo/milo-games/snl/assets/SNLGame/UIPack/Scripts/UIManager.ts","../file:/E:/milo/milo-games/snl/assets/SNLGame/pulse/pb-cocos-utils/file:/E:/milo/milo-games/snl/assets/SNLGame/pulse/pb-cocos-utils/Utils.ts","../file:/E:/milo/milo-games/snl/assets/SNLGame/UIPack/Scripts/file:/E:/milo/milo-games/snl/assets/SNLGame/UIPack/Scripts/WaitingScreen.ts","../file:/E:/milo/milo-games/snl/assets/SNLGame/milo-game-sdk/src/transport/file:/E:/milo/milo-games/snl/assets/SNLGame/milo-game-sdk/src/transport/WebViewTransport.ts"],"names":["ccclass","_decorator","property","_dec","_dec2","Node","_descriptor","_applyDecoratedDescriptor","_class2","_Component","AnimationPoints","_this","_len","arguments","length","args","Array","_key","call","apply","concat","_initializerDefineProperty","_assertThisInitialized","_inheritsLoose","_proto","prototype","start","this","log","node","name","getTotalLength","totalLength","i","points","Vec3","distance","worldPosition","Component","configurable","enumerable","writable","initializer","_class","_RF","pop","AnimationTag","AudioClipData","type","CCString","_dec3","AudioClip","_dec4","CCFloat","_dec5","_dec6","CCBoolean","_descriptor2","_descriptor3","_descriptor4","_descriptor5","isLoopPlaying","lastPlayedTime","clipIndex","GetClip","clip","audioClips","CanPlay","Date","now","delayBetweenClips","_dec7","_dec8","_dec9","AudioSource","_dec10","Prefab","_class6","AudioManager","_descriptor6","_descriptor7","localStorageAudioEnabledKey","_descriptor8","audioSources","_isAudioEnabled","_proto2","onLoad","instance","ReadAudioEnabledFromLocalStorage","SetAudioEnabled","IsAudioEnabled","playSound","audioClipData","find","emptyAudioSource","getEmptyAudioSource","loop","volume","play","playOneShot","console","warn","stopSound","forEach","audioSource","stop","stopAllSounds","ToggleAudio","enabled","UpdateBackgroundMusic","WriteAudioEnabledToLocalStorage","sys","localStorage","setItem","value","getItem","_this$backgroundAudio","_this$backgroundAudio2","backgroundAudioSource","printAllPlayingAudioSources","playing","uuid","createAudioSource","instantiate","audioSourcePrefab","getComponent","setParent","push","_createClass","key","get","_class5","_class4","AutoReturnToPool","onEnable","scheduleOnce","returnToPool","timeToReturnToPool","update","deltaTime","PoolManager","returnObjectToPool","shouldDestroy","destroy","BasePlayerData","userId","avatar","sessionId","playerNumber","isOnline","isConnected","isReplacedByBot","isKickedOut","isReady","score","copyFrom","other","maxPlayers","minPlayers","maxClients","countdownTimeInSeconds","allowLateJoin","maxReconnectionAttempts","reconnectionAttemptInterval","reconnectionTime","gameFPS","serverFPS","patchRate","BaseRoomSettings","BaseRoomState","roomSettings","playersData","currentRoomStatus","RoomStatus","WAITING_FOR_PLAYERS","previousRoomStatus","NONE","spectatorsData","HomeTiles","Snake","data","animationPoints","Vec2","_dec11","_class8","Board","_initialOffset","_isInitialized","gameOptions","rocketSteps","tileTypes","pieces","powerUps","snakesData","ladders","snakesAnimationPoints","laddersAnimationPoints","snakes","_instance","onDestroy","Initialize","state","playerData","p","NetworkManager","Instance","getMySessionId","rotationPivot","setRotationFromEuler","getPlayerPositionOnBoard","createTiles","createLadders","createSnakes","reset","board","boardTiles","createPowerups","snake","snakePrefab","PlayerAssets","snakePrefabs","snakePresetIndex","snakeNode","snakesAndLaddersParent","tile","pathTiles","startTile","setWorldPosition","clone","setScale","ladder","ladderPrefab","ladderPrefabs","ladderPresetIndex","ladderNode","newPowerupsArray","j","PowerupTypes","oldPowerup","popPowerupON","newPowerUp","powerUpPrefab","PowerUp","powerupsParent","add","setPathNumber","setPowerUpType","pathNumber","index","findIndex","powerUp","splice","getPowerUpType","piece","tileType","SNLTileType","DEFAULT","getPowerupNode","removePowerUp","indexOf","removePowerUpByPathNumber","powerUpPathNumber","getPathTile","pieceIndex","getPlayerBase","getGlobalTileIndex","getPathPositions","startPathNumber","endPathNumber","pathPositions","pathTile","error","piecePosition","isValidPathNumber","TotalPathCount","boardTilesCount","isSafeTile","SAFE","isPathOccupied","currentPiece","some","getPawnsCountOnTile","filter","getPawnsOnTile","canKillOtherPieces","children","child","Piece","piecesOnTile","getKillablePieces","killerPiece","opponentPiece","doesEnemyExist","doesAnyPieceExistOnPath","getRocketLandingPathNumber","currentPathNumber","PlayerService","getPlayerPiece","addPieces","_this$pieces","addPiece","updateAllPiecePositions","updatePiecePosition","getLadderAnimationPoints","ladderIndex","l","getSnakeAnimationPoints","snakeIndex","s","getSnake","_class7","xOffset","yOffset","totalTilesCount","tilesPerRow","startRow","Math","floor","startCol","endTile","endRow","endCol","ceil","offset","x","y","_Menu","BotMadeMoveScreen","_timer","content","on","EventType","TOUCH_START","OnClick","Open","Close","initHandTween","initialization","sendMessage","GameMessageType","PLAYER_CAMEBACK","UIManager","CloseMenu","menuName","Menu","executionOrder","UITransform","_class3","CameraManger","designAspectRatio","currentAspectRatio","camera","windowWidth","windowHeight","designWidth","designHeight","Camera","_this2","updateScreenSize","adaptCameraToScreen","window","addEventListener","dt","screen","windowSize","width","innerWidth","height","innerHeight","toFixed","safeAreaTop","safeAreaBottom","safeAreaLeft","safeAreaRight","os","OS","IOS","ANDROID","visibleSize","view","getVisibleSize","visibleOrigin","getVisibleOrigin","effectiveHeight","safeAreaPadding","effectiveWidth","effectiveAspectRatio","isLandscape","orthoHeight","defaultOrthoHeight","aspectRatioFactor","min","math","clamp","minOrthoHeight","maxOrthoHeight","getWidth","getCurrentOrthoHeight","refreshCameraAdaptation","Label","CountdownScreen","_countdownTween","initCountdownTween","countdownText","active","tween","_loop","string","toString","scale","ONE","multiplyScalar","to","easing","deactivateScreen","blackBG","RichText","Sprite","SpriteFrame","DeathPopup","scaleTween","opacityTween","pendingScheduleId","showDeathPopup","position","popupRichText","killType","deathPopupNode","deathText","deathIcon","spriteFrame","getDeathIconSprite","layout","Layout","updateLayout","popupUITransform","adjustedPosition","calculateAdjustedPosition","playDeathPopupAnimation","targetPosition","boardNode","boardSpriteNode","boardUITransform","boardWorldPosition","boardWidth","boardLeftBound","boardRightBound","popupWidth","popupLeftBound","popupRightBound","adjustedX","heightOffset","DeathType","SNAKE_BITE","z","stopCurrentAnimation","uiOpacity","UIOpacity","addComponent","opacity","setTimeout","clearTimeout","deathIconSprites","gameId","sdkVersion","debug","Dice","onDiceRollDone","_currentFace","_rollingTween","_rollDuration","diceSprite","rollDice","result","rollAnimation","setDiceFace","face","diceFaces","finalFace","stopRolling","onUpdate","target","rollingFrames","tag","DICE_ROLL","PlayerAvatar","EndRoundScreen","_shouldShowThisScreen","_optionsInitialized","_rotatingGlow","ServerRoomStateChangeEvent","NetworkEvents","SERVER_ROOM_STATE_CHANGE","ServerStateChanged","off","newServerState","SNLRoomState","show_result_screen","initialize","stopRotateGlow","showResultScreen","GameManager","_won","winningPlayerNumber","_serverStateCopy","player","finishPosition","winningPlayer","SNLGameHandler","getPlayer","playerAvatar","setAvatarFromSpriteFrame","GetProfileSpriteFrame","setOutlineColor","getPawnColor","playerName","GetDisplayName","substring","GameLoaded","GameStarted","GameEnded","ScoreUpdate","VibratePreset","VibratePattern","UpdateHostId","PlayAgain","ChangeGame","InternalGameSdkEvents","FitToScreen","director","once","Director","EVENT_AFTER_UPDATE","refresh","setUiTransformToScreenSize","myUiTransform","orthoHeightFactor","setContentSize","updateWidgetsRecursively","updateWidgetsInHierarchy","updateWidgetAndDescendants","_this3","widget","Widget","updateAlignment","_extends","DefaultRoomSettings","diceRollWaitTime","movePiecesWaitTime","lagDelayCompensationTime","animationWaitTime","ROCKET","SHIELD","show_mute_button","show_faq","MissTurnsToKickOut","turnWaitTime","piecesPerPlayer","boardIndex","boardTilesPerRow","snakeAnimationTimePerTile","ladderAnimationTimePerTile","RoomStatusChangeEvent","EventTarget","_roomState","_handledGameOverCallbacks","_missTurnsToKickOut","miloSDK","MiloGameSDK","gameStartTime","init","sendGameLoaded","ConnectionStateChangeEvent","CONNECTION_STATE_CHANGE","onConnectionStateChange","onServerStateChange","payload","timestamp","gameLoaded","sendGameStarted","gameStarted","sendGameEnded","endTime","duration","hasWinningScreen","gameEnded","oldState","newState","ConnectionState","DISCONNECTED","END_GAME","reconnect","KICKED_OUT","setState","OnRemoteGameStateChange","emit","ROOM_STATUS_CHANGE","handleWon","CurrentRoom","playerIndex","finalPosition","showConfetti","GetPlayerData","GetWinnerPlayerData","winnerPlayerId","COUNTDOWN","GAME_SIMULATION","HandleGameOverCallbacks","setInput","eventName","Button","PageView","HowToPlay","onNextButtonClick","pageView","scrollToPage","_PlayerBaseState","IdleState","stateMachine","_stateName","PlayerState","IDLE","enterState","clearPlayerData","updateState","exitState","timer","outComesUIManager","setGoldenDiceOutcomes","clearAllOutComes","enableOutComesBg","dice","diceRoot","_moveOptioneInput","PlayerBaseState","InGameMenu","soundButton","UpdateAudioSprite","showMuteButton","faqButton","showFAQ","soundOnSprite","soundOffSprite","ToggleSound","InputManager","_isInputGiven","_inputType","MOVE_PIECE","_movedPieceIndex","ResetInput","SetInput","inputType","movedPieceIndex","InstructionsScreen","_isHelpInstructionDone","_isAutoMoveInstructionDone","spinner","repeatForever","by","angle","KickedOutScreen","kickedOutLabel","isOpened","getChildByName","HostChangeEvent","transport","WebViewTransport","config","defaultConfig","hostId","options","updateHostId","oldHostId","setHostId","HOST_CHANGED","newHostId","vibratePreset","preset","sendEvent","GameEvents","vibratePattern","pattern","sendScore","playAgain","changeGame","event","msg","ts","send","getHostId","MiloLayoutType","MiloLayoutAlign","Enum","visible","_layoutType","GRID","MiloLayout","_activeChildCount","_layoutSize","Size","_lastChildActiveState","CHILD_ADDED","onChildAdded","CHILD_REMOVED","onChildRemoved","removeAllChildListeners","removeChildListener","ACTIVE_IN_HIERARCHY_CHANGED","map","addChildActiveListeners","addChildActiveListener","_this4","onChildActiveChanged","handler","getAlignmentOffset","totalSize","_this$node$getCompone","nodeSize","contentSize","_alignment","LEFT_TOP","LEFT_CENTER","LEFT_BOTTOM","_padding","CENTER_TOP","CENTER","CENTER_BOTTOM","RIGHT_TOP","RIGHT_CENTER","RIGHT_BOTTOM","HORIZONTAL","updateHorizontalLayout","VERTICAL","updateVerticalLayout","updateGridLayout","_this5","totalWidth","maxHeight","childTransform","_spacingX","max","startPos","currentX","childHeight","childWidth","posY","_autoResize","transform","_this6","totalHeight","maxWidth","_spacingY","currentY","posX","_columns","rows","maxCellWidth","maxCellHeight","row","itemsInRow","rowWidth","rowOffsetX","col","cellX","cellY","currentActiveState","changed","set","Object","getOwnPropertyDescriptor","MoveOptionsInput","outComeValues","outComeClickedCallback","uiTransform","firstOutComeSprite","onFirstOutComeClick","secondOutComeSprite","onSecondOutComeClick","thirdOutComeSprite","onThirdOutComeClick","onDisable","setOutComeSprites","getDiceOutComesStackSprite","SetPosition","screenWidth","localOptionsPos","optionsUITransform","myXleftBound","myXRightBound","setPosition","MovePieceState","MOVING_PIECE","moveOptionsOffset","getOutComes","currentPlayerData","currentServerState","rollsList","setTotalTime","run","_pawnHandler","StartSelectAnimationsForValidMovePieces","pawns","OnPieceClick","_isLocal","Reset","getAllMovablePieces","pieceValidOutComes","allMovablePieces","allOutComes","outCome","canMovePiece","from","Set","isAnimating","sendMovePieceMessage","pieceNumber","bind","_currentSelectedPieceNumber","onMovePiece","json","JSON","parse","inputPayload","inputValue","rollValue","movePiece","piecePathNumber","diceNumber","_gameOptions","stringify","tooltip","NetworkConfig","parseQueryParams","PBLogger","isBrowser","queryParams","URLSearchParams","location","search","updateConfigFromQueryParam","assignedFromQueryParams","roomId","serverHost","parsedPort","parseInt","isNaN","serverPort","useSSL","params","paramName","updateFn","DEFAULT_RECONNECTION_DATA","reconnectionToken","ServerMessageEvent","_client","_room","_currentConnectionState","INITIALIZING","_reconnectionData","networkConfig","isDevMode","setProductionMode","initializeClient","info","connect","protocol","endpoint","Colyseus","Client","shouldRejoin","PbSaveSystem","LoadData","gameName","_connect","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","updateConnectionState","CONNECTING","rejoin","abrupt","createPlayerData","joinById","sent","initAfterJoin","t0","handleConnectionError","_x","_x2","JOINED_ROOM","initializeRoomCallbacks","saveReconnectionData","createAndJoinRoom","_createAndJoinRoom","_callee2","_context2","create","_x3","_x4","PlayerType","HUMAN","onStateChange","onLeave","code","onMessage","ServerMessageType","message","SERVER_MESSAGE","nextState","previousState","_reconnect","_callee3","attempt","maxAttempts","interval","baseRoomState","reconnectedRoom","_context3","RECONNECTING","delay","Error","handleReconnectionError","_x5","_x6","_x7","_rejoin","_callee4","formattedToken","_context4","_x8","_x9","_x10","_delay","_callee5","ms","_context5","Promise","resolve","_x11","errorMessage","method","NOT_FOUND","tokenToSave","includes","split","SaveData","leaveRoom","leave","then","_len2","_key2","OutComesUIManager","currentOutComesUI","currentOutComesValues","goldenDiceOutcomes","addOutCome","outComeUI","outComesPrefab","getGoldenDiceOutComeSprite","onOutComesChanged","removeOutCome","enableName","setPlayer","isActive","outcomesUiBgSprite","PawnHandlerState","PawnHandler","moveDataQueue","pawnAnimation","currentHandlingPieceIndex","currentHandlingMoveData","pieceAnimationsTag","PIECE_MOVE","hasKilledInThisMove","onPawnMoveAnimationComplete","handleData","StopPieceSelectAnimations","shift","move","onPieceLandedOnTargetTile","killAnimation","killOpponentPieces","PowerupAnimation","handlePowerUps","SnakeAnimation","handleSnake","LadderAnimation","handleLadder","sendMoveAck","landedPowerupType","getRocketAnimation","getShieldAnimation","SNAKE","hasShield","handleShield","currentBitingSnake","bitingSnakePreset","SnakePresets","GetEndTile","pieceOwnerName","snakeBiteMessage","truncateName","getSnakeAnimationFromPoints","LADDER","currentLadder","ladderPreset","LadderPresets","getLadderMoveAnimation","endPosition","snakePreset","timePerTile","pawnScaleDuration","pieceMovingDuration","pieceSpeed","animation","playFlashEffect","scaleDownPieceWithWiggle","AnimateSnakeHead","animateSnakeBulge","scaleUpPieceWithBounce","updateParentNode","getDistanceBetweenTwoTiles","startColumn","endColumn","sqrt","pow","nextLandingPathNumber","rocketPowerup","nextLandingPosition","direction","subtract","normalize","playPropellerAnimation","stopPropellerAnimation","setShieldActive","startPosition","totalTime","startScale","Color","myPiece","pieceOwnerTruncatedName","opponentPiecePlayerNumber","opponentPlayer","opponentPieceOwnerName","killMessage","PAWN_KILL","updatePieceScale","totalDuration","onKilled","progress","end","current","ratio","lerp","easeOutBack","c1","sendAck","updateShields","serverState","stopAllAnimations","ResetPawnPositions","Tween","stopAllByTag","MOVE_PIECE_ACK","validPieces","_stateMachine","movePieceState","playSelectAnimation","stopSelectAnimation","snakeHead","originalScale","clampMagnitude","magnitude","componentName","constructor","LogLevel","Debug","Info","warning","_len3","_key3","Warning","_len4","_key4","level","currentLevel","_console","output","isProduction","ReactNativeWebView","logData","postMessage","e","setLevel","RemoveData","removeItem","ClearAllData","clear","NORMAL_SCALE","CCInteger","Animation","_dec12","_dec13","moveData","previousPathNumber","_descriptor9","_descriptor10","_descriptor11","_descriptor12","labelNode","pieceSprite","getPawnSprite","labelSprite","color","pieceLabel","getPieceLabel","callBack","targetPathNumber","isOnBase","getMoveAnimation","moveToTargetPathNumber","durationPerTile","initialPosition","jumpToNextTileAnimation","sourceNode","midPosition","playMoveRippleEffect","ZERO","getOffsetPosition","parent","childIndex","myIndexInTile","totalPieces","stackedPawns","baseScale","targetScale","parentTile","animatePieceToSize","finalScale","propellerAnimation","setNodeUpDirection","up","forward","right","cross","rotation","quat","Quat","fromAxes","setWorldRotation","selectAnimation","sprite","moveRippleEffect","getObjectFromPool","shieldAnimation","PathNumber","scaleDownPiece","scaleDownBump","snakeBumpNode","_this7","scaleUpPiece","_this8","_this9","username","trimmed","trim","toUpperCase","Timer","_dec14","_dec15","_dec16","_dec17","Player","_descriptor13","_descriptor14","bases","sortedBasesHorizontalPosition","_currentPiecesData","_currentDiceValue","_pieceAnimations","_isProfileInitialized","_board","_myBasesParent","_descriptor15","_descriptor16","diceArrowInitialPosition","profileImageUrl","arrowAnimation","dicePointingArrow","getPosition","PlayerStateMachine","createMoveOptionsUI","moveOptionsUI","myProfileData","setLocal","loadProfile","numberOfPawns","createPawns","setDiceBgColor","setBorderAndTimerColor","playerProfileData","loadProfileImage","profileImage","openProfile","setAvatarFromUrl","createBases","count","pawnWidth","getPawnWidth","_","base","basePrefab","sort","a","b","pawnPrefab","pawn","piecesBase","onReconnection","isMyTurn","turnPlayerNumber","isAnyPieceSelected","maxChars","spaceIndex","setPlayerNumber","enable","arrowPointToDiceAnimation","_this$arrowAnimation","union","isFinished","diceBgSprite","getDiceBgColor","borderSprite","pawnSprites","getDiceOutComeSprite","diceOutComeSprites","diceOutComesStackSprites","goldenDiceOutComeSprite","getPowerUpSprite","powerUpType","isShield","isRocket","powerUpSprites","pawnColors","WHITE","enableOnClick","registerTouchEvents","unregisterTouchEvents","handleTouchStart","setOutline","outline","url","cachedTexture","getFromCache","createSpriteFrameFromTexture","loadRemoteImage","assetManager","assets","texture","loadRemote","ext","imageAsset","errorName","errorStack","stack","Texture2D","image","_players","_localPlayer","_myPlayerNumber","registerPlayer","isLocal","setMyPlayerNumber","getMyPlayerNumber","clearPlayers","_currentState","idleState","rollingState","currentTurnPlayerNumber","RollingState","changeState","getPlayerNumber","checkAndUpdateBotScreen","SET_STATE","onSetState","DICE_OUTCOME","onDiceOutCome","currentGameState","SNLGameState","ROLLING","setCurrentTime","OpenMenu","isBot","Pooler","poolName","pooledObjects","objectPrefab","pooledObjectCount","tempNode","getObject","createObject","returnObject","obj","pools","createPool","prefab","pool","getPool","powerupType","playIdleAnimation","blinkWithRedColor","RED","randomStartTime","random","_this2$animation","ReconnectingScreen","_spinnerTween","startSpinner","stopSpinner","_this$_spinnerTween","currentDiceOutcome","OnDiceClick","Input","CLIENT_DICE_ROLL","ROLLING_ACK","RoundCompleted","onHostChanged","winnerAvatar","winnerName","mostDeathsPlayer","getMostDeathsPlayer","mostDeathsPlayerAvatar","mostDeathsPlayerName","mostLadderClimbPlayer","getMostLadderClimbsPlayer","mostLadderClimbPlayerAvatar","mostLadderClimbPlayerName","deathsCountLabel","deathsCount","ladderClimbCountLabel","ladderClimbCount","updateHostUI","isHost","isLocalUserHost","hostPlayer","getHostPlayer","infoContainer","actionsButtonContainer","onPlayAgainButtonClicked","onChangeGameButtonClicked","SNLBoard","source","_clientState","_serverState","allPlayers","myPlayerNumber","hasReconnected","LoadPlayers","OnServerStateChange","game","Game","EVENT_HIDE","onGameHide","EVENT_SHOW","onGameShow","EVENT_RESTART","onGameRestart","EVENT_CLOSE","onGameClose","playersParent","Init","stopAll","onGameDisconnect","onGameReconnect","InitializePlayers","sendReconnectionStateToAllPlayers","sendStateToAllPlayers","assignMyPlayerNumber","localPlayer","currentPlayer","getNumberOfProfileRotation","allPlayersFinished","finishedPlayersCount","totalPlayersCount","anyPlayerFinished","maxDeaths","mostDeathsPlayerNumber","maxLadderClimbs","mostLadderClimbsPlayerNumber","removeEventListener","_BasePlayerData","SNLPlayerData","timeLeft","hasKilled","remainingTurnSkips","_BaseRoomSettings","SNLRoomSettings","DefaultSNLGameOptions","SNLInputPayload","_BaseRoomState","finishedCount","previousGameState","syncStateNumber","hasMissedTurn","newPlayer","spectator","newSpectator","_totalTime","_currentTime","_canRunTimer","_isTimerWarning","timerSprite","fillRange","getTimeLeftPercentage","checkAndSetTimerWarning","isTimeUp","time","TutorialScreen","_showHandGesture","_handAnimationTween","ServerGameOptionsReceived","show_hand_gesture","onSelectedLane","handClickAnimation","clockRotationQ","fromEuler","handNode","eulerAngles","onGameStateChange","FixWidthOfUICamera","OpenHowToPlay","menus","GetMenu","CloseAllMenus","updateUiBasedOnConfig","FixCanvasSize","top","bottom","allWidgets","getComponentsInChildren","getAllChildWidgets","flashNode","r","g","confetti","showerConfettiPrefab","confettiPositionNode","addChild","Utils","roundNumber","num","decimals","multiplier","round","Number","EPSILON","WaitingScreen","_window$ReactNativeWe"],"mappings":"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","file":"all.js","sourcesContent":["import { Vec3 } from 'cc';\r\nimport { Vec2 } from 'cc';\r\nimport { _decorator, Component, Node } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('AnimationPoints')\r\nexport class AnimationPoints extends Component {\r\n    @property([Node])\r\n    points: Node[] = [];\r\n\r\n    start() {\r\n        this.log(this.node.name + \" totalLength \", this.getTotalLength());\r\n    }\r\n    getTotalLength() : number {\r\n        let totalLength = 0;\r\n        for(let i=0; i<this.points.length-1; i++) {\r\n            totalLength += Vec3.distance(this.points[i].worldPosition, this.points[i+1].worldPosition);\r\n        }\r\n        return totalLength;\r\n    }\r\n}\r\n\r\n","export enum AnimationTag{\r\n    DICE_ROLL,\r\n    PIECE_MOVE\r\n}","import { Prefab } from 'cc';\r\nimport { instantiate } from 'cc';\r\nimport { CCBoolean } from 'cc';\r\nimport { _decorator, AudioClip, AudioSource, CCFloat, CCString, Component, Node, sys } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('AudioClipData')\r\nclass AudioClipData {\r\n    @property({type: CCString})\r\n    name: string ;\r\n    @property({type: AudioClip})\r\n    audioClips: AudioClip[] = [];\r\n    @property({type: CCFloat})\r\n    delayBetweenClips: number = 0;\r\n    @property({type: CCFloat})\r\n    volume: number = 1;\r\n    @property({type: CCBoolean})\r\n    loop: boolean;\r\n    isLoopPlaying: boolean;\r\n    lastPlayedTime: number = 0;\r\n\r\n\r\n    clipIndex = 0;\r\n    GetClip(): AudioClip {\r\n        let clip = this.audioClips[this.clipIndex];\r\n        this.clipIndex = (this.clipIndex + 1) % this.audioClips.length;\r\n        if(!this.CanPlay()){\r\n            return;  \r\n        }\r\n        this.lastPlayedTime = Date.now();\r\n        return clip;\r\n    }\r\n\r\n    CanPlay(): boolean {\r\n        return Date.now() - this.lastPlayedTime > this.delayBetweenClips * 1000;\r\n    }\r\n}\r\n@ccclass('AudioManager')\r\nexport class AudioManager extends Component {\r\n    public static instance: AudioManager = null;\r\n    @property({type: AudioClipData})\r\n    audioClipData: AudioClipData[] = [];\r\n    @property({type: AudioSource})\r\n    backgroundAudioSource: AudioSource = null;\r\n    localStorageAudioEnabledKey = \"SNLAudioEnabled\";\r\n    @property({type: Prefab})\r\n    audioSourcePrefab: Prefab = null;\r\n    audioSources: AudioSource[] = [];\r\n\r\n    _isAudioEnabled: 'true' | 'false' = 'true';\r\n    public get IsAudioEnabled(): 'true' | 'false' {\r\n        return this._isAudioEnabled;\r\n    }\r\n    protected onLoad(): void {\r\n        AudioManager.instance = this;\r\n        this.ReadAudioEnabledFromLocalStorage();\r\n    }\r\n    protected start(): void {\r\n        this.SetAudioEnabled(this.IsAudioEnabled);\r\n    }\r\n    \r\n    public playSound(name: string) {\r\n        if (this.IsAudioEnabled == 'false') {\r\n            return;\r\n        }\r\n        let audioClipData = this.audioClipData.find((audioClipData) => audioClipData.name == name);\r\n        if (audioClipData == null) {\r\n            // console.warn(\"Audio Clip not found for \", name);\r\n            return;\r\n        }\r\n        let clip = audioClipData.GetClip();\r\n        if (clip) {\r\n            if(audioClipData.isLoopPlaying) return;\r\n            // console.log(\"---Playing Sound: \", name);\r\n            var emptyAudioSource = this.getEmptyAudioSource();\r\n            // console.log(\"emptyAudioSource: \", emptyAudioSource.uuid);\r\n            emptyAudioSource.loop = audioClipData.loop;\r\n            audioClipData.isLoopPlaying = audioClipData.loop;\r\n            emptyAudioSource.volume = audioClipData.volume;\r\n            emptyAudioSource.clip = clip;\r\n            if(audioClipData.loop){\r\n                emptyAudioSource.play();\r\n            }\r\n            else{\r\n                emptyAudioSource.playOneShot(clip);\r\n            }\r\n            // console.log(\"Playing Sound: \", emptyAudioSource.playing, emptyAudioSource.uuid);\r\n        }\r\n        else{\r\n            console.warn(\"Audio Clip is in use \", name);\r\n        }\r\n    }\r\n\r\n    public stopSound(name: string) {\r\n        // console.warn(\"Stop Sound: \", name);\r\n        let audioClipData = this.audioClipData.find((audioClipData) => audioClipData.name == name);\r\n        if (!audioClipData) {\r\n            console.warn(\"Audio Clip not found for \", name);\r\n            return;\r\n        }\r\n        this.audioSources.forEach((audioSource) => {\r\n            if (audioSource.clip == audioClipData.audioClips[audioClipData.clipIndex]) {\r\n                audioClipData.isLoopPlaying = false;\r\n                audioSource.stop();\r\n            }\r\n        });\r\n    }\r\n\r\n    public stopAllSounds() {\r\n        this.audioSources.forEach((audioSource) => {\r\n            audioSource.stop();\r\n        });\r\n        this.audioClipData.forEach((audioClipData) => {\r\n            audioClipData.isLoopPlaying = false;\r\n        });\r\n    }\r\n\r\n    public ToggleAudio() {\r\n        if(this.IsAudioEnabled == 'true') {\r\n            this.SetAudioEnabled('false');\r\n        }\r\n        else {\r\n            this.SetAudioEnabled('true');\r\n        }\r\n        \r\n    }\r\n    public SetAudioEnabled(enabled: 'true' | 'false') {\r\n        this._isAudioEnabled = enabled;\r\n        this.UpdateBackgroundMusic();\r\n        this.WriteAudioEnabledToLocalStorage();\r\n    }\r\n    WriteAudioEnabledToLocalStorage() {\r\n        sys.localStorage.setItem(this.localStorageAudioEnabledKey, this.IsAudioEnabled);\r\n    }\r\n    ReadAudioEnabledFromLocalStorage() {\r\n        const value = sys.localStorage.getItem(this.localStorageAudioEnabledKey);\r\n        if(value == null) {\r\n            this._isAudioEnabled = 'true';\r\n        }\r\n        else\r\n            this._isAudioEnabled = value;\r\n    }\r\n    public UpdateBackgroundMusic() {\r\n        if(this.IsAudioEnabled == 'true') {\r\n            this.backgroundAudioSource?.play();\r\n        }\r\n        else {\r\n            this.backgroundAudioSource?.stop();\r\n        }\r\n    }\r\n\r\n    printAllPlayingAudioSources() {\r\n        this.audioSources.forEach((audioSource) => {\r\n            if(audioSource.playing)\r\n            console.log(\"Playing audio source: \", audioSource.playing, audioSource.clip.name, audioSource.uuid);\r\n        });\r\n    }\r\n\r\n    getEmptyAudioSource() {\r\n        let audioSource = this.audioSources.find((audioSource) => !audioSource.playing);\r\n        if(audioSource == null) {\r\n            audioSource = this.createAudioSource();\r\n        }\r\n        return audioSource;\r\n    }\r\n\r\n    createAudioSource() {\r\n        let audioSource = instantiate(this.audioSourcePrefab).getComponent(AudioSource);\r\n        audioSource.node.setParent(this.node);\r\n        this.audioSources.push(audioSource);\r\n        console.log(\"==== Created new audio source: \", this.audioSources.length);\r\n        return audioSource;\r\n    }\r\n}\r\n\r\n","import { _decorator, CCBoolean, CCFloat, Component, Node } from 'cc';\r\nimport { PoolManager } from './PoolManager';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('AutoReturnToPool')\r\nexport class AutoReturnToPool extends Component {\r\n    @property({type: CCFloat})\r\n    timeToReturnToPool : number = 3;\r\n    @property({type: CCBoolean})\r\n    shouldDestroy : boolean;\r\n\r\n    protected onEnable(): void {\r\n        this.scheduleOnce(this.returnToPool, this.timeToReturnToPool);\r\n    }\r\n    start() {\r\n\r\n    }\r\n\r\n    update(deltaTime: number) {\r\n        \r\n    }\r\n\r\n    returnToPool(){\r\n        PoolManager.instance.returnObjectToPool(this.node);\r\n        if(this.shouldDestroy)this.node.destroy();\r\n    }\r\n}\r\n\r\n\r\n","import { PlayerType } from \"../types/PlayerTypes\";\r\n\r\nexport class BasePlayerData {\r\n    userId: string;\r\n    name: string;\r\n    avatar: string;\r\n    sessionId: string;\r\n    playerNumber: number;\r\n    type: PlayerType;\r\n    isOnline: boolean;\r\n    isConnected: boolean;\r\n    isReplacedByBot: boolean;\r\n    isKickedOut: boolean;\r\n    isReady: boolean;\r\n    score: number;\r\n\r\n    copyFrom(other: BasePlayerData): void {\r\n        this.userId = other.userId;\r\n        this.name = other.name;\r\n        this.avatar = other.avatar;\r\n        this.sessionId = other.sessionId;\r\n        this.playerNumber = other.playerNumber;\r\n        this.type = other.type;\r\n        this.isOnline = other.isOnline;\r\n        this.isConnected = other.isConnected;\r\n        this.isReplacedByBot = other.isReplacedByBot;\r\n        this.isKickedOut = other.isKickedOut;\r\n        this.isReady = other.isReady;\r\n        this.score = other.score;\r\n    }\r\n}","import { IBaseRoomSettings } from \"../types/RoomTypes\";\r\n/**\r\n * Default room settings that can be overridden by specific games\r\n */\r\nexport const DefaultRoomSettings: IBaseRoomSettings = {\r\n    maxPlayers: 8,\r\n    minPlayers: 2,\r\n    maxClients: 8,\r\n    countdownTimeInSeconds: 3,\r\n    allowLateJoin: true,\r\n    maxReconnectionAttempts: 3,\r\n    reconnectionAttemptInterval: 1000,\r\n    reconnectionTime: 10000,\r\n    gameFPS: 30,\r\n    serverFPS: 30,\r\n    patchRate: 1000\r\n}\r\n\r\nexport class BaseRoomSettings {\r\n    maxPlayers: number;\r\n    minPlayers: number;\r\n    maxClients: number;\r\n    countdownTimeInSeconds: number;\r\n    allowLateJoin: boolean;\r\n    maxReconnectionAttempts: number;\r\n    reconnectionAttemptInterval: number;\r\n    reconnectionTime: number;\r\n    gameFPS: number;\r\n    serverFPS: number;\r\n    patchRate: number;\r\n\r\n    copyFrom(other: BaseRoomSettings): void {\r\n        this.maxPlayers = other.maxPlayers;\r\n        this.minPlayers = other.minPlayers;\r\n        this.maxClients = other.maxClients;\r\n        this.countdownTimeInSeconds = other.countdownTimeInSeconds;\r\n        this.allowLateJoin = other.allowLateJoin;\r\n        this.reconnectionTime = other.reconnectionTime;\r\n        this.gameFPS = other.gameFPS;\r\n        this.serverFPS = other.serverFPS;\r\n        this.patchRate = other.patchRate;\r\n    }\r\n}\r\n","import { BasePlayerData } from \"./BasePlayerData\";\r\nimport { RoomStatus } from \"../types/RoomTypes\";\r\nimport { BaseRoomSettings, DefaultRoomSettings } from \"./BaseRoomSettings\";\r\n\r\n/**\r\n * Base room state class that can be extended by specific games\r\n * This provides common state properties that all game rooms need\r\n */\r\nexport class BaseRoomState<BRS extends BaseRoomSettings, BPD extends BasePlayerData> {\r\n    // Room status\r\n    currentRoomStatus: RoomStatus = RoomStatus.WAITING_FOR_PLAYERS;\r\n    previousRoomStatus: RoomStatus = RoomStatus.NONE;\r\n    roomSettings: BRS;\r\n    playersData: BPD[];\r\n    spectatorsData: BasePlayerData[];\r\n\r\n    constructor(roomSettings: BRS, playersData: BPD[]) {\r\n        this.roomSettings = roomSettings;\r\n        this.playersData = playersData;\r\n        this.spectatorsData = [];\r\n    }  \r\n    \r\n    copyFrom(other: BaseRoomState<BRS, BPD>): void {\r\n        this.currentRoomStatus = other.currentRoomStatus;\r\n        this.previousRoomStatus = other.previousRoomStatus;\r\n        this.roomSettings.copyFrom(other.roomSettings);\r\n    }\r\n} ","import { _decorator, Component, Node } from 'cc';\r\nimport { SNLRoomState } from './schema/SNLRoomState';\r\nimport { SNLRoomSettings } from './schema/SNLRoomSettings';\r\nimport { NetworkManager } from '../pulse/networking/NetworkManager';\r\nimport { Vec3 } from 'cc';\r\nimport { Piece } from './Piece';\r\nimport { SNLTileType } from './type/SNLTileType';\r\nimport { PowerUp } from './PowerUp';\r\nimport { instantiate } from 'cc';\r\nimport { PlayerAssets } from './PlayerAssets';\r\nimport { Vec2 } from 'cc';\r\nimport { LadderData, SnakeData } from './Config/BoardData';\r\nimport { AnimationPoints } from './AnimationPoints';\r\nimport { PlayerService } from './PlayerService';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('HomeTiles')\r\nclass HomeTiles {\r\n    @property({ type: [Node] })\r\n    homeTiles: Node[] = [];\r\n}\r\n@ccclass('Snake')\r\nexport class Snake{\r\n    data : SnakeData;\r\n    animationPoints: AnimationPoints;\r\n    node : Node = null;\r\n    constructor(data: SnakeData, node: Node, animationPoints: AnimationPoints) {\r\n        this.data = data;\r\n        this.node = node;\r\n        this.animationPoints = animationPoints;\r\n    }\r\n}\r\n\r\n@ccclass('Board')\r\nexport class Board extends Component {\r\n    // Static instance for singleton pattern\r\n    private static _instance: Board = null;\r\n    public static get Instance(): Board {\r\n        return Board._instance;\r\n    }\r\n\r\n    // Board properties\r\n    @property({ type: [Node]})\r\n    pathTiles: Node[] = [];\r\n    \r\n    @property({ type: [HomeTiles] })\r\n    homeTiles: HomeTiles[] = [];\r\n    \r\n    @property({ type: Vec2 })\r\n    powerupOffsetFromTileCenter: Vec2 = new Vec2(0, 0);\r\n    \r\n    @property({ type: Node })\r\n    rotationPivot: Node = null;\r\n    \r\n    @property({ type: Node })\r\n    boardSpriteNode: Node = null;\r\n    \r\n    @property({ type: Node })\r\n    snakesAndLaddersParent: Node = null;\r\n    \r\n    @property({ type: Node })\r\n    powerupsParent: Node = null;\r\n\r\n    // Game state\r\n    private _initialOffset = 0;\r\n    private _isInitialized = false;\r\n    gameOptions: SNLRoomSettings = null;\r\n    rocketSteps: number = 8;\r\n    tileTypes: number[] = [];\r\n    \r\n    // Game elements\r\n    pieces: Piece[] = [];\r\n    powerUps: PowerUp[] = [];\r\n    snakesData: SnakeData[] = [];\r\n    ladders: LadderData[] = [];\r\n    snakesAnimationPoints: AnimationPoints[] = [];\r\n    laddersAnimationPoints: AnimationPoints[] = [];\r\n    snakes: Snake[] = [];\r\n\r\n    protected onLoad(): void {\r\n        if (Board._instance != null) {\r\n            this.node.destroy();\r\n            return;\r\n        }\r\n        Board._instance = this;\r\n        this._initialOffset = 2 * 13;\r\n    }\r\n\r\n    protected onDestroy(): void {\r\n        if (Board._instance === this) {\r\n            Board._instance = null;\r\n        }\r\n    }\r\n\r\n    // Initialization methods\r\n    public Initialize(state: SNLRoomState): void {\r\n        if (this._isInitialized) return;\r\n        \r\n        this.gameOptions = state.gameOptions;\r\n        const playerData = state.playersData.find(p => p.sessionId == NetworkManager.Instance.getMySessionId());\r\n        if(playerData != null) {\r\n            this.rotationPivot.setRotationFromEuler(0, 0, 180 + this.getPlayerPositionOnBoard(playerData.playerNumber) * 90);\r\n        }\r\n        this._isInitialized = true;\r\n        this.rocketSteps = this.gameOptions.rocketSteps;\r\n        if(playerData != null) {\r\n            console.log(\"Creating board preset for player \", playerData.playerNumber);\r\n        }\r\n        this.createTiles(state);\r\n        this.createLadders(state);\r\n        this.createSnakes(state);\r\n    }\r\n\r\n    public reset(state: SNLRoomState): void {\r\n        this.createTiles(state);\r\n    }\r\n\r\n    private createTiles(state: SNLRoomState): void {\r\n        this.tileTypes = [];\r\n        for (let i = 0; i < state.board.boardTiles.length; i++) {\r\n            this.tileTypes.push(state.board.boardTiles[i]);\r\n        }\r\n        this.createPowerups();\r\n    }\r\n\r\n    private createSnakes(state: SNLRoomState): void {\r\n        const snakes = state.board.snakes;\r\n        console.log(\"[Snakes] snakes count: \", snakes.length);\r\n        \r\n        for (let i = 0; i < snakes.length; i++) {\r\n            const snake = snakes[i];\r\n            const snakePrefab = PlayerAssets.instance.snakePrefabs[snake.snakePresetIndex];\r\n            const snakeNode = instantiate(snakePrefab);\r\n            \r\n            snakeNode.setParent(this.snakesAndLaddersParent, true);\r\n            const tile = this.pathTiles[snake.startTile - 1];\r\n            snakeNode.setWorldPosition(tile.worldPosition.clone());\r\n            snakeNode.setScale(1, 1, 1);\r\n            \r\n            this.snakesData.push(snake);\r\n            var animationPoints = snakeNode.getComponent(AnimationPoints);\r\n            this.snakesAnimationPoints.push(animationPoints);\r\n            this.snakes.push(new Snake(snake, snakeNode, animationPoints));\r\n        }\r\n        \r\n        console.log(\"[Snakes] snakes animation points count: \", this.snakesAnimationPoints.length);\r\n    }\r\n\r\n    private createLadders(state: SNLRoomState): void {\r\n        const ladders = state.board.ladders;\r\n        \r\n        for (let i = 0; i < ladders.length; i++) {\r\n            const ladder = ladders[i];\r\n            const ladderPrefab = PlayerAssets.instance.ladderPrefabs[ladder.ladderPresetIndex];\r\n            const ladderNode = instantiate(ladderPrefab);\r\n            \r\n            ladderNode.setParent(this.snakesAndLaddersParent, true);\r\n            const tile = this.pathTiles[ladder.startTile - 1];\r\n            ladderNode.setWorldPosition(tile.worldPosition.clone());\r\n            ladderNode.setScale(1, 1, 1);\r\n            \r\n            this.ladders.push(ladder);\r\n            this.laddersAnimationPoints.push(ladderNode.getComponent(AnimationPoints));\r\n        }\r\n    }\r\n\r\n    // Powerup methods\r\n    private createPowerups(): void {\r\n        const newPowerupsArray: PowerUp[] = [];\r\n        \r\n        for (let i = 0; i < this.tileTypes.length; i++) {\r\n            for (let j = 0; j < this.gameOptions.PowerupTypes.length; j++) {\r\n                if (this.tileTypes[i] & this.gameOptions.PowerupTypes[j]) {\r\n                    // Powerup found\r\n                    let oldPowerup = this.popPowerupON(i);\r\n                    if (oldPowerup != null) {\r\n                        newPowerupsArray.push(oldPowerup);\r\n                        break;\r\n                    }\r\n                    \r\n                    let newPowerUp = instantiate(PlayerAssets.instance.powerUpPrefab).getComponent(PowerUp);\r\n                    newPowerUp.node.setParent(this.powerupsParent, true);\r\n                    newPowerUp.node.worldPosition = this.pathTiles[i-1].worldPosition.clone().add(new Vec3(0, -15, 0));\r\n                    newPowerUp.setPathNumber(i);\r\n                    newPowerUp.setPowerUpType(this.tileTypes[i]);\r\n                    newPowerupsArray.push(newPowerUp);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        \r\n        // Destroy all old powerups\r\n        for (let i = 0; i < this.powerUps.length; i++) {\r\n            this.powerUps[i].node.destroy();\r\n        }\r\n        \r\n        this.powerUps = newPowerupsArray;\r\n    }\r\n\r\n    private popPowerupON(pathNumber: number): PowerUp {\r\n        const index = this.powerUps.findIndex(p => p.pathNumber === pathNumber);\r\n        if (index !== -1) {\r\n            const powerUp = this.powerUps[index];\r\n            this.powerUps.splice(index, 1);\r\n            return powerUp;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public getPowerUpType(piece: Piece): SNLTileType {\r\n        const tileType = this.tileTypes[piece.pathNumber];\r\n        \r\n        for (let i = 0; i < this.gameOptions.PowerupTypes.length; i++) {\r\n            if (tileType & this.gameOptions.PowerupTypes[i]) {\r\n                return this.gameOptions.PowerupTypes[i];\r\n            }\r\n        }\r\n        \r\n        return SNLTileType.DEFAULT;\r\n    }\r\n\r\n    public getPowerupNode(piece: Piece): Node {\r\n        const powerUp = this.powerUps.find(p => p.pathNumber === piece.pathNumber);\r\n        return powerUp ? powerUp.node : null;\r\n    }\r\n\r\n    public removePowerUp(powerUp: PowerUp): void {\r\n        this.tileTypes[powerUp.pathNumber] = SNLTileType.DEFAULT;\r\n        const index = this.powerUps.indexOf(powerUp);\r\n        \r\n        if (index !== -1) {\r\n            this.powerUps.splice(index, 1);\r\n        }\r\n        \r\n        powerUp.node.destroy();\r\n    }\r\n\r\n    public removePowerUpByPathNumber(powerUpPathNumber: number): void {\r\n        this.tileTypes[powerUpPathNumber] = SNLTileType.DEFAULT;\r\n        const index = this.powerUps.findIndex(p => p.pathNumber === powerUpPathNumber);\r\n        \r\n        if (index !== -1) {\r\n            this.powerUps[index].node.destroy();\r\n            this.powerUps.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    // Path and tile methods\r\n    public getPathTile(pathNumber: number, playerNumber: number, pieceIndex: number): Node {\r\n        if (pathNumber === 0) {\r\n            const playerBase = this.getPlayerBase(playerNumber);\r\n            return playerBase;\r\n        }\r\n        \r\n        const index = this.getGlobalTileIndex(pathNumber, playerNumber);\r\n        return this.pathTiles[index];\r\n    }\r\n\r\n    public getPathPositions(startPathNumber: number, endPathNumber: number, playerNumber: number, pieceIndex: number): Vec3[] {\r\n        const pathPositions: Vec3[] = [];\r\n        let pathTile: Node = null;\r\n        \r\n        if (endPathNumber === 0) {\r\n            for (let i = startPathNumber; i >= 0; i--) {\r\n                pathTile = this.getPathTile(i, playerNumber, pieceIndex);\r\n                if (!pathTile) {\r\n                    console.error(\"Path tile not found for path number: \", i, \" player number: \", playerNumber, \" piece index: \", pieceIndex);\r\n                }\r\n                pathPositions.push(pathTile.worldPosition.clone());\r\n            }\r\n            \r\n            console.log(\"Piece going to home: path positions length \", pathPositions.length, \r\n                        \" start path number: \", startPathNumber, \" end path number: \", endPathNumber);\r\n            return pathPositions;\r\n        }\r\n        \r\n        for (let i = startPathNumber; i <= endPathNumber; i++) {\r\n            pathTile = this.getPathTile(i, playerNumber, pieceIndex);\r\n            if (pathTile == null) continue;\r\n            pathPositions.push(pathTile.worldPosition.clone());\r\n        }\r\n        \r\n        return pathPositions;\r\n    }\r\n\r\n    public getGlobalTileIndex(piecePosition: number, playerNumber: number): number {\r\n        return piecePosition - 1;\r\n    }\r\n\r\n    public isValidPathNumber(pathNumber: number, playerNumber: number): boolean {\r\n        return pathNumber >= 1 && pathNumber <= this.TotalPathCount(this.gameOptions);\r\n    }\r\n\r\n    public TotalPathCount(gameOptions: SNLRoomSettings): number {\r\n        return gameOptions.boardTilesCount;\r\n    }\r\n\r\n    public isSafeTile(pathNumber: number): boolean {\r\n        const isSafe: number = this.tileTypes[pathNumber] & SNLTileType.SAFE;\r\n        return isSafe > 0;\r\n    }\r\n\r\n    // Piece related methods\r\n    public isPathOccupied(pathNumber: number, currentPiece: Piece): boolean {\r\n        if (pathNumber === 0) {\r\n            return false;\r\n        }\r\n        \r\n        return this.pieces.some(p => p.pathNumber === currentPiece.pathNumber && p !== currentPiece);\r\n    }\r\n\r\n    public getPawnsCountOnTile(pathNumber: number): number {\r\n        if (pathNumber === 0) return 0;\r\n        return this.pieces.filter(p => p.pathNumber === pathNumber).length;\r\n    }\r\n\r\n    public getPawnsOnTile(pathNumber: number): Piece[] {\r\n        if (pathNumber === 0) return [];\r\n        return this.pieces.filter(p => p.pathNumber === pathNumber);\r\n    }\r\n\r\n    public canKillOtherPieces(pathNumber: number, playerNumber: number, pieceIndex: number): boolean {\r\n        if (pathNumber <= 0) return false;\r\n        if (this.isSafeTile(pathNumber)) return false;\r\n        \r\n        const tile = this.getPathTile(pathNumber, playerNumber, pieceIndex);\r\n        if (tile.children.length >= 3) return false;\r\n        \r\n        return tile.children.some(child => child.getComponent(Piece).playerNumber !== playerNumber);\r\n    }\r\n\r\n    public piecesOnTile(pathNumber: number, playerNumber: number): number {\r\n        if (pathNumber <= 0) return 0;\r\n        return this.pieces.filter(p => p.pathNumber === pathNumber).length;\r\n    }\r\n\r\n    public getKillablePieces(killerPiece: Piece): Piece {\r\n        if (killerPiece.pathNumber <= 0) return null;\r\n        if (this.isSafeTile(killerPiece.pathNumber)) return null;\r\n        \r\n        const piecesOnTile = this.pieces.filter(\r\n            p => p !== killerPiece && p.pathNumber === killerPiece.pathNumber\r\n        );\r\n        \r\n        if (piecesOnTile.length === 1) {\r\n            const opponentPiece = piecesOnTile[0];\r\n            if (opponentPiece.playerNumber !== killerPiece.playerNumber) {\r\n                return opponentPiece;\r\n            }\r\n        }\r\n        \r\n        return null;\r\n    }\r\n\r\n    public doesEnemyExist(piece: Piece, pathNumber: number): boolean {\r\n        if (pathNumber === 0 || pathNumber > this.TotalPathCount(this.gameOptions)) return false;\r\n        \r\n        return this.pieces.some(\r\n            p => p.pathNumber === piece.pathNumber && p.playerNumber !== piece.playerNumber\r\n        );\r\n    }\r\n\r\n    public doesAnyPieceExistOnPath(piece: Piece, pathNumber: number): boolean {\r\n        if (pathNumber === 0 || pathNumber > this.TotalPathCount(this.gameOptions)) return false;\r\n        \r\n        return this.pieces.some(\r\n            p => p !== piece && p.pathNumber === pathNumber\r\n        );\r\n    }\r\n\r\n    public getRocketLandingPathNumber(piece: Piece): number {\r\n        let currentPathNumber = piece.pathNumber;\r\n        \r\n        for (let i = 0; i < this.rocketSteps; i++) {\r\n            if (!this.isValidPathNumber(currentPathNumber + 1, piece.playerNumber)) {\r\n                console.log(\"Invalid Path Number: \", currentPathNumber + 1);\r\n                return currentPathNumber;\r\n            }\r\n            currentPathNumber += 1;\r\n        }\r\n        \r\n        return currentPathNumber;\r\n    }\r\n\r\n    // Player related methods\r\n    public getPlayerPositionOnBoard(playerNumber: number): number {\r\n        const positions = [0, 2, 3, 1];\r\n        return positions[playerNumber] || 0;\r\n    }\r\n\r\n    public getPlayerBase(playerNumber: number): Node {\r\n        return PlayerService.instance.getPlayerBase(playerNumber);\r\n    }\r\n\r\n    public getPlayerPiece(playerNumber: number, pieceIndex: number): Piece {\r\n        return PlayerService.instance.getPlayerPiece(playerNumber, pieceIndex);\r\n    }\r\n\r\n    // Piece management methods\r\n    public addPieces(pieces: Piece[]): void {\r\n        this.pieces.push(...pieces);\r\n    }\r\n\r\n    public addPiece(piece: Piece): void {\r\n        this.pieces.push(piece);\r\n    }\r\n\r\n    public updateAllPiecePositions(): void {\r\n        this.pieces.forEach(piece => piece.updatePiecePosition());\r\n    }\r\n\r\n    // Animation related methods\r\n    public getLadderAnimationPoints(ladderPresetIndex: number): AnimationPoints {\r\n        const ladderIndex = this.ladders.findIndex(l => l.ladderPresetIndex === ladderPresetIndex);\r\n        return this.laddersAnimationPoints[ladderIndex];\r\n    }\r\n\r\n    public getSnakeAnimationPoints(snakePresetIndex: number): AnimationPoints {\r\n        const snakeIndex = this.snakesData.findIndex(s => s.snakePresetIndex === snakePresetIndex);\r\n        return this.snakesAnimationPoints[snakeIndex];\r\n    }\r\n\r\n    public getSnake(snakePresetIndex: number): Snake {\r\n        const snakeIndex = this.snakesData.findIndex(s => s.snakePresetIndex === snakePresetIndex);\r\n        return this.snakes[snakeIndex];\r\n    }\r\n}\r\n\r\n","export type SnakeData = {\r\n    startTile: number;\r\n    snakePresetIndex: number;\r\n}\r\nexport type LadderData = {\r\n    startTile: number;\r\n    ladderPresetIndex: number;\r\n}\r\nexport type BoardData = {\r\n    snakes: SnakeData[];\r\n    ladders: LadderData[];\r\n}\r\nexport type SnakePreset = {\r\n    offset: {\r\n        x: number;\r\n        y: number;\r\n        length: number;\r\n    }\r\n}\r\nexport type LadderPreset = {\r\n    offset: {\r\n        x: number;\r\n        y: number;\r\n        length: number;\r\n    }\r\n}\r\nexport const SnakePresets: SnakePreset[] = [\r\n    //Snake 0\r\n    {\r\n        offset: {\r\n            x: -2,\r\n            y: -1,\r\n            length: 150,\r\n        }\r\n    }, \r\n    //Snake 1\r\n    {\r\n        offset: {\r\n            x: -2,\r\n            y: -3,\r\n            length: 450,\r\n        }\r\n    },\r\n    //Snake 2\r\n    {\r\n        offset: {\r\n            x: 1,\r\n            y: -2,\r\n            length: 300,\r\n        }\r\n    },\r\n    //Snake 3\r\n    {\r\n        offset: {\r\n            x: 1,\r\n            y: -5,\r\n            length: 750,\r\n        }\r\n    },\r\n    //Snake 4\r\n    {\r\n        offset: {\r\n            x: 0,\r\n            y: -4,\r\n            length: 600,\r\n        }\r\n    },\r\n    //Snake 5\r\n    {\r\n        offset: {\r\n            x: -1,\r\n            y: -1,\r\n            length: 150,\r\n        }\r\n    },\r\n];\r\n\r\nexport const LadderPresets: LadderPreset[] = [\r\n    //ladder 0\r\n    {\r\n        offset: {\r\n            x: 1,\r\n            y: 1,\r\n            length: 144,\r\n        }\r\n    },\r\n    //ladder 1\r\n    {\r\n        offset: {\r\n            x: 1,\r\n            y: 2,\r\n            length: 282,\r\n        }\r\n    },\r\n    //ladder 2\r\n    {\r\n        offset: {\r\n            x: -1,\r\n            y: 3,\r\n            length: 424,\r\n        }\r\n    },\r\n    //ladder 3 TODO: change it\r\n    {\r\n        offset: {\r\n            x: 0,\r\n            y: 5,\r\n            length: 604,\r\n        }\r\n    },\r\n    //ladder 4\r\n    {\r\n        offset: {\r\n            x: -1,\r\n            y: 5,\r\n            length: 604,\r\n        }\r\n    },\r\n    //ladder 5\r\n    {\r\n        offset: {\r\n            x: 1,\r\n            y: 1,\r\n            length: 144,\r\n        }\r\n    },\r\n];\r\nexport const boardsData: BoardData[] = [\r\n    //Board 0\r\n    {\r\n        snakes: [\r\n            {\r\n                startTile: 9,\r\n                snakePresetIndex: 0,\r\n            },\r\n            {\r\n                startTile: 27,\r\n                snakePresetIndex: 1,\r\n            },\r\n            {\r\n                startTile: 46,\r\n                snakePresetIndex: 2,\r\n            },\r\n            {\r\n                startTile: 49,\r\n                snakePresetIndex: 3,\r\n            },\r\n            {\r\n                startTile: 57,\r\n                snakePresetIndex: 4,\r\n            },\r\n            {\r\n                startTile: 61,\r\n                snakePresetIndex: 5,\r\n            }\r\n        ],\r\n        ladders: [\r\n            {\r\n                startTile: 3,\r\n                ladderPresetIndex: 0,\r\n            },\r\n            {\r\n                startTile: 14,\r\n                ladderPresetIndex: 1,\r\n            },\r\n            {\r\n                startTile: 21,\r\n                ladderPresetIndex: 2,\r\n            },\r\n            {\r\n                startTile: 10,\r\n                ladderPresetIndex: 4,\r\n            },\r\n            {\r\n                startTile: 53,\r\n                ladderPresetIndex: 5,\r\n            }\r\n        ]\r\n    },\r\n]\r\n\r\nexport function GetEndTile(startTile: number, xOffset: number, yOffset: number, totalTilesCount: number, tilesPerRow: number): number {\r\n\r\n    // Get row and column of start tile\r\n    let startRow = Math.floor((startTile - 1) / tilesPerRow);\r\n    let startCol = (startTile - 1) % tilesPerRow;\r\n    if (startRow % 2 === 1) {\r\n        // Odd rows go right to left\r\n        startCol = tilesPerRow - 1 - startCol;\r\n    }\r\n\r\n    // Apply offsets\r\n    let endRow = startRow + yOffset;\r\n    let endCol = startCol + xOffset;\r\n\r\n    // Check bounds\r\n    if (endRow < 0 || endRow >= Math.ceil(totalTilesCount / tilesPerRow) || \r\n        endCol < 0 || endCol >= tilesPerRow) {\r\n        return -1;\r\n    }\r\n\r\n    // Convert back to tile number\r\n    let endTile;\r\n    if (endRow % 2 === 0) {\r\n        // Even rows go left to right\r\n        endTile = endRow * tilesPerRow + endCol + 1;\r\n    } else {\r\n        // Odd rows go right to left\r\n        endTile = endRow * tilesPerRow + (tilesPerRow - 1 - endCol) + 1;\r\n    }\r\n\r\n    // Check if tile number is valid\r\n    if (endTile < 1 || endTile > totalTilesCount) {\r\n        return -1;\r\n    }\r\n\r\n    return endTile;\r\n}","import { _decorator, Component, Label, Node, Tween, tween, Vec3 } from 'cc';\r\nimport { Menu } from './Menu';\r\nimport { UIManager } from './UIManager';\r\nimport { NetworkManager } from '../../pulse/networking/NetworkManager';\r\nimport { GameMessageType } from '../../scripts/type/GameMessageType';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('BotMadeMoveScreen')\r\nexport class BotMadeMoveScreen extends Menu {\r\n    _timer = 0;\r\n    protected onLoad(): void {\r\n        super.onLoad();\r\n        this.content.on(Node.EventType.TOUCH_START, this.OnClick, this);\r\n    }\r\n\r\n    protected onDestroy(): void {\r\n    }\r\n    public Open(): void {\r\n        super.Open();\r\n        this._timer = 0;\r\n    }\r\n    public Close(): void {\r\n        super.Close();\r\n    } \r\n    public initHandTween() {\r\n\r\n    }\r\n\r\n    initialization() {\r\n        this.initHandTween();\r\n    }\r\n\r\n    OnClick() {\r\n        NetworkManager.Instance.sendMessage(GameMessageType.PLAYER_CAMEBACK, {});\r\n        UIManager.instance.CloseMenu(this.menuName);\r\n    }\r\n}\r\n\r\n","import { sys } from 'cc';\r\nimport { view } from 'cc';\r\nimport { _decorator, Camera, Component, Node, UITransform, Vec3, Size, screen, math, rect } from 'cc';\r\nconst { ccclass, property, executionOrder } = _decorator;\r\n\r\nexecutionOrder(-1)\r\n@ccclass('CameraManger')\r\nexport class CameraManger extends Component {\r\n    static instance: CameraManger = null;\r\n    @property({ type: UITransform })\r\n    canvasUITransform: UITransform = null;\r\n    \r\n    @property\r\n    designHeight: number = 1920;\r\n    \r\n    @property\r\n    designWidth: number = 1080;\r\n    \r\n    @property\r\n    defaultOrthoHeight: number = 820;\r\n    \r\n    @property\r\n    minOrthoHeight: number = 750;\r\n    \r\n    @property\r\n    maxOrthoHeight: number = 1080;\r\n    \r\n    @property\r\n    safeAreaPadding: number = 50; // Add padding to ensure content isn't at the very edge\r\n    \r\n    designAspectRatio: number;\r\n    currentAspectRatio: number;\r\n    camera: Camera = null;\r\n    windowWidth: number = 1080;\r\n    windowHeight: number = 1920;\r\n\r\n    protected onLoad(): void {\r\n        CameraManger.instance = this;\r\n        this.designAspectRatio = this.designWidth / this.designHeight;\r\n        this.camera = this.node.getComponent(Camera);\r\n    }\r\n\r\n    protected start(): void {\r\n        this.updateScreenSize();\r\n        this.adaptCameraToScreen();\r\n        \r\n        // Listen for screen size changes (orientation changes)\r\n        window.addEventListener('resize', () => {\r\n            this.updateScreenSize();\r\n            this.adaptCameraToScreen();\r\n        });\r\n    }\r\n    \r\n    protected update(dt: number): void {\r\n    }\r\n    \r\n    private updateScreenSize(): void {\r\n        this.windowWidth = screen.windowSize.width || window.innerWidth;\r\n        this.windowHeight = screen.windowSize.height || window.innerHeight;\r\n        this.currentAspectRatio = this.windowWidth / this.windowHeight;\r\n        console.log(\"Window Size: \" + this.windowWidth + \"x\" + this.windowHeight + \", Aspect Ratio: \" + this.currentAspectRatio.toFixed(2));\r\n    }\r\n\r\n    adaptCameraToScreen(): void {\r\n        if(!this.camera) return;\r\n        \r\n        // Get safe area info if available\r\n        let safeAreaTop = 0;\r\n        let safeAreaBottom = 0;\r\n        let safeAreaLeft = 0;\r\n        let safeAreaRight = 0;\r\n        \r\n        if(sys.os === sys.OS.IOS || sys.os === sys.OS.ANDROID) {\r\n            // Use view.getVisibleSize() and visibleOrigin instead of getSafeAreaRect\r\n            const visibleSize = view.getVisibleSize();\r\n            const visibleOrigin = view.getVisibleOrigin();\r\n            \r\n            if(visibleSize) {\r\n                safeAreaTop = visibleOrigin.y;\r\n                safeAreaBottom = this.windowHeight - (visibleOrigin.y + visibleSize.height);\r\n                safeAreaLeft = visibleOrigin.x;\r\n                safeAreaRight = this.windowWidth - (visibleOrigin.x + visibleSize.width);\r\n            }\r\n        }\r\n        \r\n        // Calculate the effective height of the screen (considering safe area)\r\n        const effectiveHeight = this.windowHeight - safeAreaTop - safeAreaBottom - (this.safeAreaPadding * 2);\r\n        const effectiveWidth = this.windowWidth - safeAreaLeft - safeAreaRight - (this.safeAreaPadding * 2);\r\n        const effectiveAspectRatio = effectiveWidth / effectiveHeight;\r\n        \r\n        console.log(\"Effective Size: \" + effectiveWidth + \"x\" + effectiveHeight + \", Aspect Ratio: \" + effectiveAspectRatio.toFixed(2));\r\n        \r\n        // Determine if we're in portrait or landscape mode\r\n        const isLandscape = this.currentAspectRatio >= 1.0;\r\n        \r\n        let orthoHeight = this.defaultOrthoHeight;\r\n        \r\n        if(isLandscape) {\r\n            console.log(\"=== Landscape Mode ===\");\r\n            // For landscape, use a larger ortho height to show more content vertically\r\n            orthoHeight = this.defaultOrthoHeight * (1.0 / this.currentAspectRatio) * 1.5;\r\n        } else {\r\n            console.log(\"=== Portrait Mode ===\");\r\n            // For portrait, adjust ortho height based on aspect ratio to ensure content fits\r\n            // The narrower the screen, the smaller the ortho height needs to be\r\n            const aspectRatioFactor = 0.6 / Math.min(this.currentAspectRatio, 0.6);\r\n            orthoHeight = this.defaultOrthoHeight * aspectRatioFactor;\r\n        }\r\n        \r\n        // Ensure ortho height stays within reasonable bounds\r\n        orthoHeight = math.clamp(orthoHeight, this.minOrthoHeight, this.maxOrthoHeight);\r\n        \r\n        this.camera.orthoHeight = orthoHeight;\r\n        console.log(\"Camera Ortho Height: \" + orthoHeight.toFixed(2));\r\n    }\r\n\r\n    getWidth(): number {\r\n        return this.camera.orthoHeight * 2 * this.currentAspectRatio;\r\n    }\r\n\r\n    getCurrentOrthoHeight(): number {\r\n        return this.camera.orthoHeight;\r\n    }\r\n    \r\n    // Call this method if game content is getting cut off after layout changes\r\n    public refreshCameraAdaptation(): void {\r\n        this.updateScreenSize();\r\n        this.adaptCameraToScreen();\r\n    }\r\n}\r\n","import { _decorator, Component, Label, Node, Tween, tween, Vec3 } from 'cc';\r\nimport { Menu } from './Menu';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('CountdownScreen')\r\nexport class CountdownScreen extends Menu {\r\n    _countdownTween: Tween<Node> = null;\r\n    @property({type: Label})\r\n    countdownText: Label = null;\r\n    @property({type : Node})\r\n    blackBG: Node = null;\r\n\r\n    protected onLoad(): void {\r\n        super.onLoad();\r\n    }\r\n    protected onDestroy(): void {\r\n    }\r\n    public Open(): void {\r\n        super.Open();\r\n        this.initialization();\r\n    }\r\n    public Close(): void {\r\n        super.Close();\r\n        if(this._countdownTween != null)\r\n            this._countdownTween.stop();\r\n        \r\n    } \r\n    initCountdownTween() {\r\n        this.countdownText.node.active = true;\r\n        this._countdownTween = tween(this.countdownText.node);\r\n        for(let i=3; i>=1; i--) {\r\n            this._countdownTween.call(() => {\r\n                this.countdownText.string = i.toString();\r\n                this.countdownText.node.scale = Vec3.ONE.clone().multiplyScalar(2);\r\n            })\r\n            .to(1, { scale: Vec3.ONE.clone().multiplyScalar(1) }, { easing: 'sineIn' });\r\n        }\r\n        this._countdownTween.call(() => {\r\n            this.deactivateScreen();\r\n        });\r\n\r\n    }\r\n    deactivateScreen() {\r\n        this.countdownText.string = \"\";\r\n        this.countdownText.node.active = false;\r\n        this.blackBG.active = false;        \r\n    }\r\n    initialization() {\r\n        this.initCountdownTween();\r\n        this._countdownTween.start();\r\n    }\r\n}\r\n\r\n","import { UITransform } from 'cc';\r\nimport { _decorator, Component, Node, Sprite, SpriteFrame, Vec3, tween, RichText, UIOpacity } from 'cc';\r\nimport { Board } from './Board';\r\nimport { DeathType } from './type/DeathType';\r\nimport { Layout } from 'cc';\r\nimport { Tween } from 'cc';\r\n\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('DeathPopup')\r\nexport class DeathPopup extends Component {\r\n    static instance: DeathPopup = null;\r\n\r\n    @property({ type: RichText })\r\n    deathText: RichText = null;\r\n    \r\n    @property({ type: Sprite })\r\n    deathIcon: Sprite = null;\r\n\r\n    @property({type: Node})\r\n    deathPopupNode: Node = null;\r\n\r\n    @property({type: SpriteFrame})\r\n    deathIconSprites: SpriteFrame[] = [];\r\n\r\n    private scaleTween: Tween<Node> | null = null;\r\n    private opacityTween: Tween<UIOpacity> | null = null;\r\n    private pendingScheduleId: number | null = null;\r\n\r\n    protected onLoad(): void {\r\n        DeathPopup.instance = this;\r\n    }\r\n\r\n    /**\r\n     * Static method to show a death popup at the specified position\r\n     * @param position - The world position where the death occurred\r\n     * @param popupRichText - Text to display in the popup\r\n     * @param killType - Type of death\r\n     */\r\n    static showDeathPopup(position: Vec3, popupRichText: string, killType: DeathType): void {\r\n        if(!DeathPopup.instance.deathPopupNode) {\r\n            console.log(\"DeathPopup: deathPopupNode not assigned\");\r\n            return;\r\n        }\r\n        \r\n        DeathPopup.instance.deathPopupNode.active = true;\r\n        \r\n        // Set the text and icon content\r\n        DeathPopup.instance.deathText.string = popupRichText;\r\n        DeathPopup.instance.deathIcon.spriteFrame = DeathPopup.instance.getDeathIconSprite(killType);\r\n        \r\n        // Update layout to ensure proper sizing\r\n        const layout = DeathPopup.instance.deathPopupNode.getComponent(Layout);\r\n        if (layout) {\r\n            layout.updateLayout();\r\n        }\r\n        \r\n        // Get the popup's UITransform for bounds calculation\r\n        const popupUITransform = DeathPopup.instance.deathPopupNode.getComponent(UITransform);\r\n        if (!popupUITransform) {\r\n            console.error(\"DeathPopup: Missing UITransform component on deathPopupNode\");\r\n            return;\r\n        }\r\n        \r\n        // Calculate and adjust position with bounds checking\r\n        const adjustedPosition = DeathPopup.instance.calculateAdjustedPosition(position, popupUITransform, killType);\r\n        DeathPopup.instance.deathPopupNode.setWorldPosition(adjustedPosition);\r\n        \r\n        // Play the death popup animation\r\n        DeathPopup.instance.playDeathPopupAnimation();\r\n    }\r\n\r\n    /**\r\n     * Calculate adjusted position with bounds checking\r\n     * @param targetPosition - The target position where popup should appear\r\n     * @param popupUITransform - The popup's UITransform component\r\n     * @param killType - Type of death for height offset calculation\r\n     * @returns Adjusted position with bounds compensation applied\r\n     */\r\n    private calculateAdjustedPosition(targetPosition: Vec3, popupUITransform: UITransform, killType: DeathType): Vec3 {\r\n        // Get board bounds\r\n        const boardNode = Board.Instance.boardSpriteNode;\r\n        const boardUITransform = boardNode.getComponent(UITransform);\r\n        \r\n        if (!boardUITransform) {\r\n            console.error(\"DeathPopup: Board node missing UITransform component\");\r\n            return targetPosition;\r\n        }\r\n        \r\n        // Calculate board world bounds\r\n        const boardWorldPosition = boardNode.worldPosition;\r\n        const boardWidth = boardUITransform.width;\r\n        const boardLeftBound = boardWorldPosition.x - (boardWidth * 0.5);\r\n        const boardRightBound = boardWorldPosition.x + (boardWidth * 0.5);\r\n        \r\n        // Calculate popup bounds with center anchor (0.5, 0.5)\r\n        const popupWidth = popupUITransform.width;\r\n        const popupLeftBound = targetPosition.x - (popupWidth * 0.5);\r\n        const popupRightBound = targetPosition.x + (popupWidth * 0.5);\r\n        \r\n        let adjustedX = targetPosition.x;\r\n        \r\n        // Check if popup overflows left bound\r\n        if (popupLeftBound < boardLeftBound) {\r\n            const overflowAmount = boardLeftBound - popupLeftBound;\r\n            adjustedX += overflowAmount;\r\n        }\r\n        // Check if popup overflows right bound\r\n        else if (popupRightBound > boardRightBound) {\r\n            const overflowAmount = popupRightBound - boardRightBound;\r\n            adjustedX -= overflowAmount;\r\n        }\r\n        \r\n        // Calculate height offset\r\n        const popupHeight = popupUITransform.height;\r\n        const heightOffset = (popupHeight * 0.5) + (killType === DeathType.SNAKE_BITE ? 40 : 50);\r\n        \r\n        return new Vec3(adjustedX, targetPosition.y + heightOffset, targetPosition.z);\r\n    }\r\n\r\n    /**\r\n     * Play the death popup animation\r\n     * Scale: 0.75 -> 1.0 -> 0.75\r\n     * Opacity: 0 -> 1 -> 0\r\n     * Duration: 0.5 seconds for each phase with 0.6 second pause\r\n     */\r\n    private playDeathPopupAnimation(): void {\r\n        if (!this.deathPopupNode) {\r\n            console.error(\"DeathPopup: deathPopupNode not assigned for animation\");\r\n            return;\r\n        }\r\n    \r\n        // Stop previous tweens and scheduled timeouts\r\n        this.stopCurrentAnimation();\r\n    \r\n        // Get or add UIOpacity component\r\n        let uiOpacity = this.deathPopupNode.getComponent(UIOpacity);\r\n        if (!uiOpacity) {\r\n            uiOpacity = this.deathPopupNode.addComponent(UIOpacity);\r\n        }\r\n    \r\n        // Set initial state\r\n        this.deathPopupNode.setScale(0.75, 0.75, 1);\r\n        uiOpacity.opacity = 0;\r\n    \r\n        // Phase 1: Scale up and fade in\r\n        this.scaleTween = tween(this.deathPopupNode)\r\n            .to(0.3, { scale: new Vec3(1, 1, 1) })\r\n            .start();\r\n    \r\n        this.opacityTween = tween(uiOpacity)\r\n            .to(0.3, { opacity: 255 })\r\n            .call(() => {\r\n                // Pause before phase 2\r\n                this.pendingScheduleId = window.setTimeout(() => {\r\n                    this.scaleTween = tween(this.deathPopupNode)\r\n                        .to(0.5, { scale: new Vec3(0.75, 0.75, 1) })\r\n                        .start();\r\n    \r\n                    this.opacityTween = tween(uiOpacity)\r\n                        .to(0.5, { opacity: 0 })\r\n                        .call(() => {\r\n                            this.deathPopupNode.active = false;\r\n                            this.scaleTween = null;\r\n                            this.opacityTween = null;\r\n                            this.pendingScheduleId = null;\r\n                        })\r\n                        .start();\r\n                }, 2000);\r\n            })\r\n            .start();\r\n    }\r\n\r\n    /**\r\n     * Stop current animation and clean up resources\r\n     */\r\n    private stopCurrentAnimation(): void {\r\n        if (this.scaleTween) {\r\n            this.scaleTween.stop();\r\n            this.scaleTween = null;\r\n        }\r\n        if (this.opacityTween) {\r\n            this.opacityTween.stop();\r\n            this.opacityTween = null;\r\n        }\r\n        if (this.pendingScheduleId !== null) {\r\n            clearTimeout(this.pendingScheduleId);\r\n            this.pendingScheduleId = null;\r\n        }\r\n    }\r\n\r\n    getDeathIconSprite(killType: DeathType) {\r\n        return this.deathIconSprites[killType];\r\n    }\r\n}\r\n\r\n\r\n","export enum DeathType {\r\n    PAWN_KILL = 0,\r\n    SNAKE_BITE = 1,\r\n}","// src/config/defaultConfig.ts\r\nexport const defaultConfig = {\r\n    gameId: 'unknown-game',\r\n    sdkVersion: '1.0.0',\r\n    debug: false,\r\n };\r\n  ","import { _decorator, Component, Node, Sprite, SpriteFrame, tween, Tween } from 'cc';\r\nimport { AudioManager } from './AudioManager';\r\nimport { AnimationTag } from './type/AnimationTag';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('Dice')\r\nexport class Dice extends Component {\r\n    @property({ type: [SpriteFrame] })\r\n    diceFaces: SpriteFrame[] = [];\r\n    @property({ type: [SpriteFrame] })\r\n    rollingFrames: SpriteFrame[] = [];\r\n    \r\n    @property({ type: Sprite })\r\n    diceSprite: Sprite = null;\r\n\r\n    onDiceRollDone: Function = () => {};\r\n\r\n    _currentFace: number = 0;\r\n    _rollingTween: Tween<any> = null;\r\n    _rollDuration: number = 0.5;\r\n\r\n    protected onLoad(): void {\r\n        this._rollingTween = tween(this.diceSprite.node);\r\n    }\r\n    rollDice(result: number) {\r\n        AudioManager.instance.playSound(\"DiceRoll\");\r\n        this.rollAnimation(result);\r\n    }\r\n    setDiceFace(face: number) {\r\n        // console.log(\"Setting Dice Face: \", face);\r\n        if(face < 0 || face >= this.diceFaces.length) return;\r\n        this._currentFace = face;\r\n        this.diceSprite.spriteFrame = this.diceFaces[face];\r\n    }\r\n    rollAnimation(finalFace: number) {\r\n        this.stopRolling();\r\n        \r\n        // console.log(\"Rolling\");\r\n        this._rollingTween = tween({ value: 0 })\r\n            .to(.5, { value: 13 }, {\r\n                onUpdate:((target: { value: number }) => {\r\n                    const index = Math.floor(target.value)%this.rollingFrames.length;\r\n                    this.diceSprite.spriteFrame = this.rollingFrames[index];\r\n                    // Do something with the updated value\r\n                })\r\n            })\r\n            .call(() => {\r\n                this.setDiceFace(finalFace);\r\n                console.log(\"~~~ Dice Rolling Done ~~~\");\r\n                this.onDiceRollDone();\r\n            })\r\n        this._rollingTween.tag(AnimationTag.DICE_ROLL);\r\n        this._rollingTween.start();\r\n    }\r\n    stopRolling() {\r\n        // console.log(\"STOP ROLLING\");\r\n        if(this._rollingTween) this._rollingTween.stop();\r\n    }\r\n\r\n    reset(){\r\n        this.diceSprite.spriteFrame = this.diceFaces[0];\r\n    }\r\n}\r\n\r\n","import { _decorator, Component, Label, Node, Tween, tween, Vec3 } from 'cc';\r\nimport { Menu } from './Menu';\r\nimport { GameManager } from '../../scripts/GameManager';\r\nimport { Sprite } from 'cc';\r\nimport { ServerRoomStateChangeEvent } from '../../pulse/networking/NetworkManager';\r\nimport { NetworkEvents } from '../../pulse/types/NetworkTypes';\r\nimport { SNLRoomState } from '../../scripts/schema/SNLRoomState';\r\nimport { SNLGameHandler } from '../../scripts/SNLGameHandler';\r\nimport { UIManager } from './UIManager';\r\nimport { PlayerAvatar } from '../../pulse/pb-cocos-utils/PlayerAvatar';\r\nimport { PlayerAssets } from '../../scripts/PlayerAssets';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('EndRoundScreen')\r\nexport class EndRoundScreen extends Menu {\r\n    @property({ type: PlayerAvatar})\r\n    playerAvatar: PlayerAvatar = null;\r\n    @property({ type: Label})\r\n    playerName: Label = null;\r\n    _shouldShowThisScreen: boolean = false;\r\n    _optionsInitialized : boolean = false;\r\n\r\n    _rotatingGlow: Tween<Node> = null;\r\n    protected onLoad(): void {\r\n        super.onLoad();\r\n        ServerRoomStateChangeEvent.on(NetworkEvents.SERVER_ROOM_STATE_CHANGE, this.ServerStateChanged, this);\r\n    }\r\n    protected onDestroy(): void {\r\n        ServerRoomStateChangeEvent.off(NetworkEvents.SERVER_ROOM_STATE_CHANGE, this.ServerStateChanged, this);\r\n    }\r\n    ServerStateChanged(newServerState: SNLRoomState) {\r\n        if(this._optionsInitialized) return;\r\n        const state = new SNLRoomState();\r\n        if(state.gameOptions) {\r\n            this._shouldShowThisScreen = state.gameOptions.show_result_screen;\r\n            this._optionsInitialized = true;\r\n        }\r\n        state.copyFrom(newServerState);\r\n    }\r\n    \r\n    public Open(): void {\r\n        if(!this._shouldShowThisScreen) {\r\n            return;\r\n        }\r\n        super.Open();\r\n        this.initialize();\r\n    }\r\n    \r\n    public Close(): void {\r\n        super.Close();\r\n        this.stopRotateGlow();\r\n    }\r\n\r\n    initialize() {\r\n        super.initialize();\r\n        //close if show result screen is false\r\n        if(!UIManager.instance.showResultScreen) {\r\n            this.Close();\r\n            return;\r\n        }\r\n        const isWinner = GameManager.Instance._won\r\n        const winningPlayerNumber = GameManager.Instance._serverStateCopy.playersData.findIndex(player => player.finishPosition == 1);\r\n        if (winningPlayerNumber == -1) {\r\n            console.error(\"no winning player\");\r\n            return;\r\n        }\r\n        const winningPlayer = SNLGameHandler.Instance.getPlayer(winningPlayerNumber);\r\n        this.playerAvatar.setAvatarFromSpriteFrame(winningPlayer.GetProfileSpriteFrame());\r\n        this.playerAvatar.setOutlineColor(PlayerAssets.instance.getPawnColor(winningPlayerNumber));\r\n        this.playerName.string = this.GetDisplayName(winningPlayer.playerName.string);\r\n    }\r\n\r\n    stopRotateGlow() {\r\n        if(this._rotatingGlow) {\r\n            this._rotatingGlow.stop();\r\n            this._rotatingGlow = null;\r\n        }\r\n    }\r\n\r\n\r\n    GetDisplayName(name: string) {\r\n        if(name.length > 8) {\r\n            return name.substring(0, 8) + \"..\";\r\n        }\r\n        return name;\r\n    }\r\n}\r\n\r\n","export const GameEvents = {\r\n    GameLoaded: 'MILO_GAME_LOADED',\r\n    GameStarted: 'MILO_GAME_STARTED',\r\n    GameEnded:   'MILO_GAME_ENDED',\r\n    ScoreUpdate: 'MILO_SCORE_UPDATE',\r\n    VibratePreset:  'MILO_VIBRATE_PRESET',\r\n    VibratePattern: 'MILO_VIBRATE_PATTERN',\r\n    UpdateHostId: 'MILO_UPDATE_HOST_ID',\r\n    PlayAgain: 'MILO_PLAY_AGAIN',\r\n    ChangeGame: 'MILO_CHANGE_GAME',\r\n  } as const;\r\n\r\nexport enum InternalGameSdkEvents {\r\n  HOST_CHANGED = 'HOST_CHANGED'\r\n}\r\n  ","import { UITransform } from 'cc';\r\nimport { _decorator, Component, director, Director, Node } from 'cc';\r\nimport { CameraManger } from './CameraManger';\r\nimport { Widget } from 'cc';\r\nimport { CCBoolean } from 'cc';\r\nimport { screen } from 'cc';\r\nimport { view } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('FitToScreen')\r\nexport class FitToScreen extends Component {\r\n    @property({type: CCBoolean})\r\n    updateWidgetsRecursively: boolean;\r\n    \r\n    protected onEnable(): void {\r\n        // Also refresh after one frame to ensure layout is updated\r\n        director.once(Director.EVENT_AFTER_UPDATE, () => {\r\n            this.refresh();\r\n        });\r\n    }\r\n    // Call this method to set the size of the UI element to the screen size\r\n    setUiTransformToScreenSize(){\r\n        const myUiTransform = this.node.getComponent(UITransform);\r\n        const orthoHeightFactor = CameraManger.instance.getCurrentOrthoHeight() / CameraManger.instance.defaultOrthoHeight;\r\n        const windowWidth = screen.windowSize.width || window.innerWidth;\r\n        const windowHeight = screen.windowSize.height || window.innerHeight;\r\n        const height = CameraManger.instance.designHeight * orthoHeightFactor;\r\n        const width = height * windowWidth / windowHeight;\r\n        \r\n        console.log(\"windowWidth\", windowWidth, \"windowHeight\", windowHeight);\r\n        myUiTransform.setContentSize(width, height);\r\n    }\r\n    \r\n    // Call this method to refresh the size of the UI element\r\n    public refresh(): void {\r\n        this.setUiTransformToScreenSize();\r\n        if(this.updateWidgetsRecursively){\r\n            this.updateWidgetsInHierarchy();\r\n        }\r\n    }\r\n\r\n    public updateWidgetsInHierarchy(){\r\n        // Recursively update all descendant widgets\r\n        this.updateWidgetAndDescendants(this.node);\r\n    }\r\n\r\n    private updateWidgetAndDescendants(node: Node) {\r\n        // Update this node's widget if it has one\r\n        const widget = node.getComponent(Widget);\r\n        if (widget && this.node.uuid != node.uuid) {\r\n            widget.updateAlignment();\r\n        }\r\n        \r\n        // Recursively update all children\r\n        node.children.forEach(child => {\r\n            this.updateWidgetAndDescendants(child);\r\n        });\r\n    }\r\n}\r\n\r\n","import { SNLTileType } from \"../type/SNLTileType\";\r\nimport { ISNLGameOptions } from \"../Config/Interfaces\";\r\nimport { DefaultRoomSettings } from \"db://assets/SNLGame/pulse/schema/BaseRoomSettings\";\r\n\r\nexport const DefaultSNLGameOptions : ISNLGameOptions = {\r\n    ...DefaultRoomSettings,\r\n    boardTilesCount: 7,\r\n    diceRollWaitTime: 30,\r\n    movePiecesWaitTime: 30,\r\n    lagDelayCompensationTime: 1,\r\n    animationWaitTime: 10,\r\n    rocketSteps: 8,\r\n    PowerupTypes: [SNLTileType.ROCKET, SNLTileType.SHIELD],\r\n    show_mute_button: false,\r\n    show_result_screen: true,\r\n    show_faq: true,\r\n    MissTurnsToKickOut: 3,\r\n    turnWaitTime: 30,\r\n    maxReconnectionAttempts : 10,\r\n    piecesPerPlayer: 2,\r\n    boardIndex: 0,\r\n    boardTilesPerRow: 8,\r\n    snakeAnimationTimePerTile: 0.25,\r\n    ladderAnimationTimePerTile: 0.1,\r\n}","import { _decorator, Component, EventTarget } from 'cc';\r\nimport { NetworkManager, ConnectionStateChangeEvent, ServerRoomStateChangeEvent } from '../pulse/networking/NetworkManager';\r\nimport { ConnectionState, NetworkEvents } from '../pulse/types/NetworkTypes';\r\nimport { Board } from './Board';\r\nimport { AudioManager } from './AudioManager';\r\nimport { BasePlayerData } from '../pulse/schema/BasePlayerData';\r\nimport { SNLRoomState } from './schema/SNLRoomState';\r\nimport { RoomStatus } from '../pulse/types/RoomTypes';\r\nimport { MiloGameSDK } from '../milo-game-sdk/src/core/MiloGameSDK';\r\nimport { GameEvents } from '../milo-game-sdk/src/events';\r\nimport { GameLoadedPayload, GameStartedPayload, GameEndedPayload } from '../milo-game-sdk/src/types';\r\nimport { UIManager } from '../UIPack/Scripts/UIManager';\r\n\r\nconst { ccclass } = _decorator;\r\n\r\nexport const RoomStatusChangeEvent = new EventTarget();\r\n@ccclass('GameManager')\r\nexport class GameManager extends Component {\r\n    \r\n    static _instance: GameManager | null = null;\r\n    _roomState : RoomStatus = RoomStatus.NONE;\r\n   \r\n    _won: boolean = false;\r\n    _handledGameOverCallbacks: boolean = false;\r\n    \r\n    _serverStateCopy : SNLRoomState = null;\r\n    _missTurnsToKickOut : number = 3;\r\n    \r\n    public miloSDK: MiloGameSDK = new MiloGameSDK();\r\n    private gameStartTime: number = 0;\r\n    \r\n    static get Instance() {\r\n        return this._instance;\r\n    }\r\n    \r\n    protected onLoad(): void {\r\n        if(GameManager._instance != null) {\r\n            this.node.destroy();\r\n        }\r\n        \r\n        GameManager._instance = this;\r\n        \r\n        // Initialize Milo SDK\r\n        this.miloSDK.init({ \r\n            gameId: 'snl-game',\r\n            debug: true \r\n        });\r\n        \r\n        // Send game loaded event\r\n        this.sendGameLoaded();\r\n        \r\n        ConnectionStateChangeEvent.on(NetworkEvents.CONNECTION_STATE_CHANGE, this.onConnectionStateChange, this);\r\n        ServerRoomStateChangeEvent.on(NetworkEvents.SERVER_ROOM_STATE_CHANGE, this.onServerStateChange, this);\r\n    }\r\n\r\n    private sendGameLoaded(): void {\r\n        const payload: GameLoadedPayload = {\r\n            timestamp: Date.now()\r\n        };\r\n        this.miloSDK.gameLoaded(payload);\r\n    }\r\n\r\n    private sendGameStarted(): void {\r\n        this.gameStartTime = Date.now();\r\n        const payload: GameStartedPayload = {\r\n            timestamp: this.gameStartTime\r\n        };\r\n        this.miloSDK.gameStarted(payload);\r\n    }\r\n\r\n    private sendGameEnded(): void {\r\n        const endTime = Date.now();\r\n        const duration = this.gameStartTime > 0 ? endTime - this.gameStartTime : 0;\r\n        const payload: GameEndedPayload = {\r\n            duration: duration,\r\n            hasWinningScreen: true,\r\n        };\r\n        //give 2 seconds delay before sending game ended event\r\n        setTimeout(() => {\r\n            this.miloSDK.gameEnded(payload);\r\n        }, 2000);\r\n    }\r\n   \r\n    onConnectionStateChange(oldState: ConnectionState, newState: ConnectionState) {\r\n        if(newState == ConnectionState.DISCONNECTED) {\r\n            if (this._roomState != RoomStatus.END_GAME) {\r\n                NetworkManager.Instance.reconnect();\r\n            }\r\n        }\r\n        else if(newState == ConnectionState.KICKED_OUT){\r\n            this.setState(RoomStatus.KICKED_OUT);\r\n        }\r\n        \r\n    }\r\n    setState(newState: RoomStatus) {\r\n        this.OnRemoteGameStateChange(newState);\r\n        this._roomState = newState;\r\n        RoomStatusChangeEvent.emit(NetworkEvents.ROOM_STATUS_CHANGE, newState);\r\n    }\r\n    \r\n    onServerStateChange(newServerState: SNLRoomState) {\r\n        // console.log(\"got new serverstate from server \" , newServerState);\r\n        if(this._serverStateCopy == null) {\r\n            this._serverStateCopy = new SNLRoomState();\r\n            this._serverStateCopy.copyFrom(newServerState);\r\n            this._missTurnsToKickOut = this._serverStateCopy.gameOptions.MissTurnsToKickOut;\r\n        }\r\n        if(newServerState.currentRoomStatus == RoomStatus.END_GAME) {\r\n            console.log(\"Game Over\");\r\n            this._serverStateCopy = new SNLRoomState();\r\n            this._serverStateCopy.copyFrom(newServerState);\r\n            this.handleWon(newServerState);\r\n        }\r\n        this.setState(newServerState.currentRoomStatus);\r\n    }\r\n    handleWon(newServerState: SNLRoomState) {\r\n        const state = new SNLRoomState();\r\n        state.copyFrom(newServerState);\r\n        const sessionId = NetworkManager.Instance.CurrentRoom.sessionId;\r\n        const playerIndex = state.playersData.findIndex(data => data.sessionId == sessionId);\r\n        if(playerIndex == -1) return;\r\n        const pieces = state.playersData[playerIndex].pieces;\r\n        const finalPosition = Board.Instance.TotalPathCount(state.gameOptions);\r\n        for(let i=0; i<pieces.length; i++) {\r\n            if(pieces[i] == finalPosition)\r\n                this._won = true;\r\n        }\r\n\r\n        if(this._won){\r\n            UIManager.instance.showConfetti();\r\n            AudioManager.instance.playSound(\"Win\");\r\n        }\r\n        else {\r\n            AudioManager.instance.playSound(\"Lose\");\r\n        }\r\n    }\r\n    protected onDestroy(): void {\r\n        ConnectionStateChangeEvent.off(NetworkEvents.CONNECTION_STATE_CHANGE, this.onConnectionStateChange, this);\r\n        ServerRoomStateChangeEvent.off(NetworkEvents.SERVER_ROOM_STATE_CHANGE, this.onServerStateChange, this);\r\n    }\r\n    \r\n    GetPlayerData(): any {\r\n        console.log(\"Player Profiles : \", this._serverStateCopy.playersData);\r\n        // console\r\n        return this._serverStateCopy.playersData.find((player) => player.sessionId == NetworkManager.Instance.CurrentRoom.sessionId);\r\n    }\r\n\r\n    GetWinnerPlayerData(): BasePlayerData {\r\n        let winnerPlayerId = -1;\r\n        // console.log(\"SNLPlayersData : \", this._serverStateCopy.snlPlayersData);\r\n        for(let i = 0; i < this._serverStateCopy.playersData.length; i++) {\r\n            if(this._serverStateCopy.playersData[i].finishPosition >= 0) {\r\n                winnerPlayerId = i;\r\n                break;\r\n            }\r\n        }\r\n        console.log(\"Winner Player Id : \", winnerPlayerId);\r\n        if(winnerPlayerId == -1) return null;\r\n        // console.log(\"player profiles : \", this._serverStateCopy.playerProfiles);\r\n        return this._serverStateCopy.playersData.find((player) => player.playerNumber == winnerPlayerId);\r\n    }\r\n    protected OnRemoteGameStateChange(newState : RoomStatus): void {\r\n        console.log(\"RemoteGameStateChange Message : \" + newState);\r\n        if(this._roomState == newState) return;\r\n        if(this._roomState == RoomStatus.NONE && newState == RoomStatus.WAITING_FOR_PLAYERS) {\r\n            \r\n        }\r\n        else if(newState == RoomStatus.COUNTDOWN) {\r\n            \r\n        }\r\n        else if(newState == RoomStatus.GAME_SIMULATION) {\r\n            // Game has started - send game started event\r\n            this.sendGameStarted();\r\n        }\r\n        else if(newState == RoomStatus.END_GAME) {\r\n            // Game has ended - send game ended event\r\n            this.sendGameEnded();\r\n            this.HandleGameOverCallbacks();\r\n        }\r\n    }\r\n    HandleGameOverCallbacks() {\r\n        console.log(\"HandleGameOverCallbacks\");\r\n        if (this._handledGameOverCallbacks) {\r\n            console.log(\"Already handled game over callbacks\");\r\n            return;\r\n        }\r\n        \r\n        this._handledGameOverCallbacks = true;\r\n    }\r\n\r\n    setInput(eventName : string) {\r\n        \r\n        // ServerReflectionHandler.setInput(input);\r\n    }\r\n    \r\n}","export enum GameMessageType {\r\n    NONE = \"none\",\r\n    SET_STATE = \"set_state\",\r\n    DICE_OUTCOME = \"dice_outcome\",\r\n    CLIENT_DICE_ROLL = \"client_dice_roll\",\r\n    MOVE_PIECE = \"move_piece\",\r\n    ROLLING_ACK = \"rolling_ack\",\r\n    MOVE_PIECE_ACK = \"move_piece_ack\",\r\n    WAITING_ACK = \"waiting_ack\",\r\n    KICKED_OUT = \"kicked_out\",\r\n    PLAYER_CAMEBACK = \"player_cameback\",\r\n}","import { _decorator, Component, Label, Node, Tween, tween, Vec3 } from 'cc';\r\nimport { Menu } from './Menu';\r\nimport { Button } from 'cc';\r\nimport { PageView } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('HowToPlay')\r\nexport class HowToPlay extends Menu {\r\n    @property({type: Button})\r\n    nextButton : Button;\r\n    @property({type: PageView})\r\n    pageView : PageView;\r\n    protected onLoad(): void {\r\n        super.onLoad();\r\n    }\r\n\r\n    protected onDestroy(): void {\r\n    }\r\n    public Open(): void {\r\n        super.Open();\r\n    }\r\n    public Close(): void {\r\n        super.Close();\r\n    } \r\n    public initHandTween() {\r\n\r\n    }\r\n\r\n    onNextButtonClick() {\r\n        this.log(\"Next button clicked\");\r\n        this.pageView.scrollToPage(1);\r\n    }\r\n}\r\n\r\n","import { Player, PlayerState } from \"../Player\";\r\nimport { PlayerBaseState } from \"./PlayerBaseState\";\r\nimport { PlayerStateMachine } from \"./PlayerStateMachine\";\r\n\r\nexport class IdleState extends PlayerBaseState {\r\n    stateMachine: PlayerStateMachine;\r\n    _stateName : PlayerState = PlayerState.IDLE;\r\n    player: Player;\r\n    constructor(stateMachine: PlayerStateMachine) {\r\n        super();\r\n        this.stateMachine = stateMachine;\r\n        this.player = this.stateMachine.player;\r\n    }\r\n    enterState() {\r\n        // console.log(\"Entered Idle State\");\r\n        this.clearPlayerData();\r\n    }\r\n    updateState(deltaTime) {\r\n    }\r\n    exitState() {\r\n        // console.log(\"Exited Idle State\");\r\n    }\r\n\r\n    clearPlayerData(){\r\n        this.player.timer.stop();\r\n        this.player.timer.reset();\r\n        this.player.outComesUIManager.setGoldenDiceOutcomes(0);\r\n        this.player.outComesUIManager.clearAllOutComes();\r\n        this.player.outComesUIManager.enableOutComesBg(false);\r\n        this.player.dice.reset();\r\n        this.player.diceRoot.active = false;\r\n        if(this.player._moveOptioneInput != null){\r\n            this.player._moveOptioneInput.node.active = false;\r\n        }\r\n    }\r\n}","export * from './types';\r\nexport * from './events';\r\n","export * from './WebViewTransport';\r\n\r\n\r\n","import { _decorator, Component, Node, RichText, EventTarget, Vec3, tween, Prefab, Label, Sprite, SpriteFrame} from 'cc';\r\nimport { Menu } from './Menu';\r\nimport { AudioManager } from '../../scripts/AudioManager';\r\nimport { ServerRoomStateChangeEvent } from '../../pulse/networking/NetworkManager';\r\nimport { NetworkEvents } from '../../pulse/types/NetworkTypes';\r\nimport { UIManager } from './UIManager';\r\nimport { SNLRoomState } from '../../scripts/schema/SNLRoomState';\r\n\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('InGameMenu')\r\nexport class InGameMenu extends Menu {\r\n    @property({type: SpriteFrame})\r\n    public soundOnSprite: SpriteFrame = null;\r\n    @property({type: SpriteFrame})\r\n    public soundOffSprite: SpriteFrame = null;\r\n    @property({type: Sprite})\r\n    public soundButton: Sprite = null;\r\n    @property({type: Node})\r\n    public faqButton: Node = null;\r\n    protected onLoad(): void {\r\n        super.onLoad();\r\n        ServerRoomStateChangeEvent.on(NetworkEvents.SERVER_ROOM_STATE_CHANGE, this.ServerStateChanged, this);\r\n    }\r\n    protected onDestroy(): void {\r\n        ServerRoomStateChangeEvent.off(NetworkEvents.SERVER_ROOM_STATE_CHANGE, this.ServerStateChanged, this);\r\n    }\r\n    ServerStateChanged(newServerState: SNLRoomState) {\r\n        // const serverState = new SNLRoomState();\r\n        // serverState.CopyFrom(newServerState);\r\n        // serverState.gameOptions.show_mute_button\r\n        this.soundButton.node.active = newServerState.gameOptions.show_mute_button;\r\n    }\r\n    protected start(): void {\r\n    }\r\n    public Open(): void {\r\n        console.log(\"InGameMenu open called\");\r\n        super.Open();\r\n        this.initialize();\r\n    }\r\n    public Close(): void {\r\n        super.Close();\r\n    }\r\n    public initialize() : void {\r\n        super.initialize();\r\n        this.UpdateAudioSprite();\r\n        this.soundButton.node.active = UIManager.instance.showMuteButton;\r\n        this.faqButton.active = UIManager.instance.showFAQ;\r\n    }\r\n    public UpdateAudioSprite() {\r\n        if(AudioManager.instance.IsAudioEnabled == 'true') {\r\n            this.soundButton.spriteFrame = this.soundOnSprite;\r\n        }\r\n        else {\r\n            this.soundButton.spriteFrame = this.soundOffSprite;\r\n        }\r\n    }\r\n    public ToggleSound() {\r\n        AudioManager.instance.ToggleAudio();\r\n        this.UpdateAudioSprite();\r\n    }\r\n\r\n    \r\n}\r\n\r\n\r\n\r\n","import { GameMessageType } from \"./type/GameMessageType\";\r\nexport  class InputManager {\r\n    private static _instance: InputManager;\r\n    public static get Instance(): InputManager {\r\n        if (this._instance == null) {\r\n            this._instance = new InputManager();\r\n        }\r\n        return this._instance;\r\n    }\r\n    private constructor() {\r\n    }\r\n    private _isInputGiven = false;\r\n    private _inputType: GameMessageType = GameMessageType.MOVE_PIECE;\r\n    private _movedPieceIndex: number = -1;\r\n\r\n    public get IsInputGiven() {\r\n        return this._isInputGiven;\r\n    }\r\n    public get InputType() {\r\n        return this._inputType;\r\n    }\r\n    public get MovedPieceIndex() {\r\n        return this._movedPieceIndex;\r\n    }\r\n    public ResetInput() {\r\n        this._isInputGiven = false;\r\n        this._inputType = GameMessageType.MOVE_PIECE;\r\n        this._movedPieceIndex = -1;\r\n    }\r\n    public SetInput(inputType: GameMessageType, movedPieceIndex: number=-1) {\r\n        this._isInputGiven = true;\r\n        this._inputType = inputType;\r\n        this._movedPieceIndex = movedPieceIndex;\r\n    }\r\n}","import { _decorator, Component, Label, Node, Tween, tween, Vec3 } from 'cc';\r\nimport { Menu } from './Menu';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('InstructionsScreen')\r\nexport class InstructionsScreen extends Menu {\r\n    @property({type: Node})\r\n    public helpInstructions : Node = null;\r\n    @property({type: Node})\r\n    public autoMoveInstructions : Node = null;\r\n    @property({type: Node})\r\n    public waitingForUser : Node = null;\r\n    @property({type: Node})\r\n    public spinner : Node = null;\r\n\r\n    _isHelpInstructionDone: boolean = false;\r\n    _isAutoMoveInstructionDone: boolean = false;\r\n    protected onLoad(): void {\r\n        super.onLoad();\r\n        tween(this.spinner)\r\n            .repeatForever(\r\n                tween()\r\n                    .by(1, { angle: 360 })\r\n            )\r\n            .start();\r\n        // OnServerMessageEvent.on(GameOptionsBroadcastType, this.ServerGameOptionsReceived, this);\r\n    }\r\n\r\n    protected onDestroy(): void {\r\n        // OnServerMessageEvent.off(GameOptionsBroadcastType, this.ServerGameOptionsReceived, this);\r\n    }\r\n    // ServerGameOptionsReceived(gameOptions: IGameOptions) {\r\n    //     this._isHelpInstructionDone = !gameOptions.show_sheep_weight_instruction;\r\n    //     this._isAutoMoveInstructionDone = !gameOptions.show_sheep_auto_move_instruction;\r\n\r\n    //     if(!this._isHelpInstructionDone) {\r\n    //         this.helpInstructions.active = true;\r\n    //         this.autoMoveInstructions.active = false;\r\n    //         this.waitingForUser.active = false;\r\n    //     }\r\n    //     else if(!this._isAutoMoveInstructionDone) {\r\n    //         this.helpInstructions.active = false;\r\n    //         this.autoMoveInstructions.active = true;\r\n    //         this.waitingForUser.active = false;\r\n    //     }\r\n    //     else {\r\n    //         this.helpInstructions.active = false;\r\n    //         this.autoMoveInstructions.active = false;\r\n    //         this.waitingForUser.active = true;\r\n    //         GameManager.Instance.SendInstructionsDoneMessageToServer(true);\r\n    //     }\r\n    // }\r\n    public Open(): void {\r\n        super.Open();\r\n        this.initialization();\r\n    }\r\n    public Close(): void {\r\n        super.Close();\r\n    } \r\n    \r\n    \r\n    initialization() {\r\n        // if(GameManager.Instance.AreInstructionsDone) {\r\n        //     this.helpInstructions.active = false;\r\n        //     this.autoMoveInstructions.active = false;\r\n        //     this.waitingForUser.active = true;\r\n        // }\r\n    }\r\n    // onTap() {\r\n    //     console.log(\"Tapped\");\r\n    //     console.log(GameManager.Instance.AreInstructionsDone, this._isHelpInstructionDone)\r\n    //     if(GameManager.Instance.AreInstructionsDone) {\r\n    //         return;\r\n    //     }\r\n    //     else if(!this._isHelpInstructionDone) {\r\n    //         this._isHelpInstructionDone = true;\r\n    //         this.helpInstructions.active = false;\r\n    //         if(!this._isAutoMoveInstructionDone)\r\n    //             this.autoMoveInstructions.active = true;\r\n    //     }\r\n    //     else if(!this._isAutoMoveInstructionDone) {            \r\n    //         this.autoMoveInstructions.active = false;\r\n    //         this._isAutoMoveInstructionDone = true;\r\n    //         this.waitingForUser.active = true;\r\n    //     }\r\n    //     if(this._isHelpInstructionDone && this._isAutoMoveInstructionDone) {\r\n    //         GameManager.Instance.AreInstructionsDone = true;\r\n    //         GameManager.Instance.SendInstructionsDoneMessageToServer(true);\r\n    //         this.waitingForUser.active = true;\r\n    //     }\r\n    // }\r\n}\r\n\r\n","import { _decorator, Component, Label, Node, Tween, tween, Vec3 } from 'cc';\r\nimport { Menu } from './Menu';\r\nimport { UIManager } from './UIManager';\r\nimport { GameManager } from '../../scripts/GameManager';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('KickedOutScreen')\r\nexport class KickedOutScreen extends Menu {\r\n    @property({type: Label})\r\n    kickedOutLabel: Label = null;\r\n    protected onLoad(): void {\r\n        super.onLoad();\r\n    }\r\n\r\n    protected onDestroy(): void {\r\n    }\r\n    public Open(): void {\r\n        super.Open();\r\n        this.kickedOutLabel.string = \"You missed \" + GameManager.Instance._missTurnsToKickOut + \" turns. kicked out of the game!\";\r\n    }\r\n    public Close(): void {\r\n        super.Close();\r\n    } \r\n    public initHandTween() {\r\n\r\n    }\r\n\r\n    protected update(dt: number): void {\r\n        \r\n    }\r\n\r\n    \r\n}\r\n\r\n","import { _decorator, CCString, Component, Node } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('Menu')\r\nexport class Menu extends Component {\r\n    @property({type: Node})\r\n    content : Node = null;\r\n\r\n    @property({type: CCString})\r\n    public menuName : string;\r\n    public isOpened : boolean = false;\r\n    protected onLoad(): void {\r\n        this.content = this.node.getChildByName(\"Content\");\r\n    }\r\n    public Open() {\r\n        this.content.active = true;\r\n        this.isOpened = true;\r\n    }\r\n\r\n    public Close() {\r\n        this.content.active = false;\r\n        this.isOpened = false;\r\n    }\r\n\r\n    public initialize():void {\r\n        console.log(\"Menu initialize called\");\r\n    }\r\n}\r\n\r\n\r\n","import { WebViewTransport } from '../transport';\r\nimport { GameEvents, InternalGameSdkEvents } from '../events';\r\nimport { GameMessage, GameStartedPayload, GameEndedPayload, ScorePayload, VibratePresetPayload, VibratePatternPayload, VibratePreset, GameLoadedPayload, PlayAgainPayload, ChangeGamePayload} from '../types';\r\nimport { defaultConfig } from '../config/defaultConfig';\r\nimport { EventTarget } from 'cc';\r\n\r\nexport interface InitOptions {\r\n  gameId?: string;\r\n  debug?: boolean;\r\n  endpoint?: string;\r\n  retryAttempts?: number;\r\n  retryDelayMs?: number;\r\n}\r\n\r\nexport const HostChangeEvent = new EventTarget();\r\n\r\nexport class MiloGameSDK {\r\n  private transport = new WebViewTransport();\r\n  private config = { ...defaultConfig };\r\n  private hostId: string | null = null;\r\n\r\n  init(options?: InitOptions) {\r\n    if (options) {\r\n      // merge user options onto defaults\r\n      this.config = { ...this.config, ...options };\r\n    }\r\n    if (this.config.debug) {\r\n      console.log('[MiloGameSDK] initialized with', this.config);\r\n    }\r\n    // Inject global function for RN → Cocos\r\n    (window as any).updateHostId = (hostId: string) => {\r\n      console.log(\"Received hostId from React Native:\", hostId);\r\n      const oldHostId = this.hostId;\r\n      this.setHostId(hostId);\r\n      \r\n      // Emit host change event if host actually changed\r\n      if (oldHostId !== hostId) {\r\n        HostChangeEvent.emit(InternalGameSdkEvents.HOST_CHANGED, { oldHostId, newHostId: hostId });\r\n      }\r\n    };\r\n  }\r\n\r\n  /** Trigger a named vibration preset */\r\n  vibratePreset(preset: VibratePreset) {\r\n    const payload: VibratePresetPayload = { preset };\r\n    this.sendEvent(GameEvents.VibratePreset, payload);\r\n  }\r\n\r\n  /** Trigger a custom vibration pattern */\r\n  vibratePattern(pattern: number[]) {\r\n    const payload: VibratePatternPayload = { pattern };\r\n    this.sendEvent(GameEvents.VibratePattern, payload);\r\n  }\r\n\r\n  gameLoaded(payload: GameLoadedPayload) {\r\n    this.sendEvent(GameEvents.GameLoaded, payload);\r\n  }\r\n\r\n  gameStarted(payload: GameStartedPayload) {\r\n    this.sendEvent(GameEvents.GameStarted, payload);\r\n  }\r\n\r\n  gameEnded(payload: GameEndedPayload) {\r\n    this.sendEvent(GameEvents.GameEnded, payload);\r\n  }\r\n\r\n  sendScore(payload: ScorePayload) {\r\n    this.sendEvent(GameEvents.ScoreUpdate, payload);\r\n  }\r\n\r\n  playAgain(payload: PlayAgainPayload) {\r\n    this.sendEvent(GameEvents.PlayAgain, payload);\r\n  }\r\n\r\n  changeGame(payload: ChangeGamePayload) {\r\n    this.sendEvent(GameEvents.ChangeGame, payload);\r\n  }\r\n\r\n  private sendEvent<T>(event: string, data: T) {\r\n    const msg: GameMessage<T> = { event, data, ts: Date.now(), gameId: this.config.gameId };\r\n    this.transport.send(msg);\r\n  }\r\n\r\n  getHostId(){\r\n    return this.hostId;\r\n  }\r\n\r\n  setHostId(hostId: string) {\r\n    this.hostId = hostId;\r\n  }\r\n}\r\n","import { _decorator, Component, Node, UITransform, Vec3, Size, view, Enum } from 'cc';\r\nimport { Layout } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\n\r\nexport enum MiloLayoutType {\r\n    HORIZONTAL = 0,\r\n    VERTICAL = 1,\r\n    GRID = 2,\r\n}\r\n\r\nexport enum MiloLayoutAlign {\r\n    LEFT_TOP = 0,\r\n    CENTER_TOP = 1,\r\n    RIGHT_TOP = 2,\r\n    LEFT_CENTER = 3,\r\n    CENTER = 4,\r\n    RIGHT_CENTER = 5,\r\n    LEFT_BOTTOM = 6,\r\n    CENTER_BOTTOM = 7,\r\n    RIGHT_BOTTOM = 8,\r\n}\r\n\r\n@ccclass('MiloLayout')\r\nexport class MiloLayout extends Component {\r\n    @property({\r\n        type: Enum(MiloLayoutType)\r\n    })\r\n    private _layoutType: MiloLayoutType = MiloLayoutType.HORIZONTAL;\r\n\r\n    @property({\r\n        type: Enum(MiloLayoutType)\r\n    })\r\n    get layoutType(): MiloLayoutType {\r\n        return this._layoutType;\r\n    }\r\n\r\n    set layoutType(value: MiloLayoutType) {\r\n        this._layoutType = value;\r\n        this.updateLayout();\r\n    }\r\n\r\n    @property({\r\n        type: Enum(MiloLayoutAlign)\r\n    })\r\n    private _alignment: MiloLayoutAlign = MiloLayoutAlign.LEFT_TOP;\r\n\r\n    @property({\r\n        type: Enum(MiloLayoutAlign)\r\n    })\r\n    get alignment(): MiloLayoutAlign {\r\n        return this._alignment;\r\n    }\r\n\r\n    set alignment(value: MiloLayoutAlign) {\r\n        this._alignment = value;\r\n        this.updateLayout();\r\n    }\r\n\r\n    @property\r\n    private _spacingX: number = 10;\r\n\r\n    @property\r\n    get spacingX(): number {\r\n        return this._spacingX;\r\n    }\r\n\r\n    set spacingX(value: number) {\r\n        this._spacingX = value;\r\n        this.updateLayout();\r\n    }\r\n\r\n    @property\r\n    private _spacingY: number = 10;\r\n\r\n    @property\r\n    get spacingY(): number {\r\n        return this._spacingY;\r\n    }\r\n\r\n    set spacingY(value: number) {\r\n        this._spacingY = value;\r\n        this.updateLayout();\r\n    }\r\n\r\n    @property\r\n    private _columns: number = 3;\r\n\r\n    @property({\r\n        visible: function(this: MiloLayout) {\r\n            return this._layoutType === MiloLayoutType.GRID;\r\n        }\r\n    })\r\n    get columns(): number {\r\n        return this._columns;\r\n    }\r\n\r\n    set columns(value: number) {\r\n        this._columns = value;\r\n        this.updateLayout();\r\n    }\r\n\r\n    @property\r\n    private _padding: number = 0;\r\n\r\n    @property\r\n    get padding(): number {\r\n        return this._padding;\r\n    }\r\n\r\n    set padding(value: number) {\r\n        this._padding = value;\r\n        this.updateLayout();\r\n    }\r\n\r\n    @property\r\n    private _autoResize: boolean = false;\r\n\r\n    @property\r\n    get autoResize(): boolean {\r\n        return this._autoResize;\r\n    }\r\n\r\n    set autoResize(value: boolean) {\r\n        this._autoResize = value;\r\n        this.updateLayout();\r\n    }\r\n\r\n    private _activeChildCount: number = 0;\r\n    private _layoutSize: Size = new Size(0, 0);\r\n\r\n    onLoad() {\r\n        // Listen for child added/removed events\r\n        this.node.on(Node.EventType.CHILD_ADDED, this.onChildAdded, this);\r\n        this.node.on(Node.EventType.CHILD_REMOVED, this.onChildRemoved, this);\r\n    }\r\n\r\n    onDestroy() {\r\n        // Clean up all listeners\r\n        this.node.off(Node.EventType.CHILD_ADDED, this.onChildAdded, this);\r\n        this.node.off(Node.EventType.CHILD_REMOVED, this.onChildRemoved, this);\r\n        \r\n        // Remove listeners from all children\r\n        this.removeAllChildListeners();\r\n    }\r\n    \r\n    private onChildRemoved(child: Node) {\r\n        // Remove listeners from the child that was removed\r\n        this.removeChildListener(child);\r\n        // Update layout\r\n        this.updateLayout();\r\n    }\r\n    \r\n    private removeAllChildListeners() {\r\n        this.node.children.forEach(child => {\r\n            this.removeChildListener(child);\r\n        });\r\n    }\r\n    \r\n    private removeChildListener(child: Node) {\r\n        if (child['__miloLayoutActiveHandler']) {\r\n            child.off(Node.EventType.ACTIVE_IN_HIERARCHY_CHANGED, child['__miloLayoutActiveHandler']);\r\n            child['__miloLayoutActiveHandler'] = null;\r\n        }\r\n    }\r\n\r\n    start() {\r\n        // Initialize child active state tracking\r\n        this._lastChildActiveState = this.node.children.map(child => child.active);\r\n        \r\n        // Update layout\r\n        this.updateLayout();\r\n        \r\n        // Add active change listeners to all children\r\n        this.addChildActiveListeners();\r\n    }\r\n    \r\n    // Add active state change listeners to all children\r\n    private addChildActiveListeners() {\r\n        this.node.children.forEach(child => {\r\n            this.addChildActiveListener(child);\r\n        });\r\n    }\r\n    \r\n    // Add active state change listener to a single child\r\n    private addChildActiveListener(child: Node) {\r\n        // Remove existing listener first to prevent duplicates\r\n        child.off(Node.EventType.ACTIVE_IN_HIERARCHY_CHANGED, this.onChildActiveChanged, this);\r\n        \r\n        // Define a bound handler to preserve context\r\n        const handler = () => {\r\n            // Force update on next frame to ensure active state is fully processed\r\n            this.scheduleOnce(() => {\r\n                this.updateLayout();\r\n            }, 0);\r\n        };\r\n        \r\n        // Store the handler on the node to help with removal\r\n        child['__miloLayoutActiveHandler'] = handler;\r\n        \r\n        // Add new listener with the bound handler\r\n        child.on(Node.EventType.ACTIVE_IN_HIERARCHY_CHANGED, handler);\r\n    }\r\n    \r\n    private onChildActiveChanged(event: any) {\r\n        // This method is no longer used\r\n    }\r\n\r\n    onEnable() {\r\n        this.updateLayout();\r\n    }\r\n\r\n    getAlignmentOffset(totalSize: Size): Vec3 {\r\n        const offset = new Vec3();\r\n        const nodeSize = this.node.getComponent(UITransform)?.contentSize || new Size(0, 0);\r\n        \r\n        // Horizontal alignment\r\n        switch (this._alignment) {\r\n            case MiloLayoutAlign.LEFT_TOP:\r\n            case MiloLayoutAlign.LEFT_CENTER:\r\n            case MiloLayoutAlign.LEFT_BOTTOM:\r\n                offset.x = this._padding;\r\n                break;\r\n            case MiloLayoutAlign.CENTER_TOP:\r\n            case MiloLayoutAlign.CENTER:\r\n            case MiloLayoutAlign.CENTER_BOTTOM:\r\n                offset.x = (nodeSize.width - totalSize.width) / 2;\r\n                break;\r\n            case MiloLayoutAlign.RIGHT_TOP:\r\n            case MiloLayoutAlign.RIGHT_CENTER:\r\n            case MiloLayoutAlign.RIGHT_BOTTOM:\r\n                offset.x = nodeSize.width - totalSize.width - this._padding;\r\n                break;\r\n        }\r\n        \r\n        // Vertical alignment\r\n        switch (this._alignment) {\r\n            case MiloLayoutAlign.LEFT_TOP:\r\n            case MiloLayoutAlign.CENTER_TOP:\r\n            case MiloLayoutAlign.RIGHT_TOP:\r\n                offset.y = -this._padding;\r\n                break;\r\n            case MiloLayoutAlign.LEFT_CENTER:\r\n            case MiloLayoutAlign.CENTER:\r\n            case MiloLayoutAlign.RIGHT_CENTER:\r\n                offset.y = -(nodeSize.height - totalSize.height) / 2;\r\n                break;\r\n            case MiloLayoutAlign.LEFT_BOTTOM:\r\n            case MiloLayoutAlign.CENTER_BOTTOM:\r\n            case MiloLayoutAlign.RIGHT_BOTTOM:\r\n                offset.y = -nodeSize.height + totalSize.height + this._padding;\r\n                break;\r\n        }\r\n        \r\n        return offset;\r\n    }\r\n\r\n    updateLayout() {\r\n        if (!this.node) return;\r\n        \r\n        // Important: Only use active children for layout\r\n        const children = this.node.children.filter(child => child.active);\r\n        this._activeChildCount = children.length;\r\n        \r\n        if (this._activeChildCount === 0) return;\r\n        \r\n        switch (this._layoutType) {\r\n            case MiloLayoutType.HORIZONTAL:\r\n                this.updateHorizontalLayout(children);\r\n                break;\r\n            case MiloLayoutType.VERTICAL:\r\n                this.updateVerticalLayout(children);\r\n                break;\r\n            case MiloLayoutType.GRID:\r\n                this.updateGridLayout(children);\r\n                break;\r\n        }\r\n    }\r\n    \r\n    private updateHorizontalLayout(children: Node[]) {\r\n        let totalWidth = this._padding * 2;\r\n        let maxHeight = 0;\r\n        \r\n        // First pass: calculate total width and max height\r\n        children.forEach((child, index) => {\r\n            const childTransform = child.getComponent(UITransform);\r\n            if (!childTransform) return;\r\n            \r\n            totalWidth += childTransform.width;\r\n            if (index < children.length - 1) {\r\n                totalWidth += this._spacingX;\r\n            }\r\n            \r\n            maxHeight = Math.max(maxHeight, childTransform.height);\r\n        });\r\n        \r\n        const totalSize = new Size(totalWidth, maxHeight + this._padding * 2);\r\n        const startPos = this.getAlignmentOffset(totalSize);\r\n        \r\n        let currentX = startPos.x;\r\n        \r\n        // Second pass: position children\r\n        children.forEach((child) => {\r\n            const childTransform = child.getComponent(UITransform);\r\n            if (!childTransform) return;\r\n            \r\n            const childHeight = childTransform.height;\r\n            const childWidth = childTransform.width;\r\n            \r\n            let posY = startPos.y;\r\n            \r\n            // Vertical alignment for each child\r\n            switch (this._alignment) {\r\n                case MiloLayoutAlign.LEFT_TOP:\r\n                case MiloLayoutAlign.CENTER_TOP:\r\n                case MiloLayoutAlign.RIGHT_TOP:\r\n                    posY = startPos.y - this._padding;\r\n                    break;\r\n                case MiloLayoutAlign.LEFT_CENTER:\r\n                case MiloLayoutAlign.CENTER:\r\n                case MiloLayoutAlign.RIGHT_CENTER:\r\n                    posY = startPos.y - (maxHeight - childHeight) / 2;\r\n                    break;\r\n                case MiloLayoutAlign.LEFT_BOTTOM:\r\n                case MiloLayoutAlign.CENTER_BOTTOM:\r\n                case MiloLayoutAlign.RIGHT_BOTTOM:\r\n                    posY = startPos.y - maxHeight + childHeight;\r\n                    break;\r\n            }\r\n            \r\n            child.position = new Vec3(currentX + childWidth / 2, posY - childHeight / 2, 0);\r\n            currentX += childWidth + this._spacingX;\r\n        });\r\n        \r\n        this._layoutSize = totalSize;\r\n        \r\n        if (this._autoResize) {\r\n            const transform = this.node.getComponent(UITransform);\r\n            if (transform) {\r\n                transform.setContentSize(totalSize);\r\n            }\r\n        }\r\n    }\r\n    \r\n    private updateVerticalLayout(children: Node[]) {\r\n        let totalHeight = this._padding * 2;\r\n        let maxWidth = 0;\r\n        \r\n        // First pass: calculate total height and max width\r\n        children.forEach((child, index) => {\r\n            const childTransform = child.getComponent(UITransform);\r\n            if (!childTransform) return;\r\n            \r\n            totalHeight += childTransform.height;\r\n            if (index < children.length - 1) {\r\n                totalHeight += this._spacingY;\r\n            }\r\n            \r\n            maxWidth = Math.max(maxWidth, childTransform.width);\r\n        });\r\n        \r\n        const totalSize = new Size(maxWidth + this._padding * 2, totalHeight);\r\n        const startPos = this.getAlignmentOffset(totalSize);\r\n        \r\n        let currentY = startPos.y;\r\n        \r\n        // Second pass: position children\r\n        children.forEach((child) => {\r\n            const childTransform = child.getComponent(UITransform);\r\n            if (!childTransform) return;\r\n            \r\n            const childHeight = childTransform.height;\r\n            const childWidth = childTransform.width;\r\n            \r\n            let posX = startPos.x;\r\n            \r\n            // Horizontal alignment for each child\r\n            switch (this._alignment) {\r\n                case MiloLayoutAlign.LEFT_TOP:\r\n                case MiloLayoutAlign.LEFT_CENTER:\r\n                case MiloLayoutAlign.LEFT_BOTTOM:\r\n                    posX = startPos.x + this._padding;\r\n                    break;\r\n                case MiloLayoutAlign.CENTER_TOP:\r\n                case MiloLayoutAlign.CENTER:\r\n                case MiloLayoutAlign.CENTER_BOTTOM:\r\n                    posX = startPos.x + (maxWidth - childWidth) / 2 + this._padding;\r\n                    break;\r\n                case MiloLayoutAlign.RIGHT_TOP:\r\n                case MiloLayoutAlign.RIGHT_CENTER:\r\n                case MiloLayoutAlign.RIGHT_BOTTOM:\r\n                    posX = startPos.x + maxWidth - childWidth + this._padding;\r\n                    break;\r\n            }\r\n            \r\n            child.position = new Vec3(posX + childWidth / 2, currentY - childHeight / 2, 0);\r\n            currentY -= childHeight + this._spacingY;\r\n        });\r\n        \r\n        this._layoutSize = totalSize;\r\n        \r\n        if (this._autoResize) {\r\n            const transform = this.node.getComponent(UITransform);\r\n            if (transform) {\r\n                transform.setContentSize(totalSize);\r\n            }\r\n        }\r\n    }\r\n    \r\n    private updateGridLayout(children: Node[]) {\r\n        if (this._columns <= 0) return;\r\n        \r\n        const rows = Math.ceil(children.length / this._columns);\r\n        let maxCellWidth = 0;\r\n        let maxCellHeight = 0;\r\n        \r\n        // First pass: find maximum cell size\r\n        children.forEach((child) => {\r\n            const childTransform = child.getComponent(UITransform);\r\n            if (!childTransform) return;\r\n            \r\n            maxCellWidth = Math.max(maxCellWidth, childTransform.width);\r\n            maxCellHeight = Math.max(maxCellHeight, childTransform.height);\r\n        });\r\n        \r\n        const totalWidth = this._padding * 2 + maxCellWidth * this._columns + this._spacingX * (this._columns - 1);\r\n        const totalHeight = this._padding * 2 + maxCellHeight * rows + this._spacingY * (rows - 1);\r\n        \r\n        const totalSize = new Size(totalWidth, totalHeight);\r\n        const startPos = this.getAlignmentOffset(totalSize);\r\n        \r\n        // Second pass: position children\r\n        for (let row = 0; row < rows; row++) {\r\n            // Calculate how many items are in this row\r\n            const itemsInRow = Math.min(this._columns, children.length - row * this._columns);\r\n            \r\n            // Calculate row width based on items in this row\r\n            const rowWidth = itemsInRow * maxCellWidth + (itemsInRow - 1) * this._spacingX;\r\n            \r\n            // Calculate row offset based on alignment\r\n            let rowOffsetX = 0;\r\n            switch (this._alignment) {\r\n                case MiloLayoutAlign.CENTER_TOP:\r\n                case MiloLayoutAlign.CENTER:\r\n                case MiloLayoutAlign.CENTER_BOTTOM:\r\n                    // Center the row\r\n                    rowOffsetX = (this._columns * maxCellWidth + (this._columns - 1) * this._spacingX - rowWidth) / 2;\r\n                    break;\r\n                case MiloLayoutAlign.RIGHT_TOP:\r\n                case MiloLayoutAlign.RIGHT_CENTER:\r\n                case MiloLayoutAlign.RIGHT_BOTTOM:\r\n                    // Right align the row\r\n                    rowOffsetX = this._columns * maxCellWidth + (this._columns - 1) * this._spacingX - rowWidth;\r\n                    break;\r\n                default:\r\n                    // Left align (default) - offset is 0\r\n                    break;\r\n            }\r\n            \r\n            // Position children in this row\r\n            for (let col = 0; col < itemsInRow; col++) {\r\n                const index = row * this._columns + col;\r\n                if (index >= children.length) break;\r\n                \r\n                const child = children[index];\r\n                const childTransform = child.getComponent(UITransform);\r\n                if (!childTransform) continue;\r\n                \r\n                const childWidth = childTransform.width;\r\n                const childHeight = childTransform.height;\r\n                \r\n                // Calculate cell position based on column, row, and row offset\r\n                const cellX = startPos.x + this._padding + col * (maxCellWidth + this._spacingX) + rowOffsetX;\r\n                const cellY = startPos.y - this._padding - row * (maxCellHeight + this._spacingY);\r\n                \r\n                // Position within cell based on alignment (for individual item alignment within its cell)\r\n                let posX = cellX;\r\n                let posY = cellY;\r\n                \r\n                // Horizontal alignment within cell\r\n                switch (this._alignment) {\r\n                    case MiloLayoutAlign.LEFT_TOP:\r\n                    case MiloLayoutAlign.LEFT_CENTER:\r\n                    case MiloLayoutAlign.LEFT_BOTTOM:\r\n                        posX = cellX;\r\n                        break;\r\n                    case MiloLayoutAlign.CENTER_TOP:\r\n                    case MiloLayoutAlign.CENTER:\r\n                    case MiloLayoutAlign.CENTER_BOTTOM:\r\n                        posX = cellX + (maxCellWidth - childWidth) / 2;\r\n                        break;\r\n                    case MiloLayoutAlign.RIGHT_TOP:\r\n                    case MiloLayoutAlign.RIGHT_CENTER:\r\n                    case MiloLayoutAlign.RIGHT_BOTTOM:\r\n                        posX = cellX + maxCellWidth - childWidth;\r\n                        break;\r\n                }\r\n                \r\n                // Vertical alignment within cell\r\n                switch (this._alignment) {\r\n                    case MiloLayoutAlign.LEFT_TOP:\r\n                    case MiloLayoutAlign.CENTER_TOP:\r\n                    case MiloLayoutAlign.RIGHT_TOP:\r\n                        posY = cellY;\r\n                        break;\r\n                    case MiloLayoutAlign.LEFT_CENTER:\r\n                    case MiloLayoutAlign.CENTER:\r\n                    case MiloLayoutAlign.RIGHT_CENTER:\r\n                        posY = cellY - (maxCellHeight - childHeight) / 2;\r\n                        break;\r\n                    case MiloLayoutAlign.LEFT_BOTTOM:\r\n                    case MiloLayoutAlign.CENTER_BOTTOM:\r\n                    case MiloLayoutAlign.RIGHT_BOTTOM:\r\n                        posY = cellY - maxCellHeight + childHeight;\r\n                        break;\r\n                }\r\n                \r\n                child.position = new Vec3(posX + childWidth / 2, posY - childHeight / 2, 0);\r\n            }\r\n        }\r\n        \r\n        this._layoutSize = totalSize;\r\n        \r\n        if (this._autoResize) {\r\n            const transform = this.node.getComponent(UITransform);\r\n            if (transform) {\r\n                transform.setContentSize(totalSize);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Add a backup polling mechanism to check for changes\r\n    private _lastChildActiveState: boolean[] = [];\r\n    \r\n    update(deltaTime: number) {\r\n        // Create a backup polling mechanism for active state changes\r\n        // This ensures layout updates even if the events aren't firing properly\r\n        if (this.node && this.node.children.length > 0) {\r\n            const currentActiveState = this.node.children.map(child => child.active);\r\n            \r\n            // Check if active states have changed\r\n            let changed = false;\r\n            if (this._lastChildActiveState.length !== currentActiveState.length) {\r\n                changed = true;\r\n            } else {\r\n                for (let i = 0; i < currentActiveState.length; i++) {\r\n                    if (this._lastChildActiveState[i] !== currentActiveState[i]) {\r\n                        changed = true;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            \r\n            // Update layout if active states changed\r\n            if (changed) {\r\n                this._lastChildActiveState = currentActiveState;\r\n                this.updateLayout();\r\n            }\r\n        }\r\n    }\r\n        \r\n    private onChildAdded(child: Node) {\r\n        // Add active change listener to the new child\r\n        this.addChildActiveListener(child);\r\n        // Update layout\r\n        this.updateLayout();\r\n    }\r\n}\r\n\r\n\r\n","import { Sprite } from 'cc';\r\nimport { _decorator, Component, Node } from 'cc';\r\nimport { PlayerAssets } from './PlayerAssets';\r\nimport { UITransform } from 'cc';\r\nimport { Vec3 } from 'cc';\r\nimport { CameraManger } from '../pulse/pb-cocos-utils/CameraManger';\r\nconst { ccclass, property } = _decorator;\r\n\r\n\r\n@ccclass('MoveOptionsInput')\r\nexport class MoveOptionsInput extends Component {\r\n    @property({type: Sprite})\r\n    firstOutComeSprite : Sprite = null;\r\n    @property({type: Sprite})\r\n    secondOutComeSprite : Sprite = null;\r\n    @property({type: Sprite})\r\n    thirdOutComeSprite : Sprite = null;\r\n    outComeValues : number[] = [6, 6, 6];\r\n    @property({type: Node})\r\n    pointer : Node = null;\r\n    outComeClickedCallback : Function = null;\r\n    uiTransform : UITransform   = null;\r\n    @property({type: UITransform})\r\n    optionsUITransform : UITransform = null;\r\n    protected onLoad(): void {\r\n        this.uiTransform = this.node.getComponent(UITransform);\r\n    }\r\n\r\n    protected onEnable(): void {\r\n        this.firstOutComeSprite.node.on(Node.EventType.TOUCH_START, this.onFirstOutComeClick, this);\r\n        this.secondOutComeSprite.node.on(Node.EventType.TOUCH_START, this.onSecondOutComeClick, this);\r\n        this.thirdOutComeSprite.node.on(Node.EventType.TOUCH_START, this.onThirdOutComeClick, this);\r\n    }\r\n\r\n    protected onDisable(): void {\r\n        this.firstOutComeSprite.node.off(Node.EventType.TOUCH_START, this.onFirstOutComeClick, this);\r\n        this.secondOutComeSprite.node.off(Node.EventType.TOUCH_START, this.onSecondOutComeClick, this);\r\n        this.thirdOutComeSprite.node.on(Node.EventType.TOUCH_START, this.onThirdOutComeClick, this);\r\n    }\r\n\r\n    setOutComeSprites(outComeValues : number[]){\r\n        // this.secondOutComeValue = value;\r\n        this.outComeValues = outComeValues;\r\n\r\n        if(outComeValues.length >= 1)\r\n        this.firstOutComeSprite.spriteFrame = PlayerAssets.instance.getDiceOutComesStackSprite(this.outComeValues[0]);\r\n\r\n        if(outComeValues.length >= 2){\r\n            console.log(\"Setting Second OutCome\");\r\n            this.secondOutComeSprite.node.active = true;\r\n            this.secondOutComeSprite.spriteFrame = PlayerAssets.instance.getDiceOutComesStackSprite(this.outComeValues[1]);\r\n        }\r\n        else\r\n        {\r\n            this.secondOutComeSprite.node.active = false;\r\n        }\r\n        \r\n        \r\n        if(outComeValues.length >= 3){\r\n            console.log(\"Setting Third OutCome\");\r\n            this.thirdOutComeSprite.node.active = true;\r\n            this.thirdOutComeSprite.spriteFrame = PlayerAssets.instance.getDiceOutComesStackSprite(this.outComeValues[2]);\r\n        }\r\n        else{\r\n            this.thirdOutComeSprite.node.active = false;\r\n        }\r\n    }\r\n\r\n    private onFirstOutComeClick(){\r\n        // this.log('First Outcome Clicked');\r\n        if(this.outComeClickedCallback == null) return;\r\n        this.outComeClickedCallback(this.outComeValues[0]);\r\n    }\r\n\r\n    private onSecondOutComeClick(){\r\n        // this.log('Second Outcome Clicked');\r\n        if(this.outComeClickedCallback == null) return;\r\n        this.outComeClickedCallback(this.outComeValues[1]);\r\n    }\r\n\r\n    private onThirdOutComeClick(){\r\n        // this.log('Third Outcome Clicked');\r\n        if(this.outComeClickedCallback == null) return;\r\n        this.outComeClickedCallback(this.outComeValues[2]);\r\n    }\r\n\r\n    SetPosition(worldPosition : Vec3){\r\n        this.node.setWorldPosition(worldPosition);\r\n        let screenWidth = CameraManger.instance.getWidth();\r\n        let localOptionsPos = this.optionsUITransform.node.position;\r\n        localOptionsPos.set(0,7.5,0);\r\n        console.log(\"setting worldPosintion : \", worldPosition);\r\n        let myXleftBound = worldPosition.x - this.optionsUITransform.width * .5;\r\n        let myXRightBound = worldPosition.x + this.optionsUITransform.width * .5;\r\n\r\n        if(myXleftBound < 0){\r\n            console.log(\"My X Left Bound: \", myXleftBound, \"Screen Width: \", screenWidth);\r\n            localOptionsPos.add(new Vec3(this.optionsUITransform.width * .5 - 45,0,0));\r\n        }\r\n        else if(myXRightBound > screenWidth){\r\n            console.log(\"My X Right Bound: \", myXRightBound, \"Screen Width: \", screenWidth);\r\n            localOptionsPos.add(new Vec3(-this.optionsUITransform.width * .5 + 45,0,0));\r\n        }\r\n        this.optionsUITransform.node.setPosition(localOptionsPos);\r\n        \r\n    }\r\n\r\n}\r\n\r\n\r\n","import { Node } from \"cc\";\r\nimport { Player, PlayerState } from \"../Player\";\r\nimport {PlayerBaseState } from \"./PlayerBaseState\";\r\nimport { PlayerStateMachine } from \"./PlayerStateMachine\";\r\nimport { Piece } from \"../Piece\";\r\nimport { SNLRoomSettings } from \"../schema/SNLRoomSettings\";\r\nimport { GameMessageType } from \"../type/GameMessageType\";\r\nimport { Vec3 } from \"cc\";\r\nimport { PawnHandler } from \"../PawnHandler\";\r\nimport { UIManager } from \"../../UIPack/Scripts/UIManager\";\r\nimport { GameManager } from \"../GameManager\";\r\nimport { NetworkManager } from \"../../pulse/networking/NetworkManager\";\r\nexport class MovePieceState extends PlayerBaseState{\r\n    stateMachine: PlayerStateMachine;\r\n    _stateName : PlayerState = PlayerState.MOVING_PIECE;\r\n    player: Player;\r\n    moveOptionsOffset : Vec3 = new Vec3(0, 120, 0);\r\n    constructor(stateMachine: PlayerStateMachine) {\r\n        super();\r\n        this.stateMachine = stateMachine;\r\n        this.player = this.stateMachine.player;\r\n    }\r\n\r\n    enterState(): void {\r\n        console.log(\"Entered Moving Piece State\");\r\n        console.log(\"Rolls : \", this.player.outComesUIManager.getOutComes());\r\n        const currentPlayerData = this.stateMachine.currentServerState.playersData[this.player.playerNumber];\r\n        this.player.outComesUIManager.reset(currentPlayerData.rollsList);\r\n        this.player.diceRoot.active = true;\r\n        this.player.timer.stop();\r\n        this.player.timer.setTotalTime(this.stateMachine.currentServerState.gameOptions.movePiecesWaitTime);\r\n        this.player.timer.run();\r\n        this.player._pawnHandler.StartSelectAnimationsForValidMovePieces();\r\n        for(let i=0; i<this.player.pawns.length; i++) {\r\n            this.player.pawns[i].node.on(Node.EventType.TOUCH_START, this.OnPieceClick, this);\r\n        }\r\n    }\r\n    updateState(deltaTime: number): void {  \r\n    }\r\n    exitState(): void {\r\n        console.log(\"Exited Move Piece State local \", this.player._isLocal);\r\n        //Reset All Pawns::\r\n        this.player.diceRoot.active = false;\r\n        this.player.timer.stop();\r\n        this.player._pawnHandler.Reset(this.stateMachine.currentServerState);\r\n        for(let i=0; i<this.player.pawns.length; i++) {\r\n            this.player.pawns[i].node.off(Node.EventType.TOUCH_START, this.OnPieceClick, this);\r\n        }\r\n        // this.player.ReArrangeBasesAfterMoving();\r\n    }\r\n\r\n    getAllMovablePieces(): Piece[] {\r\n        var allMovablePieces = [];\r\n        var allOutComes = this.player.outComesUIManager.getOutComes();\r\n        for(let i=0; i<this.player.pawns.length; i++) {\r\n            var pieceValidOutComes = allOutComes.filter(outCome => this.canMovePiece(this.player.pawns[i].pathNumber, outCome));\r\n            pieceValidOutComes = Array.from(new Set(pieceValidOutComes));\r\n            if(pieceValidOutComes.length > 0) {\r\n                allMovablePieces.push(this.player.pawns[i]);\r\n            }\r\n        }\r\n        return allMovablePieces;\r\n    }\r\n    \r\n    OnPieceClick(event) {\r\n        if(!this.player._isLocal) return;\r\n        if(this.player._pawnHandler.isAnimating()){\r\n            this.player._moveOptioneInput.node.active = false;\r\n            return;\r\n        }\r\n        this.player._moveOptioneInput.node.active = false;\r\n        const piece: Piece = event.target.getComponent(Piece);\r\n        var allOutComes = this.player.outComesUIManager.getOutComes();\r\n        \r\n        var pieceValidOutComes = allOutComes.filter(outCome => this.canMovePiece(piece.pathNumber, outCome));\r\n        pieceValidOutComes = Array.from(new Set(pieceValidOutComes));\r\n        console.log(\"Piece Valid OutComes: \", pieceValidOutComes);\r\n        if(pieceValidOutComes.length == 0) return;\r\n        if(pieceValidOutComes.length == 1) {\r\n            this.sendMovePieceMessage(piece.pieceNumber, pieceValidOutComes[0]);\r\n        }\r\n        if(pieceValidOutComes.length >= 2){\r\n            //show moves ui input\r\n            this.player._moveOptioneInput.node.active = true;\r\n            this.player._moveOptioneInput.outComeClickedCallback = this.outComeClickedCallback.bind(this);\r\n            this.player._moveOptioneInput.setOutComeSprites(pieceValidOutComes);\r\n            this.player._currentSelectedPieceNumber = piece.pieceNumber;\r\n            this.player._moveOptioneInput.SetPosition(event.target.worldPosition.clone().add(this.moveOptionsOffset));\r\n            return;\r\n        }\r\n    }\r\n\r\n    onMovePiece() {\r\n        const json = JSON.parse(this.stateMachine.currentServerState.inputPayload.inputValue);\r\n        console.log(\"Move Piece From Server: \", json);\r\n        const pieceIndex = json.pieceIndex;\r\n        const rollValue = json.rollValue;\r\n        this.player.timer.stop();\r\n        this.player._moveOptioneInput.node.active = false;\r\n        this.player._pawnHandler.movePiece(pieceIndex, rollValue, true);\r\n    }\r\n\r\n    canMovePiece(piecePathNumber: number, diceNumber: number): boolean {\r\n        const gameOptions = this.player._gameOptions;\r\n        if(piecePathNumber == 0 && diceNumber != 6) \r\n            return false;\r\n        if(piecePathNumber + diceNumber > this.TotalPathCount(gameOptions))\r\n            return false;\r\n        return true;\r\n    }\r\n    TotalPathCount(gameOptions: SNLRoomSettings): number {\r\n        return gameOptions.boardTilesCount;\r\n    }\r\n    \r\n\r\n    sendMovePieceMessage(pieceIndex: number, rollValue: number) {\r\n        GameManager.Instance.setInput(\"MovePiece\");\r\n        NetworkManager.Instance.CurrentRoom.send(GameMessageType.MOVE_PIECE, JSON.stringify({\r\n            \"pieceIndex\": pieceIndex,\r\n            \"rollValue\" : rollValue,\r\n        }));\r\n        console.log(\"Move Piece Message Sent : \", \"piece \", pieceIndex, \"with roll value \", rollValue);\r\n    }\r\n\r\n    outComeClickedCallback(value : number){\r\n        // console.log(\"OUTCOME CLICKED: \", value);\r\n        this.sendMovePieceMessage(this.player._currentSelectedPieceNumber, value);\r\n        this.player._moveOptioneInput.node.active = false;\r\n        this.player._currentSelectedPieceNumber = -1;\r\n    }\r\n\r\n\r\n    reset(){\r\n        this.exitState();\r\n    }\r\n}","import { _decorator, Component, sys } from 'cc';\r\nimport { PBLogger } from '../pb-cocos-utils/PBLogger';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('NetworkConfig')\r\nexport class NetworkConfig extends Component {\r\n    @property({ tooltip: \"Server host address\" })\r\n    serverHost: string = \"localhost\";\r\n\r\n    @property({ tooltip: \"Server port number\" })\r\n    serverPort: number = 2567;\r\n\r\n    @property({ tooltip: \"Use SSL for connections\" })\r\n    useSSL: boolean = false;\r\n\r\n    @property({ tooltip: \"Player identifier\" })\r\n    userId: string = \"\";\r\n\r\n    @property({ tooltip: \"Room identifier\" })\r\n    roomId: string = \"testroom1\";\r\n\r\n    @property({ tooltip: \"Name of the game\" })\r\n    gameName: string = \"Pictionary\";\r\n\r\n    @property({ tooltip: \"Whether the data was assigned from query parameters\" })\r\n    assignedFromQueryParams: boolean = false;\r\n\r\n    /**\r\n     * Parse URL query parameters to override network configuration\r\n     */\r\n    public parseQueryParams(): void {\r\n        PBLogger.debug(\"parseQueryParams\");\r\n        if (!sys.isBrowser) {\r\n            return; // Skip if not running in browser\r\n        }\r\n\r\n        const queryParams = new URLSearchParams(window.location.search);\r\n        PBLogger.debug(\"queryParams\", queryParams);\r\n        this.updateConfigFromQueryParam(queryParams, 'userId', (value) => {\r\n            PBLogger.debug(\"userId\", value);\r\n            this.userId = value;\r\n            this.assignedFromQueryParams = true;\r\n        });\r\n        \r\n        this.updateConfigFromQueryParam(queryParams, 'roomId', (value) => {\r\n            PBLogger.debug(\"roomId\", value);\r\n            this.roomId = value;\r\n        });\r\n        \r\n        this.updateConfigFromQueryParam(queryParams, 'apiUrl', (value) => {\r\n            this.serverHost = value;\r\n        });\r\n        \r\n        this.updateConfigFromQueryParam(queryParams, 'apiPort', (value) => {\r\n            const parsedPort = parseInt(value);\r\n            if (!isNaN(parsedPort)) {\r\n                this.serverPort = parsedPort;\r\n            }\r\n        });\r\n        \r\n        this.updateConfigFromQueryParam(queryParams, 'useSSL', (value) => {\r\n            this.useSSL = value === \"true\";\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Helper method to update config from query parameters\r\n     */\r\n    private updateConfigFromQueryParam(\r\n        params: URLSearchParams, \r\n        paramName: string, \r\n        updateFn: (value: string) => void\r\n    ): void {\r\n        const value = params.get(paramName);\r\n        if (value !== null && value !== undefined) {\r\n            updateFn(value);\r\n        }\r\n    }\r\n}","import { _decorator, Component, EventTarget, CCBoolean } from 'cc';\r\nimport Colyseus from 'db://colyseus-sdk/colyseus.js';\r\nimport { ServerMessageType } from '../types/NetworkTypes';\r\nimport { PlayerType } from '../types/PlayerTypes';\r\nimport { PbSaveSystem } from '../pb-cocos-utils/PbSaveSystem';\r\nimport { NetworkConfig } from './NetworkConfig';\r\nimport { NetworkEvents, ConnectionState } from '../types/NetworkTypes';\r\nimport { BasePlayerData } from '../schema/BasePlayerData';\r\nimport { PBLogger } from '../pb-cocos-utils/PBLogger';\r\nimport { BaseRoomState } from '../schema/BaseRoomState';\r\nimport { BaseRoomSettings } from '../schema/BaseRoomSettings';\r\nconst { ccclass, property } = _decorator;\r\n\r\n//  Data structure for storing reconnection information\r\ninterface ReconnectionData {\r\n    roomId: string;\r\n    reconnectionToken: string;\r\n}\r\n\r\n//  Default reconnection data used as fallback\r\nconst DEFAULT_RECONNECTION_DATA: ReconnectionData = {\r\n    roomId: 'testroom1',\r\n    reconnectionToken: 'eyJ',\r\n};\r\n\r\n// Event emitters for network-related events\r\nexport const ConnectionStateChangeEvent = new EventTarget();\r\nexport const ServerRoomStateChangeEvent = new EventTarget();\r\nexport const ServerMessageEvent = new EventTarget();\r\n\r\n//  NetworkManager handles all network communication with the Colyseus server\r\n//  including connection, reconnection, and message handling.\r\n@ccclass('NetworkManager')\r\nexport class NetworkManager extends Component {\r\n    @property({ type: CCBoolean, tooltip: 'Enable development mode for additional logging' })\r\n    public isDevMode: boolean;\r\n\r\n    private static _instance: NetworkManager | null = null;\r\n\r\n    @property({ type: NetworkConfig, tooltip: 'Network configuration settings' })\r\n    private networkConfig: NetworkConfig = null!;\r\n\r\n    private _client!: Colyseus.Client;\r\n    private _room!: Colyseus.Room;\r\n    private _currentConnectionState: ConnectionState = ConnectionState.INITIALIZING;\r\n    private _reconnectionData: ReconnectionData = { ...DEFAULT_RECONNECTION_DATA };\r\n    \r\n    //  Singleton instance accessor\r\n    //  @throws Error if instance is not initialized\r\n    public static get Instance(): NetworkManager {\r\n        if (!this._instance) {\r\n            throw new Error('NetworkManager instance is not initialized.');\r\n        }\r\n        return this._instance;\r\n    }\r\n\r\n    //  Get the current Colyseus room\r\n    public get CurrentRoom(): Colyseus.Room {\r\n        return this._room;\r\n    }\r\n\r\n    //  Get the current connection state\r\n    public get CurrentConnectionState(): ConnectionState {\r\n        return this._currentConnectionState;\r\n    }\r\n\r\n    //  Initialize the NetworkManager when the component loads\r\n    protected onLoad(): void {\r\n        if (NetworkManager._instance) {\r\n            this.log('NetworkManager instance already exists. Destroying duplicate.');\r\n            this.node.destroy();\r\n            return;\r\n        }\r\n        \r\n        NetworkManager._instance = this;\r\n        this.networkConfig.parseQueryParams();\r\n        if(!this.isDevMode) {\r\n            PBLogger.setProductionMode(true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Initialize the client when the component starts\r\n     */\r\n    start(): void {\r\n        this.initializeClient();\r\n        PBLogger.info(\"============ Initializing client =========\");\r\n        if(this.networkConfig.assignedFromQueryParams) {\r\n            PBLogger.info(\"============ Connecting to room =========\");\r\n            this.connect(this.networkConfig.roomId, this.networkConfig.userId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Initialize the Colyseus client with the configured server details\r\n     */\r\n    private initializeClient(): void {\r\n        const protocol = this.networkConfig.useSSL ? 'wss' : 'ws';\r\n        let endpoint = \"\";\r\n        if(this.networkConfig.serverPort==0) {\r\n            endpoint = `${protocol}://${this.networkConfig.serverHost}`;\r\n        } else {\r\n            endpoint = `${protocol}://${this.networkConfig.serverHost}:${this.networkConfig.serverPort}`;\r\n        }\r\n        \r\n        this.log(`Initializing client with endpoint: ${endpoint}`);\r\n        this._client = new Colyseus.Client(endpoint);\r\n    }\r\n\r\n    /**\r\n     * Check if we should attempt to rejoin a previous room\r\n     */\r\n    private shouldRejoin(): boolean {\r\n        if(this.isDevMode) {\r\n            return false;\r\n        }\r\n        this._reconnectionData = PbSaveSystem.LoadData(this.networkConfig.gameName);\r\n        if (!this._reconnectionData || !this._reconnectionData.roomId || !this._reconnectionData.reconnectionToken) {\r\n            return false;\r\n        }\r\n        return this._reconnectionData.roomId === this.networkConfig.roomId;\r\n    }\r\n\r\n    /**\r\n     * Connect to an existing room\r\n     * @param roomId - The ID of the room to join\r\n     * @param playerName - The name of the player\r\n     * @throws Error if connection fails\r\n     */\r\n    async connect(roomId: string, playerName: string): Promise<void> {\r\n        PBLogger.info(\"============ Connecting to room from connect function =========\");\r\n        this.updateConnectionState(ConnectionState.CONNECTING);\r\n\r\n        if(this.shouldRejoin()) {\r\n            this.log('Rejoining room', roomId);\r\n            await this.rejoin();\r\n            return;\r\n        }\r\n        \r\n        try {\r\n            const playerData = this.createPlayerData(playerName);\r\n            this.log(\"Joining with options \", { player: playerData });\r\n            \r\n            this._room = await this._client.joinById(roomId, {\r\n                player: playerData\r\n            });\r\n            \r\n            this.initAfterJoin(roomId);\r\n        } catch (error) {\r\n            this.handleConnectionError(error);\r\n            throw error;\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Initialize room after successful join\r\n     * @param roomId - The ID of the joined room\r\n     */\r\n    private initAfterJoin(roomId: string): void {\r\n        this.updateConnectionState(ConnectionState.JOINED_ROOM);\r\n        this.log(`Joined room ${roomId} with sessionId: ${this._room.sessionId}`);\r\n        this.initializeRoomCallbacks();\r\n        this.saveReconnectionData();\r\n    }\r\n    \r\n    /**\r\n     * Create and join a new room\r\n     * @param roomId - The ID for the new room\r\n     * @param playerName - The name of the player\r\n     */\r\n    async createAndJoinRoom(roomId: string, playerName: string): Promise<void> {\r\n        this.log('Creating room', roomId);\r\n        this.updateConnectionState(ConnectionState.CONNECTING);\r\n        \r\n        try {\r\n            const playerData = this.createPlayerData(playerName);\r\n            \r\n            this._room = await this._client.create(\"PictionaryRoom\", { \r\n                roomId: roomId, \r\n                player: playerData,\r\n                roomSettings: {\r\n                    maxClients: 10,\r\n                }\r\n            });\r\n            \r\n            this.initAfterJoin(roomId);\r\n        } catch (error) {\r\n            this.handleConnectionError(error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create player data object\r\n     * @param playerName - The name of the player\r\n     */\r\n    private createPlayerData(playerName: string): Partial<BasePlayerData> {\r\n        return {\r\n            userId: playerName,\r\n            name: playerName,\r\n            avatar: \"randomProfilePicture\",\r\n            type: PlayerType.HUMAN,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Initialize callbacks for room events\r\n     */\r\n    private initializeRoomCallbacks(): void {\r\n        console.log(\"============ Initializing room callbacks =========\");\r\n        if (!this._room) {\r\n            this.log('Cannot initialize callbacks: Room is not defined');\r\n            return;\r\n        }\r\n\r\n        this._room.onStateChange((state) => {\r\n            ServerRoomStateChangeEvent.emit(NetworkEvents.SERVER_ROOM_STATE_CHANGE, state);\r\n        });\r\n\r\n        this._room.onLeave((code) => {\r\n            if (code === 4001) {\r\n                this.updateConnectionState(ConnectionState.KICKED_OUT);\r\n            } else {\r\n                this.updateConnectionState(ConnectionState.DISCONNECTED);\r\n            }\r\n        });\r\n\r\n        this._room.onMessage(ServerMessageType.KICKED_OUT, () => {\r\n            this.updateConnectionState(ConnectionState.KICKED_OUT);\r\n        });\r\n        \r\n        this._room.onMessage(\"*\", (type, message) => {\r\n            ServerMessageEvent.emit(NetworkEvents.SERVER_MESSAGE, type, message);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Update the connection state and emit change event\r\n     * @param nextState - The new connection state\r\n     */\r\n    private updateConnectionState(nextState: ConnectionState): void {\r\n        if (this._currentConnectionState === nextState) return;\r\n        \r\n        const previousState = this._currentConnectionState;\r\n        this._currentConnectionState = nextState;\r\n        \r\n        this.log(`Connection state changed: ${ConnectionState[previousState]} -> ${ConnectionState[nextState]}`);\r\n        ConnectionStateChangeEvent.emit(NetworkEvents.CONNECTION_STATE_CHANGE, previousState, nextState);\r\n    }\r\n\r\n    /**\r\n     * Attempt to reconnect to the room\r\n     * @param attempt - Current attempt number\r\n     * @param maxAttempts - Maximum number of attempts\r\n     * @param interval - Delay between attempts in milliseconds\r\n     */\r\n    public async reconnect(attempt: number = 1, maxAttempts: number = 10, interval: number = 2000): Promise<void> {\r\n        if (this._currentConnectionState !== ConnectionState.DISCONNECTED && \r\n            this._currentConnectionState !== ConnectionState.RECONNECTING) {\r\n            this.log(`Cannot reconnect: Current state is ${ConnectionState[this._currentConnectionState]}`);\r\n            return;\r\n        }\r\n\r\n        // Get max attempts from room settings if available\r\n        if (this._room && this._room.state) {\r\n            const baseRoomState: BaseRoomState<BaseRoomSettings, BasePlayerData> = this._room.state;\r\n            if (baseRoomState.roomSettings && baseRoomState.roomSettings.maxReconnectionAttempts) {\r\n                maxAttempts = baseRoomState.roomSettings.maxReconnectionAttempts;\r\n            }\r\n        }\r\n\r\n        this.updateConnectionState(ConnectionState.RECONNECTING);\r\n        this.log(`Reconnect attempt ${attempt}/${maxAttempts}`);\r\n\r\n        try {\r\n            await this.delay(interval);\r\n            \r\n            if (!this._room || !this._room.reconnectionToken) {\r\n                throw new Error('Reconnection token not available');\r\n            }\r\n            \r\n            const reconnectedRoom = await this._client.reconnect(this._room.reconnectionToken);\r\n            this._room = reconnectedRoom;\r\n            \r\n            this.saveReconnectionData();\r\n            this.initializeRoomCallbacks();\r\n            this.updateConnectionState(ConnectionState.JOINED_ROOM);\r\n            \r\n            this.log('Reconnected successfully.');\r\n        } catch (error) {\r\n            this.handleReconnectionError(error, attempt, maxAttempts, interval);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Attempt to rejoin a room using stored reconnection data\r\n     * @param attempt - Current attempt number\r\n     * @param maxAttempts - Maximum number of attempts\r\n     * @param interval - Delay between attempts in milliseconds\r\n     */\r\n    private async rejoin(attempt: number = 1, maxAttempts: number = 10, interval: number = 2000): Promise<void> {\r\n        this.log(`Rejoin attempt ${attempt}/${maxAttempts}`);\r\n        \r\n        try {\r\n            await this.delay(interval);\r\n            \r\n            if (!this._reconnectionData || !this._reconnectionData.reconnectionToken) {\r\n                throw new Error('Reconnection data not available');\r\n            }\r\n            \r\n            // Format the reconnection token correctly as \"roomId:reconnectionToken\"\r\n            const formattedToken = `${this._reconnectionData.roomId}:${this._reconnectionData.reconnectionToken}`;\r\n            PBLogger.info(\"Using formatted reconnection token: \", formattedToken);\r\n            \r\n            const reconnectedRoom = await this._client.reconnect(formattedToken);\r\n            this._room = reconnectedRoom;\r\n            \r\n            this.saveReconnectionData();\r\n            this.initializeRoomCallbacks();\r\n            this.updateConnectionState(ConnectionState.JOINED_ROOM);\r\n            \r\n            this.log('Rejoined successfully.');\r\n        } catch (error) {\r\n            this.handleReconnectionError(error, attempt, maxAttempts, interval, 'reJoin');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create a delay using a promise\r\n     * @param ms - Milliseconds to delay\r\n     */\r\n    private async delay(ms: number): Promise<void> {\r\n        return new Promise(resolve => setTimeout(resolve, ms));\r\n    }\r\n\r\n    /**\r\n     * Handle connection errors\r\n     * @param error - The error that occurred\r\n     */\r\n    private handleConnectionError(error: unknown): void {\r\n        const errorMessage = (error as Error)?.message || 'Unknown error';\r\n        this.log('Error connecting to room:', errorMessage);\r\n        this.updateConnectionState(ConnectionState.DISCONNECTED);\r\n    }\r\n\r\n    /**\r\n     * Handle reconnection errors and retry if appropriate\r\n     * @param error - The error that occurred\r\n     * @param attempt - Current attempt number\r\n     * @param maxAttempts - Maximum number of attempts\r\n     * @param interval - Delay between attempts in milliseconds\r\n     * @param method - The reconnection method being used\r\n     */\r\n    private handleReconnectionError(\r\n        error: unknown, \r\n        attempt: number, \r\n        maxAttempts: number, \r\n        interval: number, \r\n        method: 'reconnect' | 'reJoin' = 'reconnect'\r\n    ): void {\r\n        const errorMessage = (error as Error)?.message || 'Unknown error';\r\n        this.log(`${method} attempt ${attempt} failed:`, errorMessage);\r\n        \r\n        if (attempt < maxAttempts || maxAttempts === -1) {\r\n            if (method === 'reconnect') {\r\n                this.reconnect(attempt + 1, maxAttempts, interval);\r\n            } else {\r\n                this.rejoin(attempt + 1, maxAttempts, interval);\r\n            }\r\n        } else {\r\n            this.log('Max reconnection attempts reached. Please check your network or contact support.');\r\n            this.updateConnectionState(ConnectionState.NOT_FOUND);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Save reconnection data for future use\r\n     */\r\n    private saveReconnectionData(): void {\r\n        PBLogger.info(\"============ Saving reconnection data =========\");\r\n        if (!this._room || !this._room.reconnectionToken) {\r\n            this.log('Cannot save reconnection data: Room or reconnection token not available');\r\n            return;\r\n        }\r\n        \r\n        // Extract just the token part if it contains roomId:token format\r\n        let tokenToSave = this._room.reconnectionToken;\r\n        if (tokenToSave.includes(':')) {\r\n            tokenToSave = tokenToSave.split(':')[1];\r\n        }\r\n        \r\n        PBLogger.info(\"saving Reconnection token: \", tokenToSave);\r\n        \r\n        this._reconnectionData = {\r\n            roomId: this.networkConfig.roomId,\r\n            reconnectionToken: tokenToSave,\r\n        };\r\n        \r\n        PbSaveSystem.SaveData(this.networkConfig.gameName, this._reconnectionData);\r\n        PBLogger.info('Reconnection data saved');\r\n    }\r\n\r\n    /**\r\n     * Leave the current room\r\n     */\r\n    public leaveRoom(): void {\r\n        if (!this._room) {\r\n            this.log('Cannot leave room: Room is not defined');\r\n            return;\r\n        }\r\n        \r\n        this.log('Leaving room');\r\n        this._room.leave(true)\r\n            .then(() => this.log('Left room successfully'))\r\n            .catch(error => this.log('Error leaving room:', error?.message || 'Unknown error'));\r\n    }\r\n\r\n    public getMySessionId(): string {\r\n        return this._room.sessionId;\r\n    }\r\n\r\n    /**\r\n     * Send a message to the server\r\n     * @param type - The type of message\r\n     * @param message - The message data\r\n     */\r\n    public sendMessage(type: string, message: unknown): void {\r\n        if (!this._room) {\r\n            this.log('Cannot send message: Room is not defined');\r\n            return;\r\n        }\r\n        \r\n        if (this.isDevMode) {\r\n            this.log('Sending message:', type, message);\r\n        }\r\n        \r\n        this._room.send(type, message);\r\n    }\r\n\r\n    /**\r\n     * Log a message with optional data\r\n     * @param message - The message to log\r\n     * @param data - Optional data to log\r\n     */\r\n    public log(message: string, ...data: unknown[]): void {\r\n        if (this.isDevMode) {\r\n            if (data.length > 0) {\r\n                PBLogger.info(`[NetworkManager] ${message}`, ...data);\r\n            } else {\r\n                PBLogger.info(`[NetworkManager] ${message}`);\r\n            }\r\n        }\r\n    }\r\n}","export enum NetworkEvents {\r\n    SERVER_ROOM_STATE_CHANGE,\r\n    CONNECTION_STATE_CHANGE,\r\n    ROOM_STATUS_CHANGE,\r\n    SERVER_MESSAGE,\r\n};\r\n\r\nexport enum ConnectionState {\r\n    INITIALIZING,\r\n    CONNECTING,\r\n    CONNECTED,\r\n    LOBBY,\r\n    JOINED_ROOM,\r\n    DISCONNECTED,\r\n    RECONNECTING,\r\n    KICKED_OUT,\r\n    NOT_FOUND,\r\n    NO_INTERNET,\r\n}\r\n\r\nexport enum ServerMessageType {\r\n    NONE = \"none\",\r\n    KICKED_OUT = \"kicked_out\",\r\n    PLAYER_CAMEBACK = \"player_cameback\",\r\n    PLAYER_JOINED = \"player_joined\",\r\n}","import { instantiate } from 'cc';\r\nimport { Sprite } from 'cc';\r\nimport { Prefab } from 'cc';\r\nimport { _decorator, Component, Node } from 'cc';\r\nimport { PlayerAssets } from './PlayerAssets';\r\nimport { Player } from './Player';\r\nimport { PBLogger } from '../pulse/pb-cocos-utils/PBLogger';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('OutComesUIManager')\r\nexport class OutComesUIManager extends Component {\r\n    @property({type: Prefab})\r\n    outComesPrefab: Prefab = null;\r\n    @property({type: Sprite})\r\n    outcomesUiBgSprite: Sprite = null;\r\n    currentOutComesUI : Node[] = [];\r\n    currentOutComesValues : number[] = [];\r\n    goldenDiceOutcomes : number = 0;\r\n    player : Player = null;\r\n\r\n    setGoldenDiceOutcomes(value: number){\r\n        this.goldenDiceOutcomes = value;\r\n    }\r\n\r\n    addOutCome(value: number){\r\n        // console.warn(\"Adding OutCome : \", value);\r\n        let outComeUI = instantiate(this.outComesPrefab);\r\n        outComeUI.setParent(this.node);\r\n        outComeUI.getComponent(Sprite).spriteFrame = PlayerAssets.instance.getDiceOutComesStackSprite(value);\r\n        if(this.currentOutComesUI.length < this.goldenDiceOutcomes && value == 6){\r\n            outComeUI.getComponent(Sprite).spriteFrame = PlayerAssets.instance.getGoldenDiceOutComeSprite();\r\n        }\r\n        this.currentOutComesUI.push(outComeUI);\r\n        this.currentOutComesValues.push(value);\r\n        this.onOutComesChanged();\r\n    }\r\n\r\n    removeOutCome(value : number){\r\n        let index = this.currentOutComesValues.indexOf(value);\r\n        if(index != -1){\r\n            this.currentOutComesUI[index].destroy();\r\n            this.currentOutComesUI.splice(index, 1);\r\n            this.currentOutComesValues.splice(index, 1);\r\n        }\r\n        this.onOutComesChanged();\r\n    }\r\n\r\n    clearAllOutComes(){\r\n        // console.warn(\"Clearing All OutComes\");\r\n        this.currentOutComesUI.forEach(outComeUI => {\r\n            outComeUI.destroy();\r\n        });\r\n        this.currentOutComesUI = [];\r\n        this.currentOutComesValues = [];\r\n        this.onOutComesChanged();\r\n    }\r\n\r\n    getOutComes(){\r\n        return this.currentOutComesValues;\r\n    }\r\n\r\n    onOutComesChanged(){\r\n        // if(!this.player) return;\r\n        // PBLogger.info(\"parent object name : \", this.node.parent.name);\r\n        if(this.currentOutComesValues.length <= 0){\r\n            this.player.enableName(true);\r\n        }\r\n        else{\r\n            this.player.enableName(false);\r\n        }\r\n    }\r\n\r\n    reset(rollsList : number[]){\r\n        this.clearAllOutComes();\r\n        for(let i=0; i<rollsList.length; i++) {\r\n            this.addOutCome(rollsList[i]);\r\n        }\r\n        // console.warn(\"all out comes \", this.getOutComes());\r\n    }\r\n\r\n    setPlayer(player : Player){\r\n        // console.warn(\"Setting Player : \", player);\r\n        this.player = player;\r\n    }\r\n\r\n    enableOutComesBg(isActive : boolean){\r\n        this.outcomesUiBgSprite.enabled = isActive;\r\n    }\r\n\r\n}\r\n\r\n\r\n","import { Tween, Node, tween, Vec3, math, Color, instantiate, Prefab } from \"cc\";\r\nimport { Piece } from \"./Piece\";\r\nimport { SNLRoomState } from \"./schema/SNLRoomState\";\r\nimport { Board } from \"./Board\";\r\nimport { SNLTileType } from \"./type/SNLTileType\";\r\nimport { GameMessageType } from \"./type/GameMessageType\";\r\nimport { NetworkManager } from \"../pulse/networking/NetworkManager\";\r\nimport { PowerUp } from \"./PowerUp\";\r\nimport { AudioManager } from \"./AudioManager\";\r\nimport { Player } from \"./Player\";\r\nimport { SNLGameHandler } from \"./SNLGameHandler\";\r\nimport { AnimationTag } from \"./type/AnimationTag\";\r\nimport { AnimationPoints } from \"./AnimationPoints\";\r\nimport { GetEndTile, LadderPreset, LadderPresets, SnakePreset, SnakePresets } from \"./Config/BoardData\";\r\nimport { Snake } from \"./Board\";\r\nimport { UIManager } from \"../UIPack/Scripts/UIManager\";\r\nimport { SNLSnakeData } from './schema/SNLBoard';\r\nimport { PlayerAssets } from './PlayerAssets';\r\nimport { DeathPopup } from './DeathPopup';\r\nimport { DeathType } from \"./type/DeathType\";\r\nimport { PlayerService } from \"./PlayerService\";\r\n\r\nconst enum PawnHandlerState {\r\n    IDLE,\r\n    MOVING,\r\n}\r\nexport class PawnHandler {\r\n    player : Player;\r\n    pawns: Piece[];\r\n    state = PawnHandlerState.IDLE;\r\n    moveDataQueue = [];\r\n    pawnAnimation : Tween<Node> = null;\r\n    currentHandlingPieceIndex = -1;\r\n    currentHandlingMoveData = null;\r\n    // currentRunningAnimations : Tween<Node>[] = [];\r\n    pieceAnimationsTag = AnimationTag.PIECE_MOVE;\r\n    hasKilledInThisMove = false;\r\n    constructor(pawns: Piece[], player : Player) {\r\n        this.pawns = pawns;\r\n        this.player = player;\r\n    }\r\n\r\n    setState(state: PawnHandlerState) {\r\n        this.state = state;\r\n    }\r\n\r\n    onPawnMoveAnimationComplete() {\r\n        Board.Instance.updateAllPiecePositions();\r\n        // this.handleData();\r\n    }\r\n\r\n    handleData() {\r\n        this.hasKilledInThisMove = false;\r\n        if(this.moveDataQueue.length == 0){\r\n            if(this.state == PawnHandlerState.MOVING) {\r\n                this.setState(PawnHandlerState.IDLE);\r\n                this.StartSelectAnimationsForValidMovePieces();\r\n            }\r\n            return;\r\n        }\r\n        this.StopPieceSelectAnimations();\r\n        const data = this.moveDataQueue.shift();\r\n        this.setState(PawnHandlerState.MOVING);\r\n        this.player.outComesUIManager.removeOutCome(data.rollValue);\r\n        this.currentHandlingPieceIndex = data.pieceIndex;\r\n        this.currentHandlingMoveData = data;\r\n        console.log(\"Handling Move Data: \", \"piece \", data.pieceIndex, \"with roll value \", data.rollValue);\r\n        this.pawnAnimation = this.pawns[data.pieceIndex].move(data.rollValue, this.onPieceLandedOnTargetTile.bind(this));\r\n        this.pawnAnimation.tag(this.pieceAnimationsTag);\r\n        this.pawnAnimation.start();\r\n    }\r\n\r\n    onPieceLandedOnTargetTile(){\r\n        console.log(\"Moved Piece to Target Tile: \", this.pawns[this.currentHandlingPieceIndex].pathNumber);\r\n        let killAnimation = this.killOpponentPieces(this.pawns[this.currentHandlingPieceIndex]);\r\n        if(killAnimation != null) {\r\n            \r\n            killAnimation.call(() => {\r\n                this.onPieceLandedOnTargetTile();\r\n            });\r\n            killAnimation.start();\r\n            return;\r\n        }\r\n\r\n        \r\n        let PowerupAnimation = this.handlePowerUps(this.pawns[this.currentHandlingPieceIndex]);\r\n        if(PowerupAnimation != null) {\r\n            AudioManager.instance.playSound(\"Power\");\r\n            PowerupAnimation.start();\r\n            return;\r\n        }\r\n        let SnakeAnimation = this.handleSnake(this.pawns[this.currentHandlingPieceIndex]);\r\n        if(SnakeAnimation != null) {\r\n            SnakeAnimation.start();\r\n            return;\r\n        }\r\n        let LadderAnimation = this.handleLadder(this.pawns[this.currentHandlingPieceIndex]);\r\n        if(LadderAnimation != null) {\r\n            LadderAnimation.start();\r\n            return;\r\n        }\r\n        this.sendMoveAck();\r\n        this.onPawnMoveAnimationComplete();\r\n    }\r\n\r\n    handlePowerUps(piece: Piece): Tween<Node> | null {\r\n        const landedPowerupType: SNLTileType = Board.Instance.getPowerUpType(piece);\r\n    \r\n        switch (landedPowerupType) {\r\n            case SNLTileType.ROCKET:\r\n                console.log(\"[PawnHandler] Landed on Rocket Powerup\");\r\n                return this.getRocketAnimation(piece);\r\n    \r\n            case SNLTileType.SHIELD:\r\n                console.log(\"[PawnHandler] Landed on Shield Powerup\");\r\n                return this.getShieldAnimation(piece);\r\n    \r\n            default:\r\n                console.warn(`[PawnHandler] Unhandled PowerUp Type: ${SNLTileType[landedPowerupType]}`);\r\n                return null;\r\n        }\r\n    }\r\n\r\n    handleSnake(piece: Piece): Tween<Node> | null {\r\n        // Early return if not on snake tile\r\n        if ((Board.Instance.tileTypes[piece.pathNumber] & SNLTileType.SNAKE) === 0) {\r\n            return null;\r\n        }\r\n    \r\n        console.log(\"---------------------Landed on Snake\");\r\n    \r\n        // Handle shield protection\r\n        if (piece.hasShield) {\r\n            console.log(\"[PawnHandler] Piece has Shield. Skipping Snake Animation\");\r\n            this.handleShield(piece, false);\r\n            return null;\r\n        }\r\n    \r\n        // Find snake at current position\r\n        const currentBitingSnake = Board.Instance.snakesData.find(snake => snake.startTile === piece.pathNumber);\r\n        if (!currentBitingSnake) {\r\n            console.error(\"Couldn't Find Snake. Check Board Preset Data\");\r\n            return null;\r\n        }\r\n    \r\n        // Get snake movement data\r\n        const bitingSnakePreset = SnakePresets[currentBitingSnake.snakePresetIndex];\r\n        const endTile = GetEndTile(\r\n            currentBitingSnake.startTile,\r\n            bitingSnakePreset.offset.x,\r\n            bitingSnakePreset.offset.y,\r\n            Board.Instance.gameOptions.boardTilesCount,\r\n            Board.Instance.gameOptions.boardTilesPerRow\r\n        );\r\n    \r\n        // Calculate final position and get animation points\r\n        const finalPosition = Board.Instance.getPathTile(\r\n            endTile, \r\n            piece.playerNumber, \r\n            piece.pieceNumber\r\n        ).worldPosition.clone();\r\n        \r\n        const pieceOwnerName = this.player.playerData.name;\r\n        const pieceOwnerTruncatedName = this.player.truncateName(pieceOwnerName, 8);\r\n        const snakeBiteMessage = `<color=#FF0000><b>${pieceOwnerTruncatedName}</b> got bitten</color>`;\r\n\r\n        const snake = Board.Instance.getSnake(currentBitingSnake.snakePresetIndex);\r\n        if (!snake) {\r\n            console.error(\"Couldn't Find Snake. Check Board Preset Data\");\r\n            return null;\r\n        }\r\n    \r\n        // Apply shield and return animation\r\n        this.handleShield(piece, false);\r\n        \r\n        // Show death popup at the snake bite position\r\n        DeathPopup.showDeathPopup(piece.node.worldPosition.clone(), snakeBiteMessage, DeathType.SNAKE_BITE);\r\n        \r\n        return this.getSnakeAnimationFromPoints(piece, finalPosition, snake, endTile, bitingSnakePreset);\r\n    }\r\n\r\n    handleLadder(piece: Piece) : Tween<Node>{\r\n        const isLadder = (Board.Instance.tileTypes[piece.pathNumber] &  SNLTileType.LADDER) != 0;\r\n        if(!isLadder) return null;\r\n        console.log(\"--------------------- Landed on Ladder\");\r\n        const ladders = Board.Instance.ladders;\r\n        const currentLadder = ladders.find((ladder) => {\r\n            return ladder.startTile == piece.pathNumber;\r\n        });\r\n        if(currentLadder == null) {\r\n            console.error(\"Couldnt FInd Ladder. Check Board Preset Data\");\r\n            return null;\r\n        }\r\n        const ladderPreset = LadderPresets[currentLadder.ladderPresetIndex];\r\n        const endTile = GetEndTile(currentLadder.startTile, ladderPreset.offset.x, ladderPreset.offset.y, Board.Instance.gameOptions.boardTilesCount, Board.Instance.gameOptions.boardTilesPerRow);\r\n        const finalPosition = Board.Instance.getPathTile(endTile, piece.playerNumber, piece.pieceNumber).worldPosition.clone();\r\n        \r\n        console.log(\"[Ladder] Final Position: \", finalPosition);\r\n        return this.getLadderMoveAnimation(piece, piece.node.worldPosition.clone(), finalPosition, endTile, ladderPreset);\r\n    }\r\n\r\n    getSnakeAnimationFromPoints(piece: Piece, endPosition: Vec3, snake: Snake, endTile: number, snakePreset: SnakePreset) : Tween<Node>{\r\n        const points = snake.animationPoints.points;\r\n        const timePerTile = Board.Instance.gameOptions.snakeAnimationTimePerTile;\r\n        const pawnScaleDuration = 0.25; // Faster scale down\r\n        const totalAnimationDuration = snakePreset.offset.length * timePerTile;\r\n        const pieceMovingDuration = totalAnimationDuration * 0.9; // Slightly faster movement to make animation feel more snappy\r\n        const pieceSpeed = snakePreset.offset.length / pieceMovingDuration;\r\n        \r\n        let animation = tween(piece.node);\r\n        \r\n        // Add 1 second delay before starting snake animation\r\n        animation.delay(1);\r\n        \r\n        // Start with a slight bounce before being swallowed\r\n        animation.call(() => {\r\n            if(this.player._isLocal) {\r\n                console.log(\"[PawnHandler] Playing Flash Effect\");\r\n                UIManager.instance.playFlashEffect();\r\n            }\r\n            // Bounce effect before being swallowed\r\n            tween(piece.node)\r\n                .to(0.1, { scale: piece.node.scale.clone().multiplyScalar(1.2) })\r\n                .to(0.1, { scale: piece.node.scale.clone().multiplyScalar(0.9) })\r\n                .start();\r\n        });\r\n        \r\n        // Short delay before scaling down to simulate snake preparing to swallow\r\n        animation.delay(0.2);\r\n        \r\n        // Scale down piece with a wiggle effect\r\n        animation.call(() => {\r\n            AudioManager.instance.playSound(\"ChompSnakeBite\");\r\n            piece.scaleDownPieceWithWiggle(pawnScaleDuration).start();\r\n        });\r\n        animation.call(() => {\r\n            this.AnimateSnakeHead(snake.node).start();\r\n        });\r\n        // Short delay after piece disappears\r\n        animation.delay(pawnScaleDuration + 0.1);\r\n        \r\n        // Show and animate the snake bulge\r\n        animation.call(() => {\r\n            AudioManager.instance.stopSound(\"ChompSnakeBite\");\r\n            AudioManager.instance.playSound(\"SnakeBite\");\r\n            piece.animateSnakeBulge(pieceMovingDuration).start();\r\n        });\r\n        \r\n        var midPoint = Math.floor(points.length/2);\r\n        // Move along the path points\r\n        for(let i=0; i<points.length-1; i++) {\r\n            let duration = Vec3.distance(points[i].worldPosition, points[i+1].worldPosition) / pieceSpeed;\r\n            animation.to(duration, { worldPosition: points[i+1].worldPosition });\r\n            if(i == midPoint) {\r\n                \r\n            }\r\n        }\r\n        \r\n        // Final movement to end position\r\n        let duration = Vec3.distance(points[points.length-1].worldPosition, endPosition) / pieceSpeed;\r\n        animation.to(duration, { worldPosition: endPosition });\r\n        \r\n        // Pop the piece back out with a bounce effect\r\n        animation.call(() => {\r\n            piece.scaleUpPieceWithBounce(pawnScaleDuration).start();\r\n            // AudioManager.instance.playSound(\"Kill\");\r\n        });\r\n        \r\n        animation.delay(pawnScaleDuration + 0.1);\r\n        \r\n        return animation.call(() => {\r\n            piece.setPathNumber(endTile);\r\n            piece.updateParentNode();\r\n            this.onPieceLandedOnTargetTile();\r\n        });\r\n    }\r\n\r\n    getDistanceBetweenTwoTiles(startTile: number, endTile: number) : number {\r\n        const startRow = Math.floor(startTile / Board.Instance.gameOptions.boardTilesPerRow);\r\n        const endRow = Math.floor(endTile / Board.Instance.gameOptions.boardTilesPerRow);\r\n        const startColumn = startTile % Board.Instance.gameOptions.boardTilesPerRow;\r\n        const endColumn = endTile % Board.Instance.gameOptions.boardTilesPerRow;\r\n        return Math.sqrt(Math.pow(startRow - endRow, 2) + Math.pow(startColumn - endColumn, 2));\r\n    }\r\n\r\n    getRocketAnimation(piece : Piece){\r\n        let nextLandingPathNumber = Board.Instance.getRocketLandingPathNumber(piece);\r\n        console.log(\"Rocket Landing Path Number: \", nextLandingPathNumber);\r\n        let rocketPowerup : Node = Board.Instance.getPowerupNode(piece);\r\n        Board.Instance.removePowerUp(rocketPowerup.getComponent(PowerUp));\r\n        piece.setPathNumber(nextLandingPathNumber);\r\n        piece.updateParentNode();\r\n        let nextLandingPosition = Board.Instance.getPathTile(nextLandingPathNumber, piece.playerNumber, piece.pieceNumber).worldPosition.clone();\r\n        let duration = (Vec3.distance(piece.node.worldPosition, nextLandingPosition) / 100) * .15;\r\n        let direction = nextLandingPosition.clone().subtract(piece.node.worldPosition).normalize();\r\n        duration = Math.max(duration, .3);\r\n        let animation = tween(piece.node).call(() => {\r\n            piece.playPropellerAnimation(direction);\r\n        })\r\n        .to(duration, { worldPosition: nextLandingPosition });\r\n        animation.call(() => {\r\n            // piece.updatePiecePosition(nextLandingPathNumber);\r\n            piece.stopPropellerAnimation();\r\n            this.onPieceLandedOnTargetTile();\r\n        });\r\n        animation.tag(this.pieceAnimationsTag);\r\n        return animation;\r\n    }\r\n\r\n    handleShield(piece: Piece, active: boolean) {\r\n        console.log(\"[PawnHandler] Handling Shield for Piece: \", piece.pieceNumber, \"with active: \", active);\r\n        piece.setShieldActive(active);\r\n    }\r\n    \r\n    getShieldAnimation(piece: Piece) : Tween<Node>{\r\n        piece.setShieldActive(true);\r\n        return null;\r\n    }\r\n    \r\n\r\n    getLadderMoveAnimation(piece: Piece, startPosition: Vec3, endPosition: Vec3, endTile: number, ladderPreset: LadderPreset) : Tween<Node>{\r\n        const startTile = piece.pathNumber;\r\n        const totalTime = ladderPreset.offset.length * Board.Instance.gameOptions.ladderAnimationTimePerTile;\r\n        console.log(\"[Ladder] Distance: \", ladderPreset.offset.length, \"totalTime: \", totalTime);\r\n        // let midPosition : Vec3 = startPosition.clone().add(endPosition).multiplyScalar(0.5);\r\n        let startScale = piece.node.scale.clone();\r\n        let animation = tween(piece.node)\r\n        .call(() => {\r\n            if(this.player._isLocal) {\r\n                UIManager.instance.playFlashEffect(new Color(15, 156, 4));\r\n            }\r\n            AudioManager.instance.playSound(\"Ladder\");\r\n            piece.node.setWorldPosition(startPosition);\r\n        });\r\n        // animation.to(totalTime/2, { worldPosition: midPosition, scale : startScale.clone().multiplyScalar(1.5)});\r\n        animation.to(totalTime, { worldPosition: endPosition, scale : startScale});\r\n        animation.call(() => {\r\n            console.log(\"[Ladder] Climb Animation complete\");\r\n            piece.setPathNumber(endTile);\r\n            piece.updateParentNode();\r\n            this.onPieceLandedOnTargetTile();\r\n        });\r\n        return animation;\r\n    }\r\n\r\n    killOpponentPieces(myPiece: Piece) : Tween<Node> {\r\n        let opponentPiece = Board.Instance.getKillablePieces(myPiece)\r\n        if(opponentPiece == null) return;\r\n        console.log(\"Killing Opponent Piece: \", \"piece \", opponentPiece.pieceNumber , \"of player \", opponentPiece.playerNumber);\r\n        const pieceOwnerName = this.player.playerData.name;\r\n        const pieceOwnerTruncatedName = this.player.truncateName(pieceOwnerName, 8);\r\n        const opponentPiecePlayerNumber = opponentPiece.playerNumber;\r\n        const opponentPlayer = PlayerService.instance.getPlayer(opponentPiecePlayerNumber);\r\n        const opponentPieceOwnerName = opponentPlayer.playerData.name;\r\n        const opponentPieceOwnerTruncatedName = opponentPlayer.truncateName(opponentPieceOwnerName, 8);\r\n        const killMessage = `<color=#FF0000><b>${pieceOwnerTruncatedName}</b> killed <b>${opponentPieceOwnerTruncatedName}!</b></color>`;\r\n        // Show death popup for the killed piece\r\n        DeathPopup.showDeathPopup(opponentPiece.node.worldPosition.clone(), killMessage, DeathType.PAWN_KILL);\r\n        \r\n        let pathPositions = Board.Instance.getPathPositions(opponentPiece.pathNumber, 0, opponentPiece.playerNumber, opponentPiece.pieceNumber);\r\n        // let animation = opponentPiece.moveToTargetPathNumber(0, null, durationPerTile);\r\n        opponentPiece.setPathNumber(0);\r\n        opponentPiece.updateParentNode();\r\n        opponentPiece.updatePieceScale();\r\n        let durationPerTile = .15;//opponentPiece.previousPathNumber\r\n        let totalDuration = math.clamp((Vec3.distance(opponentPiece.node.worldPosition, pathPositions[pathPositions.length-1]) / 50) * durationPerTile, 0.3, 1);\r\n        console.log(\"kill animation duration per tile: \", totalDuration);\r\n        this.handleShield(opponentPiece, false);\r\n        let animation = tween(opponentPiece.node);\r\n        \r\n        // Add 1 second delay before starting kill animation\r\n        animation.delay(1);\r\n        \r\n        animation.call(() => {\r\n            opponentPiece.onKilled();\r\n            opponentPiece.node.setWorldPosition(pathPositions[0]);\r\n        });\r\n        animation.to(totalDuration, { worldPosition: pathPositions[pathPositions.length-1]},\r\n            {\r\n                progress: (start: number, end: number, current: number, ratio: number): number => {\r\n                    return math.lerp(start, end, this.easeOutBack(ratio));\r\n                }\r\n            }\r\n        );\r\n        animation.call(() => {\r\n            // opponentPiece.updatePiecePosition();\r\n        });\r\n        this.hasKilledInThisMove = true;\r\n        return animation;\r\n    }\r\n     easeOutBack(x: number): number {\r\n        const c1 = 1.70158 * 1.5;\r\n        const c3 = c1 + 1;\r\n        \r\n        return 1 + c3 * Math.pow(x - 1, 3) + c1 * Math.pow(x - 1, 2);\r\n    }\r\n\r\n    movePiece(pieceIndex: number, rollValue: number, sendAck: boolean) {\r\n        // console.log(\"Pushing Move Data to Queue: \", \"piece \", pieceIndex, \"with roll value \", rollValue);\r\n        this.moveDataQueue.push({pieceIndex, rollValue, sendAck});\r\n        if(this.state == PawnHandlerState.IDLE) {\r\n            this.handleData();\r\n        }\r\n    }\r\n\r\n    updateShields(serverState: SNLRoomState) {\r\n        for(let i=0; i<this.pawns.length; i++) {\r\n            this.handleShield(this.pawns[i], serverState.playersData[this.player.playerNumber].hasShield[i]);\r\n        }\r\n    }\r\n\r\n    Reset(serverState: SNLRoomState) {\r\n        this.stopAllAnimations();\r\n        this.moveDataQueue = [];\r\n        this.setState(PawnHandlerState.IDLE);\r\n        this.ResetPawnPositions(serverState);\r\n        this.updateShields(serverState);\r\n        Board.Instance.reset(serverState);\r\n    }\r\n\r\n    ResetPawnPositions(serverState: SNLRoomState) {\r\n        const playerData = serverState.playersData[this.player.playerNumber];\r\n        for(let j = 0; j < playerData.pieces.length; j++) {\r\n            //kill all the tween animations:\r\n            this.pawns[j].reset(playerData.pieces[j]);\r\n        }\r\n        console.log(\"Reset Pawn Positions of Player: \", this.player.playerNumber);\r\n    }\r\n\r\n    stopAllAnimations(){\r\n        this.StopPieceSelectAnimations();\r\n        Tween.stopAllByTag(this.pieceAnimationsTag);\r\n    }\r\n\r\n    sendMoveAck() {\r\n        NetworkManager.Instance.CurrentRoom.send(GameMessageType.MOVE_PIECE_ACK, JSON.stringify({}));\r\n    }\r\n\r\n    isAnimating(){\r\n        return this.state == PawnHandlerState.MOVING;\r\n    }\r\n\r\n    StartSelectAnimationsForValidMovePieces(){\r\n        if(!this.player._isLocal) return;\r\n        let validPieces = this.player._stateMachine.movePieceState.getAllMovablePieces();\r\n        for(let i=0; i<validPieces.length; i++) {\r\n            validPieces[i].playSelectAnimation();\r\n        }\r\n    }\r\n\r\n    StopPieceSelectAnimations(){\r\n        if(!this.player._isLocal) return;\r\n        for(let i=0; i<this.pawns.length; i++) {\r\n            this.pawns[i].stopSelectAnimation();\r\n        }\r\n    }\r\n\r\n    AnimateSnakeHead(snakeNode: Node) : Tween<Node>{\r\n        //Search for \"SnakeHead\" in the children of the snakeNode\r\n        let snakeHead = snakeNode.children[0].getChildByName(\"SnakeHead\");\r\n        if(snakeHead == null) return;\r\n        console.log(\"Animating Snake Head: \", snakeHead);\r\n        //Stretch animation like swallowing - expand Y and squish X\r\n        let animation = tween(snakeHead);\r\n        let originalScale = snakeHead.scale.clone();\r\n        animation.to(0.15, { \r\n            scale: new Vec3(\r\n                originalScale.x * 0.6,  // Squish in X direction\r\n                originalScale.y * 1.8,  // Stretch in Y direction \r\n                originalScale.z\r\n            )\r\n        });\r\n        animation.to(0.2, { \r\n            scale: new Vec3(\r\n                originalScale.x * 0.85, // Start returning to normal\r\n                originalScale.y * 1.3,\r\n                originalScale.z\r\n            )\r\n        });\r\n        animation.to(0.15, { scale: originalScale }); // Return to original scale\r\n        return animation;\r\n    }\r\n}","//Vec3 extensions::\r\nimport { Vec3 } from \"cc\";\r\nfunction clampMagnitude(this: Vec3, min: number, max: number) : Vec3{\r\n    if(min > max){\r\n        console.error(\"min should be less than max\");\r\n        return;\r\n    }\r\n    const magnitude = this.length();\r\n    if(magnitude > max){\r\n        this.normalize();\r\n        this.multiplyScalar(max);\r\n    }\r\n    else if(magnitude < min){\r\n        this.normalize();\r\n        this.multiplyScalar(min);\r\n    }\r\n    return this;\r\n}\r\ndeclare module 'cc' {\r\n    interface Vec3 {\r\n        clampMagnitude(min : number, max: number): Vec3;\r\n    }\r\n  }\r\n\r\nVec3.prototype.clampMagnitude = clampMagnitude;\r\n\r\n//converct point to world position::\r\nimport {Node } from \"cc\";\r\n\r\nfunction transformPoint(this: Node) : Vec3{\r\n    return this.worldPosition.clone();\r\n}\r\n\r\n//add extension function to component to print the name of the component\r\nimport { Component } from \"cc\";\r\nimport { PBLogger } from \"./PBLogger\";\r\n\r\ndeclare module 'cc' {\r\n    interface Component {\r\n        log(...params: any[]): void;\r\n    }\r\n}\r\n\r\nComponent.prototype.log = function(...params: any[]): void {\r\n    const componentName = this.constructor.name;\r\n    PBLogger.info(`${componentName} `, ...params);\r\n};\r\n","// Extend the Window interface to include ReactNativeWebView\r\ndeclare global {\r\n    interface Window {\r\n        ReactNativeWebView?: {\r\n            postMessage(message: string): void;\r\n        };\r\n    }\r\n}\r\n\r\nexport enum LogLevel {\r\n    Debug,\r\n    Info,\r\n    Warning,\r\n    Error\r\n}\r\n\r\n// Logger class to encapsulate logging logic\r\nexport class PBLogger {\r\n    // Current log level; logs with a lower level will not be output\r\n    private static currentLevel: LogLevel = LogLevel.Debug;\r\n    \r\n    // Flag to determine if we're in production mode\r\n    private static isProduction: boolean = false;\r\n\r\n    // Method to log debug messages\r\n    static debug(message: string, ...params: unknown[]) {\r\n        this.log(LogLevel.Debug, message, params);\r\n    }\r\n\r\n    // Method to log informational messages\r\n    static info(message: string, ...params: unknown[]) {\r\n        this.log(LogLevel.Info, message, params);\r\n    }\r\n\r\n    // Method to log warnings\r\n    static warning(message: string, ...params: unknown[]) {\r\n        this.log(LogLevel.Warning, message, params);\r\n    }\r\n\r\n    // Method to log errors\r\n    static error(message: string, ...params: unknown[]) {\r\n        this.log(LogLevel.Error, message, params);\r\n    }\r\n\r\n    // Private method to handle the actual logging\r\n    private static log(level: LogLevel, message: string, params: unknown[]) {\r\n        if (level >= this.currentLevel) {\r\n            const output = `${LogLevel[level]}: ${message}`;\r\n            \r\n            // Always log to console\r\n            console.log(output, ...params);\r\n            \r\n            // If in production mode, also send to ReactNativeWebView\r\n            if (this.isProduction && window.ReactNativeWebView) {\r\n                try {\r\n                    const logData = {\r\n                        event: 'log',\r\n                        level: LogLevel[level],\r\n                        message: output,\r\n                        params: params\r\n                    };\r\n                    window.ReactNativeWebView.postMessage(JSON.stringify(logData));\r\n                } catch (e) {\r\n                    console.error('Failed to send log to ReactNativeWebView:', e);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // Method to set the logger's level\r\n    static setLevel(level: LogLevel) {\r\n        this.currentLevel = level;\r\n    }\r\n    \r\n    // Method to set production mode\r\n    static setProductionMode(isProduction: boolean) {\r\n        this.isProduction = isProduction;\r\n    }\r\n}","import { sys } from 'cc';\r\nimport { _decorator } from 'cc';\r\nimport { PBLogger } from './PBLogger';\r\nconst { ccclass } = _decorator;\r\n\r\n@ccclass('PbSaveSystem')\r\nexport class PbSaveSystem {\r\n\r\n    public static SaveData(key: string, data: unknown) {\r\n        PBLogger.info(\"============ Saving data in pb save system =========\");\r\n        sys.localStorage.setItem(key, JSON.stringify(data));\r\n    }\r\n\r\n    public static LoadData(key: string) {\r\n        return JSON.parse(sys.localStorage.getItem(key));\r\n    }\r\n\r\n    public static RemoveData(key: string) {\r\n        sys.localStorage.removeItem(key);\r\n    }\r\n\r\n    public static ClearAllData() {\r\n        sys.localStorage.clear();\r\n    }\r\n}\r\n\r\n\r\n","import { \r\n    _decorator, \r\n    Animation,\r\n    CCInteger, \r\n    Component,\r\n    Node,\r\n    Prefab,\r\n    Quat,\r\n    Sprite,\r\n    SpriteFrame,\r\n    Tween,\r\n    Vec3,\r\n    quat,\r\n    tween\r\n} from 'cc';\r\n\r\n// Local imports\r\nimport { AudioManager } from './AudioManager';\r\nimport { Board } from './Board';\r\nimport { PlayerAssets } from './PlayerAssets';\r\nimport { CCBoolean } from 'cc';\r\nimport { PoolManager } from './pooling/PoolManager';\r\nimport { GameManager } from './GameManager';\r\nimport { UIManager } from '../UIPack/Scripts/UIManager';\r\nimport { Player } from './Player';\r\nimport { Label } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\n\r\nconst NORMAL_SCALE: number = 0.9;\r\nconst PLAYING_SCALE: number = 0.9;\r\nconst TWO_STACKED_SCALE: number = 0.65;\r\nconst FOUR_STACKED_SCALE: number = 0.4;\r\n\r\n@ccclass('Piece')\r\nexport class Piece extends Component {\r\n    @property({ type: Sprite })\r\n    pieceSprite: Sprite = null; \r\n    @property({ type: CCInteger})\r\n    pieceNumber: number = 0;\r\n    @property({ type: CCInteger})\r\n    playerNumber: number = 0;\r\n    @property({type: Sprite})\r\n    labelSprite : Sprite = null;\r\n    @property({type: Node})\r\n    labelNode : Node = null;\r\n    @property({type: Label})\r\n    pieceLabel : Label = null;\r\n    moveData = [];\r\n    previousPathNumber: number = 0;\r\n    pathNumber: number = 0;\r\n    // pieceScaleOnBoard: number = 1;\r\n    // stackedupScale: number = 0.75;\r\n    @property({ type: Animation })\r\n    propellerAnimation : Animation = null;\r\n    @property({ type: Animation })\r\n    selectAnimation : Animation = null;\r\n    @property({ type: Prefab })\r\n    moveRippleEffect : Prefab = null;\r\n    @property({ type: CCBoolean })\r\n    hasShield : boolean;\r\n    @property({ type: Animation })\r\n    shieldAnimation : Animation = null;\r\n    @property({ type: Node })\r\n    snakeBumpNode : Node = null;\r\n    player : Player = null;\r\n    \r\n\r\n    Initialize(playerNumber: number, pieceNumber: number, player : Player) {\r\n        this.labelNode.active = false;\r\n        this.playerNumber = playerNumber;\r\n        this.pieceNumber = pieceNumber;\r\n        this.player = player;\r\n        this.pieceSprite.spriteFrame = PlayerAssets.instance.getPawnSprite(playerNumber);\r\n        this.labelSprite.color = PlayerAssets.instance.getPawnColor(playerNumber);\r\n        this.pieceLabel.string = this.getPieceLabel(player.playerData.name);\r\n        this.updatePieceScale();\r\n    }\r\n    \r\n    move(rollValue: number, callBack : Function) : Tween<Node> {\r\n        // this.log(`InitialPathNumber: ${this.pathNumber} RollValue: ${rollValue}`)\r\n        var targetPathNumber = this.pathNumber + rollValue;\r\n        if(this.isOnBase() && rollValue == 6) {\r\n            this.labelNode.active = true;\r\n            targetPathNumber = 1;\r\n        }\r\n\r\n        this.setPathNumber(targetPathNumber);\r\n        this.updateParentNode();\r\n        let animation: Tween<Node> = this.getMoveAnimation(targetPathNumber, callBack);\r\n        return animation;\r\n    }\r\n\r\n    moveToTargetPathNumber(targetPathNumber: number, callBack : Function, durationPerTile : number = 0.12) : Tween<Node> {\r\n        this.setPathNumber(targetPathNumber);\r\n        this.updateParentNode();\r\n        let animation: Tween<Node> = this.getMoveAnimation(targetPathNumber, callBack, durationPerTile);\r\n        return animation;\r\n    }\r\n    \r\n    getMoveAnimation(targetPathNumber: number, callBack : Function, durationPerTile : number = 0.12): Tween<Node> {\r\n        const initialPosition = this.node.worldPosition.clone();\r\n        const pathPositions = Board.Instance.getPathPositions(this.previousPathNumber, targetPathNumber, this.playerNumber, this.pieceNumber);\r\n        const tile: Node = Board.Instance.getPathTile(targetPathNumber, this.playerNumber, this.pieceNumber);\r\n        let animation : Tween<Node> = tween(this.node)\r\n            .call(() => {\r\n                this.node.setWorldPosition(initialPosition);\r\n            });\r\n        for(let i = 1; i < pathPositions.length; i++) {\r\n            animation.then(this.jumpToNextTileAnimation(this.node, pathPositions[i-1], pathPositions[i], durationPerTile));\r\n        }\r\n        animation.call(() => {\r\n            if(callBack != null){\r\n                console.log(\"[Piece] Calling on pieces  landed CallBack\");\r\n                callBack();\r\n            }\r\n        });\r\n        return animation;\r\n    }\r\n\r\n    jumpToNextTileAnimation(sourceNode: Node, startPosition: Vec3, endPosition: Vec3, durationPerTile : number = 0.12) : Tween<Node>{\r\n        let midPosition : Vec3 = startPosition.clone().add(endPosition).multiplyScalar(0.5);\r\n        let startScale = sourceNode.scale.clone();\r\n        let animation = tween(sourceNode)\r\n        .call(() => {\r\n            AudioManager.instance.playSound(\"Move\");\r\n            sourceNode.setWorldPosition(startPosition);\r\n        });\r\n        animation.call(() => {\r\n            this.playMoveRippleEffect(startPosition.clone());\r\n        });\r\n        animation.to(durationPerTile, { worldPosition: midPosition, scale : startScale.clone().multiplyScalar(1.25)});\r\n        animation.to(durationPerTile, { worldPosition: endPosition, scale : startScale});\r\n        return animation;\r\n    }\r\n\r\n    setPathNumber(targetPathNumber: number) {\r\n        this.previousPathNumber = this.pathNumber;\r\n        this.pathNumber = targetPathNumber;\r\n    }\r\n\r\n    updateParentNode(targetPathNumber: number = -1) {\r\n        if(targetPathNumber == -1) {\r\n            targetPathNumber = this.pathNumber;\r\n        }\r\n        const tile: Node = Board.Instance.getPathTile(targetPathNumber, this.playerNumber, this.pieceNumber);\r\n        this.node.setParent(tile, true);\r\n    }\r\n\r\n    //TODO : fix offset while two pieces are on same tile\r\n    updatePiecePosition(targetPathNumber: number = -1) {\r\n        if(targetPathNumber == -1) {\r\n            targetPathNumber = this.pathNumber;\r\n        }\r\n        this.node.setPosition(Vec3.ZERO.clone());\r\n        const tile: Node = Board.Instance.getPathTile(targetPathNumber, this.playerNumber, this.pieceNumber);\r\n        if(Board.Instance.piecesOnTile(targetPathNumber, this.playerNumber) > 1) {\r\n            this.node.setWorldPosition(this.node.worldPosition.add(this.getOffsetPosition()));\r\n        }\r\n        this.updatePieceScale();\r\n    }\r\n\r\n    getOffsetPosition() : Vec3 {\r\n        if(this.node.parent.children.length == 1 || this.pathNumber == 0){\r\n            return Vec3.ZERO.clone();\r\n        }\r\n        let childIndex = this.myIndexInTile(this.node.parent);\r\n        let totalPieces = this.node.parent.children.length;\r\n        let spacing = totalPieces > 3 ? 7.5 : 15; // Space between pieces\r\n        \r\n        let offset = (childIndex - (totalPieces - 1) / 2) * spacing;\r\n        \r\n        return new Vec3(offset, 0, 0);\r\n    }\r\n\r\n    updatePieceScale() {\r\n        const stackedPawns = Board.Instance.getPawnsCountOnTile(this.pathNumber);\r\n        const baseScale = Vec3.ONE.clone();\r\n        let targetScale: number = NORMAL_SCALE;\r\n        if (this.isOnBase()) {\r\n            targetScale = NORMAL_SCALE;\r\n        }\r\n        else if (stackedPawns > 4) {\r\n            targetScale = FOUR_STACKED_SCALE;\r\n        }\r\n        else if (stackedPawns > 2) {\r\n            targetScale = TWO_STACKED_SCALE;\r\n        }\r\n        else {\r\n            targetScale = PLAYING_SCALE;\r\n        }\r\n        this.node.scale = baseScale.multiplyScalar(targetScale);\r\n    }\r\n\r\n    myIndexInTile(parentTile : Node) : number {\r\n        for(let i = 0; i < parentTile.children.length; i++) {\r\n            if(parentTile.children[i] == this.node) {\r\n                return i;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    animatePieceToSize(finalScale : number) {\r\n        tween(this.node)\r\n            .to(0.5, { scale: Vec3.ONE.clone().multiplyScalar(finalScale) })\r\n            .start();\r\n    }\r\n\r\n    isOnBase() : boolean{\r\n        return this.pathNumber == 0;\r\n    }\r\n\r\n    playPropellerAnimation(direction : Vec3) {\r\n        this.propellerAnimation.node.active = true;\r\n        this.propellerAnimation.node.setPosition(Vec3.ZERO.clone());\r\n        \r\n        this.setNodeUpDirection(this.propellerAnimation.node, direction);\r\n        this.propellerAnimation.node.setWorldPosition(this.node.worldPosition.clone().subtract(this.propellerAnimation.node.up.multiplyScalar(50)));\r\n        this.propellerAnimation.play();\r\n        AudioManager.instance.playSound(\"Propeller\");\r\n    }\r\n\r\n    setNodeUpDirection(node: Node, direction: Vec3) {\r\n        const up = direction.clone().normalize();\r\n        const forward = new Vec3(0, 0, 1);\r\n        const right = new Vec3(0, 0, 0);\r\n        Vec3.cross(right, up, forward).normalize();\r\n        const rotation = quat();\r\n        Quat.fromAxes(rotation, right, up, forward);\r\n\r\n        node.setWorldRotation(rotation);\r\n    }\r\n    stopPropellerAnimation() {\r\n        this.propellerAnimation.stop();\r\n        this.propellerAnimation.node.active = false;\r\n        AudioManager.instance.stopSound(\"Propeller\");\r\n    }\r\n\r\n\r\n    playSelectAnimation(){\r\n        this.selectAnimation.node.active = true;\r\n        let sprite : Sprite = this.selectAnimation.node.getComponent(Sprite);\r\n        if(sprite != null){\r\n            sprite.color = PlayerAssets.instance.getPawnColor(this.playerNumber);\r\n        }\r\n        this.selectAnimation.play();\r\n    }\r\n\r\n    stopSelectAnimation(){\r\n        this.selectAnimation.stop();\r\n        this.selectAnimation.node.active = false;\r\n    }\r\n\r\n    playMoveRippleEffect(worldPosition : Vec3){\r\n        let moveRippleEffect = PoolManager.instance.getObjectFromPool(this.moveRippleEffect);\r\n        moveRippleEffect.setParent(Board.Instance.node, true);\r\n        moveRippleEffect.setWorldPosition(worldPosition);\r\n        let sprite : Sprite = moveRippleEffect.getComponent(Sprite);\r\n        if(sprite != null){\r\n            sprite.color = PlayerAssets.instance.getPawnColor(this.playerNumber);\r\n        }\r\n        let animation : Animation = moveRippleEffect.getComponent(Animation);\r\n        animation.play();\r\n    }\r\n\r\n    setShieldActive(active : boolean) {\r\n        if(this.hasShield == active) {\r\n            return;\r\n        }\r\n        if(active) {\r\n            AudioManager.instance.playSound(\"Power\");\r\n        }\r\n        this.hasShield = active;\r\n        let sprite : Sprite = this.shieldAnimation.node.getComponent(Sprite);\r\n        if(sprite != null){\r\n            sprite.color = PlayerAssets.instance.getPawnColor(this.playerNumber);\r\n        }\r\n        if(active) {\r\n            console.log(\"[Piece] Playing Shield Animation\");\r\n            this.shieldAnimation.node.active = true;\r\n            //TODO: Add shield animation\r\n            this.shieldAnimation.play();\r\n        }\r\n        else {\r\n            console.log(\"[Piece] Stopping Shield Animation\");\r\n            this.shieldAnimation.stop();\r\n            this.shieldAnimation.node.active = false;\r\n        }\r\n    }\r\n\r\n    reset(PathNumber: number) {\r\n        this.setPathNumber(PathNumber);\r\n        this.updateParentNode();\r\n        this.updatePiecePosition();\r\n        this.stopPropellerAnimation();\r\n    }\r\n\r\n    scaleDownPiece(duration : number = 0.1) : Tween<Node> {\r\n        return tween(this.pieceSprite.node)\r\n            .call(() => {\r\n                this.pieceSprite.node.active = true;\r\n            })\r\n            .to(duration, { scale: this.pieceSprite.node.scale.clone().multiplyScalar(0) })\r\n            .call(() => {\r\n                this.pieceSprite.node.active = false;\r\n            });\r\n    }\r\n\r\n    scaleDownPieceWithWiggle(duration : number = 0.25) : Tween<Node> {\r\n        return tween(this.pieceSprite.node)\r\n            .call(() => {\r\n                this.pieceSprite.node.active = true;\r\n            })\r\n            // Add a wiggle effect as the piece is being \"swallowed\"\r\n            .to(duration * 0.3, { scale: this.pieceSprite.node.scale.clone().multiplyScalar(0.8), \r\n                                  angle: 15 })\r\n            .to(duration * 0.3, { scale: this.pieceSprite.node.scale.clone().multiplyScalar(0.5), \r\n                                  angle: -15 })\r\n            .to(duration * 0.4, { scale: this.pieceSprite.node.scale.clone().multiplyScalar(0), \r\n                                  angle: 0 })\r\n            .call(() => {\r\n                this.pieceSprite.node.active = false;\r\n            });\r\n    }\r\n\r\n    scaleDownBump(duration : number = 0.1) : Tween<Node> {\r\n        return tween(this.snakeBumpNode)\r\n            .call(() => {\r\n                this.snakeBumpNode.active = true;\r\n                this.snakeBumpNode.scale = Vec3.ONE.clone();\r\n            })\r\n            .to(duration, { scale: Vec3.ONE.clone().multiplyScalar(0.5)})\r\n            .call(() => {\r\n                this.snakeBumpNode.active = false;\r\n            });\r\n    }\r\n\r\n    animateSnakeBulge(duration : number = 0.1) : Tween<Node> {\r\n        return tween(this.snakeBumpNode)\r\n            .delay(0.1)\r\n            .call(() => {\r\n                this.snakeBumpNode.active = true;\r\n                // Start with a larger bulge to show \"swallowing\"\r\n                this.snakeBumpNode.scale = Vec3.ONE.clone().multiplyScalar(1.2);\r\n            })\r\n            // Create a pulsing effect while moving\r\n            .to(duration, { scale: Vec3.ONE.clone().multiplyScalar(0.5) })\r\n            .call(() => {\r\n                this.snakeBumpNode.active = false;\r\n            });\r\n    }\r\n\r\n    scaleUpPiece(duration : number = 0.1) : Tween<Node> {\r\n        return tween(this.pieceSprite.node)\r\n            .call(() => {\r\n                this.pieceSprite.node.active = true;\r\n            })\r\n            .to(duration, { scale: Vec3.ONE.clone().multiplyScalar(NORMAL_SCALE)});\r\n    }\r\n\r\n    scaleUpPieceWithBounce(duration : number = 0.25) : Tween<Node> {\r\n        return tween(this.pieceSprite.node)\r\n            .call(() => {\r\n                this.pieceSprite.node.active = true;\r\n                this.pieceSprite.node.scale = Vec3.ONE.clone().multiplyScalar(0);\r\n            })\r\n            // Add a bounce effect as the piece reappears\r\n            .to(duration * 0.4, { scale: Vec3.ONE.clone().multiplyScalar(NORMAL_SCALE * 1.3) })\r\n            .to(duration * 0.3, { scale: Vec3.ONE.clone().multiplyScalar(NORMAL_SCALE * 0.8) })\r\n            .to(duration * 0.3, { scale: Vec3.ONE.clone().multiplyScalar(NORMAL_SCALE) });\r\n    }\r\n\r\n    onKilled(){\r\n        AudioManager.instance.playSound(\"Kill\");\r\n        if(this.player._isLocal) {\r\n            UIManager.instance.playFlashEffect();\r\n            this.labelNode.active = false;\r\n        }\r\n    }\r\n\r\n    getPieceLabel(username:string): string {\r\n        const firstName = username.split(\" \")[0];\r\n        const trimmed = firstName.trim();\r\n      \r\n        if (trimmed.length >= 4) {\r\n          return (trimmed[0] + trimmed[2]).toUpperCase(); // first + third\r\n        } else if (trimmed.length >= 2) {\r\n          return trimmed.substring(0, 2).toUpperCase();   // first two letters\r\n        } else if (trimmed.length === 1) {\r\n          return trimmed.toUpperCase();                   // single letter\r\n        } else {\r\n          return \"??\";                                     // fallback for empty\r\n        }\r\n      }\r\n\r\n}\r\n\r\n","import { _decorator, CCInteger, Component, Input, Node, Tween, Vec3 } from 'cc';\r\nimport { SNLRoomState } from './schema/SNLRoomState';\r\nimport { SNLRoomSettings } from './schema/SNLRoomSettings';\r\nimport { NetworkManager } from '../pulse/networking/NetworkManager';\r\nimport { Dice } from './Dice';\r\nimport { Board } from './Board';\r\nimport { Piece } from './Piece';\r\nimport { Label } from 'cc';\r\nimport { assetManager } from 'cc';\r\nimport { ImageAsset } from 'cc';\r\nimport { SpriteFrame } from 'cc';\r\nimport { Texture2D } from 'cc';\r\nimport { Widget } from 'cc';\r\nimport { Sprite } from 'cc';\r\nimport { BasePlayerData } from '../pulse/schema/BasePlayerData';\r\nimport { PlayerAssets } from './PlayerAssets';\r\nimport { instantiate } from 'cc';\r\nimport { Timer } from './Timer';\r\nimport { PawnHandler } from './PawnHandler';\r\nimport { OutComesUIManager } from './OutComesUIManager';\r\nimport { MoveOptionsInput } from './MoveOptionsInput';\r\nimport { tween } from 'cc';\r\nimport { UITransform } from 'cc';\r\nimport { Layout } from 'cc';\r\nimport { Vec2 } from 'cc';\r\nimport { PlayerStateMachine } from './Player/PlayerStateMachine';\r\nimport { PlayerAvatar } from '../pulse/pb-cocos-utils/PlayerAvatar';\r\nimport { SNLPlayerData } from './schema/SNLPlayerData';\r\nconst { ccclass, property } = _decorator;\r\n\r\nexport enum PlayerState {\r\n    IDLE,\r\n    ROLLING,\r\n    MOVING_PIECE,\r\n}\r\n@ccclass('Player')\r\nexport class Player extends Component {\r\n    @property({ type: CCInteger })\r\n    playerNumber: number = 0;\r\n    @property({ type: Label})\r\n    playerName: Label = null;\r\n    @property({ type: Sprite })\r\n    profileImage: Sprite = null;\r\n    @property({ type: Sprite })\r\n    profilePicHolder: Sprite = null;\r\n    @property({ type: Sprite })\r\n    borderSprite: Sprite = null;\r\n    @property({type: Widget})\r\n    profilePicWidget : Widget = null;\r\n    @property({ type: Timer })\r\n    timer : Timer = null;\r\n    @property({ type: Sprite })\r\n    timerSprite : Sprite = null;\r\n    @property({ type: Dice })\r\n    dice: Dice = null;\r\n    @property({ type: Node })\r\n    diceRoot: Node = null;\r\n    @property({ type: Sprite })\r\n    diceBgSprite : Sprite = null;\r\n    @property({ type: Sprite })\r\n    namePlateSprite : Sprite = null;\r\n    @property({ type: Node })\r\n    piecesBase : Node = null;\r\n    @property({ type: PlayerAvatar })\r\n    playerAvatar : PlayerAvatar = null;\r\n    bases: Node[] = [];\r\n    sortedBasesHorizontalPosition: Node[] = [];\r\n    pawns : Piece[] = [];\r\n    playerData : SNLPlayerData = null;\r\n    state : PlayerState = PlayerState.IDLE;\r\n    _isLocal = false;\r\n    _isInitialized = false;\r\n    _currentPiecesData: number[] = [0,0,0,0];\r\n    _currentDiceValue = 1;\r\n    _pieceAnimations: Tween<Node>[] = [];\r\n    _isProfileInitialized = false;\r\n    _board: Board = null;\r\n    _myBasesParent: Node = null;\r\n    _pawnHandler: PawnHandler = null;\r\n    @property({type: OutComesUIManager})\r\n    outComesUIManager: OutComesUIManager = null;\r\n    @property({type: Node})\r\n    dicePointingArrow : Node = null;\r\n    diceArrowInitialPosition : Vec3 = new Vec3(0,0,0);\r\n    _currentSelectedPieceNumber : number = -1;\r\n    _moveOptioneInput : MoveOptionsInput = null;\r\n    _gameOptions : SNLRoomSettings = null;\r\n    _stateMachine : PlayerStateMachine;\r\n    private profileImageUrl: string = \"\";\r\n\r\n    protected onLoad(): void {\r\n        this._pawnHandler = new PawnHandler(this.pawns, this);\r\n        this.diceArrowInitialPosition = this.dicePointingArrow.getPosition();\r\n        if(this._stateMachine == null)this._stateMachine = new PlayerStateMachine(this);\r\n    }\r\n\r\n    protected start(): void {\r\n        this.createMoveOptionsUI();\r\n    }\r\n    \r\n    protected update(dt: number): void {\r\n        this._stateMachine.updateState(dt);\r\n    }\r\n\r\n    createMoveOptionsUI(){\r\n        var moveOptionsUI = instantiate(PlayerAssets.instance.moveOptionsUI);\r\n        moveOptionsUI.setParent(this.node);\r\n        moveOptionsUI.setPosition(new Vec3(0,0,0));\r\n        this._moveOptioneInput = moveOptionsUI.getComponent(MoveOptionsInput);\r\n        this._moveOptioneInput.node.active = false;\r\n    }\r\n\r\n    initialize(newState: SNLRoomState, board : Board, playerNumber : number) {\r\n        console.log(\"[Player] Initializing Player : \", this.playerNumber);\r\n        this._board = board;\r\n        this.playerNumber = playerNumber;\r\n        var myProfileData = newState.playersData.find(p => p.playerNumber == this.playerNumber);\r\n        this.playerData = myProfileData;\r\n        console.log(\"[Player] My Profile Data : \", myProfileData);\r\n        if(myProfileData == null){\r\n            return;\r\n        }\r\n        if(myProfileData.sessionId == NetworkManager.Instance.CurrentRoom.sessionId) {\r\n            console.log(\"Setting Local Player\");\r\n            this._isLocal = true;\r\n            this.timer.setLocal(this._isLocal);\r\n        }\r\n        this.loadProfile(myProfileData);\r\n        this._myBasesParent = board.getPlayerBase(this.playerNumber);\r\n        const numberOfPawns = newState.gameOptions.piecesPerPlayer;\r\n        // this.createBases(numberOfPawns);\r\n        this.createPawns(numberOfPawns);\r\n        \r\n        this._gameOptions = newState.gameOptions;\r\n        this.setDiceBgColor();\r\n        this.setBorderAndTimerColor();\r\n        this.outComesUIManager.setPlayer(this);\r\n    }\r\n\r\n    loadProfile(playerProfileData : BasePlayerData) {\r\n        if(this._isProfileInitialized) return;\r\n        if(playerProfileData == null) return;\r\n        let playerName = playerProfileData.name;\r\n        if(this._isLocal) {\r\n            playerName = \"You\"\r\n        }\r\n        this.playerName.string = this.truncateName(playerName, 8);\r\n        this.profileImageUrl = playerProfileData.avatar;\r\n        \r\n        this._isInitialized = true;\r\n        \r\n        this.loadProfileImage();\r\n        this.profileImage.node.on(Node.EventType.TOUCH_START, this.openProfile, this);\r\n    }\r\n\r\n    private loadProfileImage(): void {\r\n        if (!this.profileImageUrl) {\r\n            console.warn(\"[Player] No profile image URL provided\");\r\n            return;\r\n        }\r\n        \r\n        this.playerAvatar.setAvatarFromUrl(this.profileImageUrl);\r\n        // // Check if image is already cached\r\n        // const cachedTexture = assetManager.assets.get(this.profileImageUrl) as Texture2D;\r\n        // if (cachedTexture) {\r\n        //     const spriteFrame = new SpriteFrame();\r\n        //     spriteFrame.texture = cachedTexture;\r\n        //     this.profileImage.spriteFrame = spriteFrame;\r\n        //     return;\r\n        // }\r\n        \r\n        // // Load image from remote URL\r\n        // assetManager.loadRemote<ImageAsset>(\r\n        //     this.profileImageUrl, \r\n        //     { ext: '.png' },\r\n        //     (error, imageAsset) => {\r\n        //         if (error) {\r\n        //             console.error(`[Player] Failed to load profile image: ${error}`);\r\n        //             return;\r\n        //         }\r\n                \r\n        //         try {\r\n        //             const spriteFrame = new SpriteFrame();\r\n        //             const texture = new Texture2D();\r\n        //             texture.image = imageAsset;\r\n        //             spriteFrame.texture = texture;\r\n        //             this.profileImage.spriteFrame = spriteFrame;\r\n        //         } catch (e) {\r\n        //             console.error(`[Player] Error creating sprite frame: ${e}`);\r\n        //         }\r\n        //     }\r\n        // );\r\n    }\r\n\r\n    /*repostionOutComesUI(){\r\n        const namePlateUITransform = this.namePlateSprite.node.getComponent(UITransform);\r\n        const namePlateLayout = this.namePlateSprite.node.getComponent(Layout);\r\n        let width = namePlateLayout.cellSize.width;\r\n        console.log(\"nameplate cellsize : \", width);\r\n        let outComesPosition = this.outComesUIManager.node.position.clone();\r\n        console.log(\"nameplate width : \", namePlateUITransform.width);\r\n        outComesPosition.x = namePlateUITransform.width - 30;\r\n        let direction = Math.sign(this.diceRoot.scale.x);\r\n        outComesPosition.x *= direction;\r\n        console.log(\"Repositioning OutComes UI \", outComesPosition);\r\n        this.outComesUIManager.node.position = outComesPosition;\r\n\r\n    }*/\r\n    /*\r\n    repositionPiecesBase() {\r\n        //this.log(\"repositionPiecesBase \", this.playerNumber);\r\n        const namePlate = {\r\n            transform: this.namePlateSprite.node.getComponent(UITransform),\r\n            scale: this.namePlateSprite.node.worldScale.clone(),\r\n            position: this.namePlateSprite.node.worldPosition.clone()\r\n        };\r\n\r\n        const pawnOffset = PlayerAssets.instance.getPawnWidth() / 2;\r\n        const totalWidth = namePlate.transform.width * namePlate.scale.x;\r\n        const direction = Math.sign(this.diceRoot.scale.x);\r\n        namePlate.position.x += direction * (totalWidth + pawnOffset);\r\n        this.piecesBase.setWorldPosition(namePlate.position);\r\n    }\r\n*/\r\n    /*\r\n    ReArrangeBasesAfterMoving() {\r\n        const emptyBaseIndex = this.sortedBasesHorizontalPosition.findIndex(base => base.children.length === 0);\r\n        if (emptyBaseIndex === -1) return;\r\n\r\n        for (let i = emptyBaseIndex + 1; i < this.sortedBasesHorizontalPosition.length; i++) {\r\n            const currentBase = this.sortedBasesHorizontalPosition[i];\r\n            if (currentBase.children.length === 0) continue;\r\n\r\n            \r\n            const emptyBase = this.sortedBasesHorizontalPosition[emptyBaseIndex];\r\n            const emptyBasePosition = emptyBase.position.clone();\r\n            const currentBasePosition = currentBase.position.clone();\r\n            \r\n            currentBase.setPosition(emptyBasePosition);\r\n            emptyBase.setPosition(currentBasePosition);\r\n            \r\n            // Swap the bases in the sorted array\r\n            this.sortedBasesHorizontalPosition[emptyBaseIndex] = currentBase;\r\n            this.sortedBasesHorizontalPosition[i] = emptyBase;\r\n        }\r\n    }*/\r\n\r\n    createBases(count: number) {\r\n        console.log(\"[Player] Creating Bases for Player : \", this.playerNumber);\r\n        const pawnWidth = PlayerAssets.instance.getPawnWidth();\r\n        const gapBetweenBases = 0;\r\n        this.bases = Array.from({ length: count }, (_, i) => {\r\n            const base = instantiate(PlayerAssets.instance.basePrefab);\r\n            const x =  (pawnWidth + gapBetweenBases) * i;\r\n            \r\n            base.setParent(this._myBasesParent, true);\r\n            base.name = `Base${i}`;\r\n            base.setPosition(new Vec3(x, 0, 0));\r\n            \r\n            return base;\r\n        });\r\n        this.sortedBasesHorizontalPosition = this.bases.sort((a, b) => a.position.x - b.position.x);\r\n    }\r\n    createPawns(count : number){\r\n        console.log(\"[Player] Creating Pawns for Player : \", this.playerNumber);\r\n        // this.log(\"CREATING PAWNS FOR PLAYER \", this.playerNumber);\r\n        var pawnPrefab = PlayerAssets.instance.pawnPrefab;\r\n        for(let i=0; i<count; i++) {\r\n            this.log(\"CREATING PAWN \", i);\r\n            this.log(\"BASES : \", this.bases);\r\n            const pawn = instantiate(pawnPrefab);\r\n            pawn.setParent(this.piecesBase, true);\r\n            pawn.setPosition(new Vec3(0,0,0));\r\n            var piece = pawn.getComponent(Piece);\r\n            piece.Initialize(this.playerNumber, i, this);\r\n            this.pawns.push(piece);\r\n            Board.Instance.addPiece(piece);\r\n        }\r\n    }\r\n\r\n    onServerStateChange(newServerState: SNLRoomState) {\r\n        if(this._stateMachine == null) this._stateMachine = new PlayerStateMachine(this);\r\n        this._stateMachine.onServerStateChange(newServerState);\r\n    }\r\n\r\n    onReconnection(newServerState: SNLRoomState) {\r\n        this._stateMachine.onReconnection(newServerState);\r\n    }\r\n\r\n\r\n    isMyTurn(turnPlayerNumber : number) {\r\n        return this.playerNumber == turnPlayerNumber;\r\n    }\r\n\r\n    isAnyPieceSelected(){\r\n        return this._currentSelectedPieceNumber != -1;\r\n    }\r\n\r\n    truncateName(name: string, maxChars: number) {\r\n        //cut the name upto first space\r\n        let spaceIndex = name.indexOf(\" \");\r\n        if(spaceIndex != -1) {\r\n            name = name.substring(0, spaceIndex);\r\n        }\r\n        if(name.length > maxChars) {\r\n            return name.substring(0, maxChars) + \"..\";\r\n        }\r\n        return name;\r\n    }\r\n\r\n    setPlayerNumber(playerNumber: number) {\r\n        this.playerNumber = playerNumber;\r\n    }\r\n\r\n    enableName(enable: boolean) {\r\n        // this.playerName.node.active = enable;\r\n    }\r\n\r\n    arrowAnimation : Tween<Node> = null;\r\n    arrowPointToDiceAnimation(enable : boolean){\r\n        this.arrowAnimation?.stop();\r\n        console.log(\"arrowPointToDiceAnimation : \", enable);\r\n        if(enable){\r\n            console.log(\"Enabling Arrow\");\r\n            this.dicePointingArrow.active = true;\r\n            this.dicePointingArrow.setPosition(this.diceArrowInitialPosition);\r\n            this.arrowAnimation = tween(this.dicePointingArrow);\r\n            this.arrowAnimation.by(0.2, {position: new Vec3(-10, -0, 0)});\r\n            this.arrowAnimation.by(0.2, {position: new Vec3(10, 0, 0)});\r\n            this.arrowAnimation.union();\r\n            this.arrowAnimation.repeatForever();\r\n            this.arrowAnimation.start();\r\n        }\r\n        else{\r\n            console.log(\"Disabling Arrow\");\r\n            this.dicePointingArrow.active = false;\r\n            this.arrowAnimation.stop();\r\n        }\r\n    }\r\n\r\n    isFinished(): boolean {\r\n        const gameOptions = this._gameOptions;\r\n        for(let i=0; i<this.pawns.length; i++) {\r\n            if(this.pawns[i].pathNumber == Board.Instance.TotalPathCount(gameOptions)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    setDiceBgColor(){\r\n        this.diceBgSprite.color = PlayerAssets.instance.getDiceBgColor(this.playerNumber);\r\n    }\r\n\r\n    setBorderAndTimerColor(){\r\n        if (this.borderSprite) {\r\n            this.borderSprite.color = PlayerAssets.instance.getPawnColor(this.playerNumber);\r\n        }\r\n        // if(this.timerSprite) {\r\n        //     this.timerSprite.color = PlayerAssets.instance.getPawnColor(this.playerNumber);\r\n        // }\r\n    }\r\n\r\n    GetProfileSpriteFrame(): SpriteFrame {\r\n        return this.profileImage.spriteFrame;\r\n    }\r\n\r\n    openProfile() {\r\n        // console.log(\"Open Profile\");\r\n        let myProfileData = this._stateMachine.currentServerState.playersData.find(p => p.playerNumber == this.playerNumber);\r\n        let userId = myProfileData.userId;\r\n        console.log(\"Opening Profile of User : \", userId);\r\n    }\r\n}","import { SpriteFrame } from 'cc';\r\nimport { Prefab } from 'cc';\r\nimport { _decorator, Component, Node } from 'cc';\r\nimport { SNLTileType } from './type/SNLTileType';\r\nimport { Color } from 'cc';\r\nimport { CCFloat } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('PlayerAssets')\r\n//TODO: Add the player assets here\r\nexport class PlayerAssets extends Component {\r\n    static instance: PlayerAssets = null;\r\n\r\n    @property({type: SpriteFrame})\r\n    pawnSprites : SpriteFrame[] = [];\r\n    @property({type: Color})\r\n    pawnColors : Color[] = [];\r\n    @property({type: Color})\r\n    DiceBgColors : Color[] = [];\r\n    @property({type: Prefab})\r\n    pawnPrefab : Prefab = null;\r\n    @property({type: CCFloat})\r\n    pawnWidth : number = 50;\r\n    @property({type: Prefab})\r\n    basePrefab : Prefab = null;\r\n    @property({type: SpriteFrame})\r\n    diceOutComeSprites : SpriteFrame[] = [];\r\n    @property({type: SpriteFrame})\r\n    diceOutComesStackSprites : SpriteFrame[] = [];\r\n    @property({type: SpriteFrame})\r\n    goldenDiceOutComeSprite : SpriteFrame = null;\r\n    @property({type: Prefab})\r\n    moveOptionsUI : Prefab = null;\r\n    @property({type : [SpriteFrame]})\r\n    powerUpSprites : SpriteFrame[] = [];\r\n    @property({type : Prefab})\r\n    powerUpPrefab : Prefab = null;\r\n    @property({type : [Prefab]})\r\n    snakePrefabs : Prefab[] = [];\r\n    @property({type : [Prefab]})\r\n    ladderPrefabs : Prefab[] = [];\r\n\r\n    protected onLoad(): void {\r\n        PlayerAssets.instance = this;\r\n    }\r\n\r\n    public getPawnSprite(playerNumber: number) {\r\n        // this.log(\"PLAYER PAWN SPRITE: \" + playerNumber);\r\n        return this.pawnSprites[playerNumber];\r\n    }\r\n\r\n    // public getProfilePicHolderSprite(playerNumber: number) {\r\n    //     return this.profilePicHolderSprites[playerNumber];\r\n    // }\r\n    // public getProfileNamePlateSprite(playerNumber: number) {\r\n    //     return this.profileNamePlateSprite[playerNumber];\r\n    // }\r\n        // public getHomeBaseSprite(playerNumber: number) {\r\n        //     return this.homeBaseSprite[playerNumber];\r\n        // }\r\n    public getDiceOutComeSprite(outCome: number) {\r\n        return this.diceOutComeSprites[outCome];\r\n    }\r\n\r\n    public getDiceOutComesStackSprite(outCome: number) {\r\n        return this.diceOutComesStackSprites[outCome];\r\n    }\r\n\r\n    public getGoldenDiceOutComeSprite() {\r\n        return this.goldenDiceOutComeSprite;\r\n    }\r\n\r\n    public getPawnWidth() : number {\r\n        return this.pawnWidth;\r\n    }\r\n\r\n    public getPowerUpSprite(powerUpType: number) {\r\n        let isShield = powerUpType & SNLTileType.SHIELD;\r\n        let isRocket = powerUpType & SNLTileType.ROCKET;\r\n\r\n        if(isShield) return this.powerUpSprites[0];\r\n        if(isRocket) return this.powerUpSprites[1];\r\n        \r\n    }\r\n\r\n    getPawnColor(playerNumber: number) : Color {\r\n        return this.pawnColors[playerNumber];\r\n    }\r\n\r\n    getDiceBgColor(playerNumber: number) : Color {\r\n        return Color.WHITE.clone();//this.DiceBgColors[playerNumber];\r\n    }\r\n}\r\n\r\n\r\n","import { Color } from 'cc';\r\nimport { _decorator, Component, Node, Sprite, SpriteFrame, Texture2D, ImageAsset, assetManager } from 'cc';\r\n\r\nconst { ccclass, property } = _decorator;\r\n\r\n/**\r\n * PlayerAvatar component that handles player avatar display and interaction\r\n */\r\n@ccclass('PlayerAvatar')\r\nexport class PlayerAvatar extends Component {\r\n    // UI Components\r\n    @property({ type: Sprite, tooltip: \"Player Avatar\" })\r\n    readonly playerAvatar: Sprite = null!;\r\n\r\n    @property({ type: Sprite, tooltip: \"Player Avatar Outline\" })\r\n    readonly outline: Sprite = null!;\r\n\r\n    // State\r\n    private enableOnClick: boolean = false;\r\n    public userId: string = \"\";\r\n\r\n    /**\r\n     * Initialize the avatar with user data\r\n     */\r\n    public initialize(enableOnClick: boolean, userId: string): void {\r\n        this.enableOnClick = enableOnClick;\r\n        this.userId = userId;\r\n    }\r\n\r\n    /**\r\n     * Lifecycle method triggered when component is enabled\r\n     */\r\n    protected onEnable(): void {\r\n        this.registerTouchEvents();\r\n    }\r\n\r\n    /**\r\n     * Lifecycle method triggered when component is disabled\r\n     */\r\n    protected onDisable(): void {\r\n        this.unregisterTouchEvents();\r\n    }\r\n\r\n    /**\r\n     * Lifecycle method called when component starts\r\n     */\r\n    start() {\r\n        // Initialization logic if needed\r\n    }\r\n\r\n    /**\r\n     * Lifecycle method called every frame\r\n     */\r\n    update(deltaTime: number) {\r\n        // Frame update logic if needed\r\n    }\r\n\r\n    /**\r\n     * Register touch event listeners\r\n     */\r\n    private registerTouchEvents(): void {\r\n        this.playerAvatar.node.on(Node.EventType.TOUCH_START, this.handleTouchStart, this);\r\n    }\r\n\r\n    /**\r\n     * Unregister touch event listeners\r\n     */\r\n    private unregisterTouchEvents(): void {\r\n        this.playerAvatar.node.off(Node.EventType.TOUCH_START, this.handleTouchStart, this);\r\n    }\r\n\r\n    /**\r\n     * Handle touch start event\r\n     */\r\n    private handleTouchStart(): void {\r\n        if (!this.enableOnClick) return;\r\n        // Add touch handling logic here\r\n    }\r\n\r\n    /**\r\n     * Set outline visibility\r\n     */\r\n    public setOutline(outline: boolean): void {\r\n        this.outline.enabled = outline;\r\n    }\r\n\r\n    public setOutlineColor(color: Color): void {\r\n        this.outline.color = color;\r\n    }\r\n\r\n    /**\r\n     * Set avatar sprite from a URL\r\n     */\r\n    public setAvatarFromUrl(url: string): void {\r\n        console.log(\"Setting avatar from url: \", url);\r\n        const cachedTexture = this.getFromCache(url);\r\n        if (cachedTexture) {\r\n            this.createSpriteFrameFromTexture(cachedTexture);\r\n            return;\r\n        }\r\n        \r\n        this.loadRemoteImage(url);\r\n    }\r\n\r\n    /**\r\n     * Set avatar sprite from a SpriteFrame\r\n     */\r\n    public setAvatarFromSpriteFrame(spriteFrame: SpriteFrame): void {\r\n        this.playerAvatar.spriteFrame = spriteFrame;\r\n    }\r\n\r\n    /**\r\n     * Get texture from cache if available\r\n     */\r\n    private getFromCache(url: string): Texture2D | null {\r\n        const cachedTexture = assetManager.assets.get(url) as Texture2D;\r\n        return cachedTexture || null;\r\n    }\r\n\r\n    /**\r\n     * Create sprite frame from texture and apply to avatar\r\n     */\r\n    private createSpriteFrameFromTexture(texture: Texture2D): void {\r\n        const spriteFrame = new SpriteFrame();\r\n        spriteFrame.texture = texture;\r\n        this.playerAvatar.spriteFrame = spriteFrame;\r\n    }\r\n\r\n    /**\r\n     * Load image from remote URL\r\n     */\r\n    private loadRemoteImage(url: string): void {\r\n        assetManager.loadRemote<ImageAsset>(\r\n            url, \r\n            { ext: '.png' },\r\n            (error, imageAsset) => {\r\n                if (error) {\r\n                    console.error(`[Player] Failed to load profile image: ${JSON.stringify(error)}`);\r\n                    if (window.ReactNativeWebView) {\r\n                        window.ReactNativeWebView.postMessage(JSON.stringify({ message: \"player_avatar_load_failed\", data: { userId: this.userId, url: url, errorName: error.name, errorMessage: error.message, errorStack: error.stack } }));\r\n                    }\r\n                    return;\r\n                }\r\n                \r\n                try {\r\n                    const spriteFrame = new SpriteFrame();\r\n                    const texture = new Texture2D();\r\n                    texture.image = imageAsset;\r\n                    spriteFrame.texture = texture;\r\n                    this.playerAvatar.spriteFrame = spriteFrame;\r\n                } catch (e) {\r\n                    console.error(`[Player] Error creating sprite frame: ${e}`);\r\n                    if (window.ReactNativeWebView) {\r\n                        window.ReactNativeWebView.postMessage(JSON.stringify({ message: \"player_sprite_frame_creation_failed\", data: { userId: this.userId, url: url, error: e } }));\r\n                    }\r\n                }\r\n            }\r\n        );\r\n    }\r\n}\r\n","export abstract class PlayerBaseState {\r\n    abstract enterState(): void;\r\n    abstract updateState(deltaTime: number): void;\r\n    abstract exitState(): void;\r\n}","import { Node } from 'cc';\r\nimport { Piece } from './Piece';\r\nimport { Player } from './Player';\r\nimport { EventTarget } from 'cc';\r\n\r\nexport const PlayerServiceEvents = new EventTarget();\r\n\r\nexport class PlayerService {\r\n    private static _instance: PlayerService = null;\r\n    \r\n    public static get instance(): PlayerService {\r\n        if (!this._instance) {\r\n            this._instance = new PlayerService();\r\n        }\r\n        return this._instance;\r\n    }\r\n    \r\n    private _players: Player[] = [];\r\n    private _localPlayer: Player = null;\r\n    private _myPlayerNumber: number = 0;\r\n\r\n    private constructor() {}\r\n\r\n    public registerPlayer(player: Player, isLocal: boolean = false): void {\r\n        this._players.push(player);\r\n        if (isLocal) {\r\n            this._localPlayer = player;\r\n        }\r\n    }\r\n\r\n    public setMyPlayerNumber(playerNumber: number): void {\r\n        this._myPlayerNumber = playerNumber;\r\n    }\r\n\r\n    public getMyPlayerNumber(): number {\r\n        return this._myPlayerNumber;\r\n    }\r\n\r\n    public getPlayer(playerNumber: number): Player {\r\n        if (playerNumber === this._myPlayerNumber && this._localPlayer) {\r\n            return this._localPlayer;\r\n        }\r\n        return this._players.find(p => p.playerNumber === playerNumber);\r\n    }\r\n\r\n    public getPlayerBase(playerNumber: number): Node {\r\n        const player = this.getPlayer(playerNumber);\r\n        return player ? player.piecesBase : null;\r\n    }\r\n\r\n    public getPlayerPiece(playerNumber: number, pieceIndex: number): Piece {\r\n        const player = this.getPlayer(playerNumber);\r\n        return player && player.pawns.length > pieceIndex ? player.pawns[pieceIndex] : null;\r\n    }\r\n\r\n    public clearPlayers(): void {\r\n        this._players = [];\r\n        this._localPlayer = null;\r\n    }\r\n} ","import { UIManager } from \"../../UIPack/Scripts/UIManager\";\r\nimport { SNLGameState } from \"../type/SNLGameState\";\r\nimport { GameMessageType } from \"../type/GameMessageType\";  \r\nimport { SNLRoomState } from \"../schema/SNLRoomState\";\r\nimport { Player, PlayerState } from \"../Player\";\r\nimport { IdleState } from \"./IdleState\";\r\nimport { MovePieceState } from \"./MovePieceState\";\r\nimport { PlayerBaseState } from \"./PlayerBaseState\";\r\nimport { RollingState } from \"./RollingState\";\r\nimport { RoomStatus } from \"db://assets/SNLGame/pulse/types/RoomTypes\";\r\n\r\nexport class PlayerStateMachine {\r\n    _currentState : PlayerBaseState;\r\n    idleState : IdleState;\r\n    rollingState : RollingState;\r\n    movePieceState : MovePieceState;\r\n    player : Player;\r\n    currentServerState : SNLRoomState;\r\n    currentTurnPlayerNumber : number = -1;\r\n\r\n    constructor(player: Player) {\r\n        this.player = player;\r\n        this.idleState = new IdleState(this);\r\n        this.rollingState = new RollingState(this);\r\n        this.movePieceState = new MovePieceState(this);\r\n        this._currentState = this.idleState;\r\n    }\r\n\r\n    updateState(deltaTime: number) {\r\n        if(this._currentState == null) {\r\n            return;\r\n        }\r\n        this._currentState.updateState(deltaTime);\r\n    }\r\n\r\n    changeState(state: PlayerBaseState) {\r\n        this._currentState.exitState();\r\n        this._currentState = state;\r\n        this._currentState.enterState();\r\n    }\r\n\r\n    getPlayerNumber() : number {\r\n        return this.player.playerNumber;\r\n    }\r\n\r\n    onServerStateChange(newServerState: SNLRoomState) {\r\n        this.currentServerState = newServerState;\r\n        //TODO: remove this if block after checking\r\n        if(this.currentTurnPlayerNumber != newServerState.turnPlayerNumber) {\r\n            this.currentTurnPlayerNumber = newServerState.turnPlayerNumber;\r\n            if(this.player.isMyTurn(newServerState.turnPlayerNumber)){\r\n                console.log(\"====================================\");\r\n                console.log(\"Player Turn : \", this.currentTurnPlayerNumber);\r\n            }\r\n        }\r\n        if(this.currentServerState.currentRoomStatus !== RoomStatus.END_GAME) {\r\n            this.checkAndUpdateBotScreen();\r\n        }\r\n        if(!this.player.isMyTurn(newServerState.turnPlayerNumber)) {\r\n            if(this._currentState != this.idleState) {\r\n                this.changeState(this.idleState);\r\n            }\r\n            return;\r\n        };\r\n        \r\n        if(newServerState.inputPayload.inputType == GameMessageType.NONE) return;\r\n\r\n        switch (newServerState.inputPayload.inputType) {\r\n            case GameMessageType.SET_STATE:\r\n                this.onSetState(newServerState);\r\n                break;\r\n            case GameMessageType.DICE_OUTCOME:\r\n                if(this._currentState == this.rollingState){\r\n                    this.rollingState.onDiceOutCome()\r\n                }\r\n                break;\r\n            case GameMessageType.MOVE_PIECE:\r\n                if(this._currentState == this.movePieceState){\r\n                    this.movePieceState.onMovePiece();\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    onReconnection(newServerState: SNLRoomState) {\r\n        this.currentServerState = newServerState;\r\n        this.rollingState.exitState();\r\n        this.movePieceState.exitState();\r\n        if(!this.player.isMyTurn(newServerState.turnPlayerNumber)) {\r\n            this.changeState(this.idleState);\r\n            return;\r\n        };\r\n        let currentPlayerData = newServerState.playersData[this.player.playerNumber];\r\n        this.player.outComesUIManager.reset(currentPlayerData.rollsList);\r\n        if(newServerState.currentGameState == SNLGameState.ROLLING) {\r\n            this._currentState = this.rollingState;\r\n            this._currentState.enterState();\r\n            this.player.timer.setCurrentTime(newServerState.timer);\r\n        }\r\n        else if(newServerState.currentGameState == SNLGameState.MOVING_PIECE) {\r\n            this._currentState = this.movePieceState;\r\n            this._currentState.enterState();\r\n            this.player.timer.setCurrentTime(newServerState.timer);\r\n        }\r\n    }\r\n\r\n    onSetState(newServerState: SNLRoomState) {\r\n        let currentPlayerData = newServerState.playersData[this.player.playerNumber];\r\n        this.player.outComesUIManager.reset(currentPlayerData.rollsList);\r\n        if(newServerState.currentGameState == SNLGameState.ROLLING) {\r\n            this.changeState(this.rollingState);\r\n        }\r\n        else if(newServerState.currentGameState == SNLGameState.MOVING_PIECE) {\r\n            this.changeState(this.movePieceState);\r\n        }\r\n    }\r\n\r\n    checkAndUpdateBotScreen() {\r\n        if(!this.player._isLocal)return;\r\n        if(this.currentServerState.playersData[this.player.playerNumber].isKickedOut) {\r\n            UIManager.instance.OpenMenu(\"KickedOutScreen\");\r\n        }\r\n        else if(this.currentServerState.playersData[this.player.playerNumber].isBot) {\r\n            UIManager.instance.OpenMenu(\"BotMadeMoveScreen\");\r\n        }\r\n    }\r\n}","/**\r\n * Enum for different player types\r\n */\r\nexport enum PlayerType {\r\n    HUMAN,\r\n    BOT,\r\n    SPECTATOR\r\n}\r\n/**\r\n * Interface for basic player data that can be extended by specific games\r\n */\r\nexport interface IBasePlayerData {\r\n    id: string;\r\n    name: string;\r\n    avatar?: string;\r\n    playerNumber: number;\r\n    type: PlayerType;\r\n    sessionId: string;\r\n    isOnline: boolean;\r\n    isConnected: boolean;\r\n    isReady: boolean;\r\n    score: number;\r\n}\r\n\r\n/**\r\n * Interface for player connection events\r\n */\r\nexport interface IPlayerConnectionEvent {\r\n    playerId: string;\r\n    isConnected: boolean;\r\n    timestamp: number;\r\n} ","import { _decorator, Component, instantiate, Node, Prefab } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('Pooler')\r\nexport class Pooler {\r\n    poolName : string = \"NodePool\";\r\n    pooledObjects : Node[] = [];\r\n    objectPrefab : Prefab = null;\r\n    pooledObjectCount : number = 0;\r\n    private tempNode : Node = null;\r\n    constructor(poolName : string) {\r\n        this.poolName = poolName;\r\n    }\r\n\r\n    getObject() : Node {\r\n        if(this.pooledObjects.length > 0) {\r\n            this.tempNode = this.pooledObjects.pop();\r\n            this.tempNode.active = true;\r\n            // console.log(\"Returning object from pool \" + this.poolName);\r\n            return this.tempNode;\r\n        }\r\n        return this.createObject()\r\n    }\r\n\r\n    returnObject(obj : Node) {\r\n        this.pooledObjects.push(obj);\r\n        obj.active = false;\r\n    }\r\n\r\n    createObject() : Node {\r\n        this.pooledObjectCount++;\r\n        let obj = instantiate(this.objectPrefab);\r\n        obj.name = this.poolName + \" \" + this.pooledObjectCount;\r\n        // console.log(\"Creating new object for pool \" + this.poolName);\r\n        return obj;\r\n    }\r\n}\r\n\r\n\r\n","import { _decorator, Component, Node, Prefab } from 'cc';\r\nimport { Pooler } from './Pooler';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('PoolManager')\r\nexport class PoolManager extends Component {\r\n    \r\n    static instance : PoolManager = null;\r\n    pools : Pooler[] = [];\r\n\r\n    protected onLoad(): void {\r\n        PoolManager.instance = this;\r\n    }\r\n    \r\n    createPool(prefab : Prefab) {\r\n        let pool = new Pooler(prefab.name);\r\n        pool.objectPrefab = prefab;\r\n        this.pools.push(pool);\r\n    }\r\n    getObjectFromPool(prefab : Prefab) : Node {\r\n        var pool = this.getPool(prefab.name);\r\n        if(pool != null) {\r\n            return pool.getObject();\r\n        }\r\n        this.createPool(prefab);\r\n        return this.pools[this.pools.length - 1].getObject();\r\n    }\r\n\r\n    getPool(poolName : string) : Pooler {\r\n        for(let i = 0; i < this.pools.length; i++) {\r\n            if(this.pools[i].poolName == poolName) {\r\n                return this.pools[i];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    returnObjectToPool(obj : Node) {\r\n        if(!obj.active)return;\r\n        var poolName = obj.name.split(\" \")[0];\r\n        var pool = this.getPool(poolName);\r\n        if(pool != null) {\r\n            pool.returnObject(obj);\r\n        }\r\n        else {\r\n            console.warn(\"No pool found for object \" + obj.name);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n","import { SpriteFrame } from 'cc';\r\nimport { _decorator, Component, Node } from 'cc';\r\nimport { Sprite } from 'cc';\r\nimport { PlayerAssets } from './PlayerAssets';\r\nimport { Tween } from 'cc';\r\nimport { tween } from 'cc';\r\nimport { Color } from 'cc';\r\nimport { Prefab } from 'cc';\r\nimport { instantiate } from 'cc';\r\nimport { ParticleSystem2D } from 'cc';\r\nimport { Vec2 } from 'cc';\r\nimport { Vec3 } from 'cc';\r\nimport { Animation } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('PowerUp')\r\nexport class PowerUp extends Component {\r\n    @property({ type: Sprite })\r\n    sprite : Sprite = null;\r\n    pathNumber : number = 0;\r\n    powerupType : number = 0;\r\n    @property({ type: Animation })\r\n    animation : Animation = null;\r\n\r\n    start() {\r\n        this.playIdleAnimation();\r\n    }\r\n    setPathNumber(pathNumber: number) {\r\n        this.pathNumber = pathNumber;\r\n    }\r\n\r\n    setPowerUpType(powerupType: number) {\r\n        this.powerupType = powerupType;\r\n        this.sprite.spriteFrame = PlayerAssets.instance.getPowerUpSprite(powerupType);\r\n    }\r\n\r\n    blinkWithRedColor() {\r\n        let blinkTween = tween(this.sprite)\r\n        .to(0.2, { color: Color.RED },\r\n            {\r\n                onUpdate(target : Sprite, ratio) {\r\n                    target.color = Color.RED;\r\n                },\r\n            }\r\n        )\r\n        .to(0.2, { color: Color.WHITE },\r\n            {\r\n                onUpdate(target : Sprite, ratio) {\r\n                    target.color = Color.WHITE;\r\n                },\r\n            }\r\n        )\r\n        .union()\r\n        .repeatForever()\r\n        .start();\r\n    }\r\n\r\n\r\n    playIdleAnimation() {\r\n        let randomStartTime = Math.random() * 2000;\r\n        if(this.animation == null){\r\n            this.animation = this.getComponent(Animation);\r\n        }\r\n        setTimeout(() => {\r\n            this.animation?.play();\r\n        }, randomStartTime);\r\n    }\r\n\r\n}\r\n\r\n\r\n","import { _decorator, Component, Label, Node, Tween, tween, Vec3 } from 'cc';\r\nimport { Menu } from './Menu';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('ReconnectingScreen')\r\nexport class ReconnectingScreen extends Menu {\r\n    @property({ type: Node })\r\n    public spinner: Node = null;\r\n    _spinnerTween: Tween<Node> = null;\r\n    protected onLoad(): void {\r\n        super.onLoad();\r\n        \r\n    }\r\n\r\n    protected onDestroy(): void {\r\n    }\r\n\r\n    public Open(): void {\r\n        super.Open();\r\n        this.startSpinner();\r\n    }\r\n    public Close(): void {\r\n        super.Close();\r\n        this.stopSpinner();\r\n    } \r\n    startSpinner() {\r\n        this._spinnerTween = tween(this.spinner)\r\n        .repeatForever(\r\n            tween()\r\n                .by(1, { angle: 360 })\r\n        ).start();\r\n    }\r\n    stopSpinner() {\r\n        this._spinnerTween?.stop();\r\n        this._spinnerTween = null;\r\n    }\r\n    public initHandTween() {\r\n\r\n    }\r\n    \r\n    initialization() {\r\n        this.initHandTween();\r\n    }\r\n}\r\n\r\n","import { Input, Node } from \"cc\";\r\nimport { Player, PlayerState } from \"../Player\";\r\nimport {PlayerBaseState } from \"./PlayerBaseState\";\r\nimport { PlayerStateMachine } from \"./PlayerStateMachine\";\r\nimport { GameMessageType } from \"../type/GameMessageType\";\r\nimport { AudioManager } from \"../AudioManager\";\r\nimport { GameManager } from \"../GameManager\";\r\nimport { NetworkManager } from \"../../pulse/networking/NetworkManager\";\r\n\r\nexport class RollingState extends PlayerBaseState{\r\n    stateMachine: PlayerStateMachine\r\n    _stateName : PlayerState = PlayerState.ROLLING;\r\n    player: Player;\r\n    currentDiceOutcome: number = 0;\r\n    goldenDiceOutcomes: number = 0;\r\n    \r\n    constructor(stateMachine: PlayerStateMachine) {\r\n        super();\r\n        this.stateMachine = stateMachine;\r\n        this.player = this.stateMachine.player;\r\n        this.player.dice.onDiceRollDone = this.onDiceRollDone.bind(this);\r\n    }\r\n\r\n    enterState(): void {\r\n        console.log(\"Entered Rolling State\");\r\n        this.player.diceRoot.active = true;\r\n        this.player.timer.stop();\r\n        this.player.outComesUIManager.enableOutComesBg(true);\r\n        this.player.timer.setTotalTime(this.stateMachine.currentServerState.gameOptions.diceRollWaitTime);\r\n        this.player.timer.run();\r\n        this.player._pawnHandler.Reset(this.stateMachine.currentServerState);\r\n        this.player.dice.reset();\r\n        const currentPlayerData = this.stateMachine.currentServerState.playersData[this.player.playerNumber];\r\n        this.player.outComesUIManager.reset(currentPlayerData.rollsList);\r\n        if(this.player._isLocal){\r\n            console.log(\"Setting Local Player Dice Click\");\r\n            this.player.dice.node.on(Node.EventType.TOUCH_START, this.OnDiceClick, this);\r\n            this.player.arrowPointToDiceAnimation(true);\r\n            GameManager.Instance.miloSDK.vibratePreset('light');\r\n        }\r\n    }\r\n    \r\n    updateState(deltaTime: number): void {      \r\n    }\r\n\r\n    exitState(): void {\r\n        this.player.diceRoot.active = true;\r\n        this.player.timer.stop();\r\n        console.log(\"Exited Rolling State local \", this.player._isLocal);\r\n        // const rollsList = this.stateMachine.currentServerState.snlPlayersData[this.player.playerNumber].rollsList;\r\n        // this.player.outComesUIManager.reset(rollsList);\r\n        if(this.player._isLocal){\r\n            this.player.dice.node.off(Input.EventType.TOUCH_START, this.OnDiceClick, this);\r\n        }\r\n    }\r\n\r\n    OnDiceClick(event: any) {\r\n        console.log(\"OnDiceClick\");\r\n        if(!this.player._isLocal) return;\r\n        console.log(\"OnDiceClick 2\");\r\n        //switch off continues dice clicks spamming::\r\n        this.player.dice.node.off(Input.EventType.TOUCH_START, this.OnDiceClick, this);\r\n        GameManager.Instance.setInput(\"DiceRoll\");\r\n        this.player.arrowPointToDiceAnimation(false);\r\n        console.log(\"Clicked on Dice\")\r\n        NetworkManager.Instance.CurrentRoom.send(GameMessageType.CLIENT_DICE_ROLL, JSON.stringify({}));\r\n    }\r\n\r\n    onDiceRollDone() {\r\n        this.player.outComesUIManager.addOutCome(this.currentDiceOutcome);\r\n        NetworkManager.Instance.CurrentRoom.send(GameMessageType.ROLLING_ACK, JSON.stringify({}));\r\n        console.log(\"Roll Ack Sent\");\r\n    }\r\n    \r\n    onDiceOutCome() {\r\n        const json = JSON.parse(this.stateMachine.currentServerState.inputPayload.inputValue);\r\n        this.player.dice.rollDice(json.value);\r\n        this.currentDiceOutcome = json.value;\r\n        console.log(\"Rolled : \", json.value);\r\n        this.player.timer.stop();\r\n    }\r\n\r\n    reset(){\r\n        this.exitState();\r\n    }\r\n    \r\n}","/**\r\n * Enum for different room statuses\r\n */\r\nexport enum RoomStatus {\r\n    NONE,\r\n    WAITING_FOR_PLAYERS,\r\n    COUNTDOWN,\r\n    GAME_SIMULATION,\r\n    END_GAME,\r\n    KICKED_OUT\r\n}\r\n\r\n/**\r\n * Interface for basic room settings that can be extended by specific games\r\n */\r\nexport interface IBaseRoomSettings {\r\n    maxPlayers: number;\r\n    minPlayers: number;\r\n    maxClients: number;\r\n    countdownTimeInSeconds: number;\r\n    allowLateJoin: boolean;\r\n    maxReconnectionAttempts: number;\r\n    reconnectionAttemptInterval: number;\r\n    reconnectionTime: number;\r\n    gameFPS: number;\r\n    serverFPS: number;\r\n    patchRate: number;\r\n}\r\n\r\n\r\n/**\r\n * Interface for room creation options\r\n */\r\nexport interface IRoomCreationOptions {\r\n    roomId?: string;\r\n    roomSettings?: Partial<IBaseRoomSettings>;\r\n    players?: any[];\r\n    gamingEnv?: string;\r\n}","import { _decorator, Component, Node } from 'cc';\r\nimport { Menu } from '../UIPack/Scripts/Menu';\r\nimport { PlayerAvatar } from '../pulse/pb-cocos-utils/PlayerAvatar';\r\nimport { Label } from 'cc';\r\nimport { GameManager } from './GameManager';\r\nimport { SNLGameHandler } from './SNLGameHandler';\r\nimport { ServerRoomStateChangeEvent } from '../pulse/networking/NetworkManager';\r\nimport { NetworkEvents } from '../pulse/types/NetworkTypes';\r\nimport { SNLRoomState } from './schema/SNLRoomState';\r\nimport { HostChangeEvent } from '../milo-game-sdk/src/core/MiloGameSDK';\r\nimport { InternalGameSdkEvents } from '../milo-game-sdk/src/events';\r\nconst { ccclass, property } = _decorator;\r\n\r\n/**\r\n * RoundCompleted Menu - Displays end-of-game statistics and results\r\n * \r\n * This menu shows:\r\n * - The winning player (first to finish)\r\n * - The player with the most deaths\r\n * - The player with the most ladder climbs\r\n * - Associated statistics counts\r\n */\r\n@ccclass('RoundCompleted')\r\nexport class RoundCompleted extends Menu {\r\n    /** Avatar display for the winning player */\r\n    @property({type: PlayerAvatar})\r\n    winnerAvatar: PlayerAvatar = null;\r\n\r\n    /** Text label showing the winning player's name */\r\n    @property({type: Label})\r\n    winnerName: Label = null;\r\n\r\n    /** Avatar display for the player with most deaths */\r\n    @property({type: PlayerAvatar})\r\n    mostDeathsPlayerAvatar: PlayerAvatar = null;\r\n\r\n    /** Text label showing the name of player with most deaths */\r\n    @property({type: Label})\r\n    mostDeathsPlayerName: Label = null;\r\n\r\n    /** Avatar display for the player with most ladder climbs */\r\n    @property({type: PlayerAvatar})\r\n    mostLadderClimbPlayerAvatar: PlayerAvatar = null;\r\n\r\n    /** Text label showing the name of player with most ladder climbs */\r\n    @property({type: Label})\r\n    mostLadderClimbPlayerName: Label = null;\r\n\r\n    /** Text label displaying the death count for the most deaths player */\r\n    @property({type: Label})\r\n    deathsCountLabel: Label = null;\r\n\r\n    /** Text label displaying the ladder climb count for the most ladder climbs player */\r\n    @property({type: Label})\r\n    ladderClimbCountLabel: Label = null;\r\n\r\n    @property({type: Node})\r\n    actionsButtonContainer: Node = null;\r\n\r\n    @property({type: Node})\r\n    infoContainer: Node = null;\r\n\r\n    _shouldShowThisScreen: boolean = false;\r\n    _optionsInitialized : boolean = false;\r\n\r\n    protected onLoad(): void {\r\n        super.onLoad();\r\n        ServerRoomStateChangeEvent.on(NetworkEvents.SERVER_ROOM_STATE_CHANGE, this.ServerStateChanged, this);\r\n        HostChangeEvent.on(InternalGameSdkEvents.HOST_CHANGED, this.onHostChanged, this);\r\n    }\r\n\r\n    protected onDestroy(): void {\r\n        ServerRoomStateChangeEvent.off(NetworkEvents.SERVER_ROOM_STATE_CHANGE, this.ServerStateChanged, this);\r\n        HostChangeEvent.off(InternalGameSdkEvents.HOST_CHANGED, this.onHostChanged, this);\r\n    }\r\n\r\n    ServerStateChanged(newServerState: SNLRoomState) {\r\n        if(this._optionsInitialized) return;\r\n        const state = new SNLRoomState();\r\n        if(state.gameOptions) {\r\n            this._shouldShowThisScreen = state.gameOptions.show_result_screen;\r\n            this._optionsInitialized = true;\r\n        }\r\n        state.copyFrom(newServerState);\r\n    }\r\n\r\n    public Open(): void {\r\n        if(!this._shouldShowThisScreen) {\r\n            return;\r\n        }\r\n        super.Open();\r\n        this.initialize();\r\n    }\r\n\r\n    public Close(): void {\r\n        super.Close();\r\n    }\r\n\r\n    /**\r\n     * Initializes the round completion screen with game statistics\r\n     * \r\n     * This method:\r\n     * 1. Finds the winning player (first to reach finish position 1)\r\n     * 2. Gets the player with most deaths using SNLGameHandler\r\n     * 3. Gets the player with most ladder climbs using SNLGameHandler\r\n     * 4. Updates all UI elements with player avatars, names, and statistics\r\n     */\r\n    initialize(){\r\n        super.initialize();\r\n        // Find the winning player by checking who has finishPosition == 1\r\n        const winningPlayerNumber = GameManager.Instance._serverStateCopy.playersData.findIndex(player => player.finishPosition == 1);\r\n        if (winningPlayerNumber == -1) {\r\n            console.error(\"no winning player\");\r\n            return;\r\n        }\r\n\r\n        // Get the winning player object and update winner UI\r\n        const winningPlayer = SNLGameHandler.Instance.getPlayer(winningPlayerNumber);\r\n        this.winnerAvatar.setAvatarFromSpriteFrame(winningPlayer.GetProfileSpriteFrame());\r\n        this.winnerName.string = winningPlayer.playerData.name;\r\n\r\n        // Get and display the player with most deaths\r\n        const mostDeathsPlayer = SNLGameHandler.Instance.getMostDeathsPlayer();\r\n        this.mostDeathsPlayerAvatar.setAvatarFromSpriteFrame(mostDeathsPlayer.GetProfileSpriteFrame());\r\n        this.mostDeathsPlayerName.string = mostDeathsPlayer.playerName.string;\r\n\r\n        // Get and display the player with most ladder climbs\r\n        const mostLadderClimbPlayer = SNLGameHandler.Instance.getMostLadderClimbsPlayer();\r\n        this.mostLadderClimbPlayerAvatar.setAvatarFromSpriteFrame(mostLadderClimbPlayer.GetProfileSpriteFrame());\r\n        this.mostLadderClimbPlayerName.string = mostLadderClimbPlayer.playerName.string;\r\n\r\n        // Display the actual statistics counts\r\n        this.deathsCountLabel.string = `Most Deaths: ${mostDeathsPlayer.playerData.deathsCount}`;\r\n        this.ladderClimbCountLabel.string = `Most Ladders: ${mostLadderClimbPlayer.playerData.ladderClimbCount}`;\r\n\r\n        this.updateHostUI();\r\n    }\r\n\r\n    /**\r\n     * Updates the host-specific UI elements based on current host status\r\n     */\r\n    private updateHostUI(): void {\r\n        const isHost = SNLGameHandler.Instance.isLocalUserHost();\r\n        const hostPlayer = SNLGameHandler.Instance.getHostPlayer();\r\n        \r\n        if(isHost) {\r\n            if(hostPlayer) {\r\n                this.infoContainer.active = false;\r\n                this.actionsButtonContainer.active = true;\r\n            }\r\n        } else {\r\n            if(hostPlayer) {\r\n                this.actionsButtonContainer.active = false;\r\n                const label = this.infoContainer.getComponent(Label);\r\n                label.string = `Ask ${hostPlayer.playerData.name}(Host) to play again or change game`;\r\n                this.infoContainer.active = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles host change events and updates UI if menu is open\r\n     */\r\n    private onHostChanged(data: { oldHostId: string | null, newHostId: string }): void {\r\n        console.log(\"RoundCompleted: Host changed from\", data.oldHostId, \"to\", data.newHostId);\r\n        \r\n        // Only update if the menu is currently open\r\n        if (this.node.active) {\r\n            this.updateHostUI();\r\n        }\r\n    }\r\n\r\n    public onPlayAgainButtonClicked() {\r\n        const timestamp = Date.now();\r\n        GameManager.Instance.miloSDK.playAgain({timestamp: timestamp});\r\n        console.log(\"play again button clicked\");\r\n    }\r\n\r\n    public onChangeGameButtonClicked() {\r\n        const timestamp = Date.now();\r\n        GameManager.Instance.miloSDK.changeGame({timestamp: timestamp});\r\n        console.log(\"change game button clicked\");\r\n    }\r\n}\r\n\r\n\r\n","export class SNLSnakeData {\r\n  startTile: number;\r\n  snakePresetIndex: number;\r\n}\r\nexport class SNLLadderData {\r\n  startTile: number;\r\n  ladderPresetIndex: number;\r\n}\r\n\r\nexport class SNLBoard {\r\n  boardTiles: number[] = [];\r\n  snakes: SNLSnakeData[] = [];\r\n  ladders: SNLLadderData[] = [];\r\n  copyFrom(source: SNLBoard): void {\r\n    this.boardTiles = [];\r\n    for (let i = 0; i < source.boardTiles.length; i++) {\r\n      this.boardTiles.push(source.boardTiles[i]);\r\n    }\r\n    this.snakes = [];\r\n    for (let i = 0; i < source.snakes.length; i++) {\r\n      this.snakes.push(source.snakes[i]);\r\n    }\r\n    this.ladders = [];\r\n    for (let i = 0; i < source.ladders.length; i++) {\r\n      this.ladders.push(source.ladders[i]);\r\n    }\r\n  }\r\n}\r\n","import { SNLRoomState } from \"./schema/SNLRoomState\";\r\nimport { SNLRoomSettings } from \"./schema/SNLRoomSettings\";\r\nimport { EventTarget } from \"cc\";\r\nimport { SNLGameState } from \"./type/SNLGameState\";\r\nimport { RoomStatus } from \"../pulse/types/RoomTypes\";\r\nimport { AnimationTag } from \"./type/AnimationTag\";\r\nimport { Component, _decorator, Node, Vec3 } from \"cc\";\r\nimport { Player } from \"./Player\";\r\nimport { Board } from \"./Board\";\r\nimport { Tween } from \"cc\";\r\nimport { game } from \"cc\";\r\nimport { Game } from \"cc\";\r\nimport { GameManager } from \"./GameManager\";\r\nimport { AudioManager } from \"./AudioManager\";\r\nimport { NetworkManager, ConnectionStateChangeEvent, ServerRoomStateChangeEvent } from '../pulse/networking/NetworkManager';\r\nimport { ConnectionState, NetworkEvents } from '../pulse/types/NetworkTypes';\r\nimport { PBLogger } from \"../pulse/pb-cocos-utils/PBLogger\";\r\nimport { PlayerService } from \"./PlayerService\";\r\nconst { ccclass, property } = _decorator;\r\n\r\nexport const ClientStateChange: EventTarget = new EventTarget();\r\n\r\n@ccclass('SNLGameHandler')\r\nexport class SNLGameHandler extends Component {\r\n    \r\n    _clientState: SNLRoomState;\r\n    _serverState: SNLRoomState;\r\n    @property({type: Node})\r\n    playersParent: Node = null;\r\n    allPlayers : Player[] = [];\r\n    @property({type: Board})\r\n    board : Board = null;\r\n    myPlayerNumber: number = 0;\r\n    hasReconnected: boolean = false;\r\n    @property({type: Player})\r\n    localPlayer: Player = null;\r\n    static _instance : SNLGameHandler;\r\n    static get Instance() {\r\n        return this._instance;\r\n    }\r\n    onLoad() {\r\n        this.LoadPlayers();\r\n        ConnectionStateChangeEvent.on(NetworkEvents.CONNECTION_STATE_CHANGE, this.onConnectionStateChange, this);\r\n        ServerRoomStateChangeEvent.on(NetworkEvents.SERVER_ROOM_STATE_CHANGE, this.OnServerStateChange, this);\r\n        SNLGameHandler._instance = this;\r\n        game.on(Game.EVENT_HIDE, this.onGameHide, this); \r\n        game.on(Game.EVENT_SHOW, this.onGameShow, this);\r\n        game.on(Game.EVENT_RESTART, this.onGameRestart, this);\r\n        game.on(Game.EVENT_CLOSE, this.onGameClose, this);\r\n        window.addEventListener(\"beforeunload\", this.onGameClose);\r\n    }\r\n\r\n    private LoadPlayers() {\r\n        this.allPlayers = this.playersParent.children.map(child => child.getComponent(Player));\r\n    }\r\n\r\n    public Init(gameOptions: SNLRoomSettings) {\r\n    }\r\n    onGameHide() {\r\n        console.log(\"====== Game Hide ======\");\r\n        Tween.stopAll();\r\n    }\r\n    onGameShow() {\r\n        console.log(\"====== Game Show ======\");\r\n        Tween.stopAllByTag(AnimationTag.DICE_ROLL);\r\n        if(GameManager.Instance._roomState != RoomStatus.GAME_SIMULATION)return;\r\n        // Use this.board instead of Board.Instance\r\n        // this.board.reset(this._serverState);\r\n        // this.sendReconnectionStateToAllPlayers(this._serverState);\r\n    }\r\n\r\n    onGameRestart() {\r\n        console.log(\"====== Game Restart ======\");\r\n    }\r\n\r\n    onGameClose() {\r\n        // leave room\r\n        console.log(\"====== Game Close ======\");\r\n        // NetworkManager.Instance.LeaveRoom(); \r\n        PlayerService.instance.clearPlayers();\r\n    }\r\n\r\n    onGameDisconnect() {\r\n        console.log(\"====== Game Disconnect ======\");\r\n        AudioManager.instance.stopAllSounds();\r\n    }\r\n\r\n    onGameReconnect() {\r\n        console.log(\"====== Game Reconnect ======\");\r\n    }\r\n    public OnServerStateChange(newServerState): void {\r\n        console.log(\"============ OnServerStateChange =========\");\r\n        if(this._clientState == null) {\r\n            this._clientState = new SNLRoomState();\r\n            this._clientState.copyFrom(newServerState);\r\n            this._serverState = new SNLRoomState();\r\n            this._serverState.copyFrom(newServerState);\r\n            this.board.Initialize(newServerState);\r\n            this.InitializePlayers(newServerState);\r\n            if(this._serverState.currentGameState != SNLGameState.NONE){\r\n                console.log(\"========= joined game in between =========\");\r\n                // Use this.board instead of Board.Instance\r\n                this.board.reset(this._serverState);\r\n                this.sendReconnectionStateToAllPlayers(this._serverState);\r\n            }\r\n            return\r\n        }\r\n        \r\n        this._serverState = new SNLRoomState();\r\n        this._serverState.copyFrom(newServerState);\r\n        if(newServerState.currentRoomStatus == RoomStatus.END_GAME) {\r\n            console.log(\"========= Game Over State Change \");\r\n            // Use this.board instead of Board.Instance\r\n            this.board.reset(this._serverState);\r\n            // this.sendReconnectionStateToAllPlayers(this._serverState);\r\n            return;\r\n        }\r\n        if(this.hasReconnected) {\r\n            console.log(\"========= sending Reconnection State Change \");\r\n            // Use this.board instead of Board.Instance\r\n            this.board.reset(this._serverState);\r\n            this.sendReconnectionStateToAllPlayers(this._serverState);\r\n            this.hasReconnected = false;\r\n            return;\r\n        }\r\n        this.sendStateToAllPlayers(this._serverState);\r\n        // this.log(\"Server State Change \", newServerState);\r\n    }\r\n\r\n    onConnectionStateChange(oldState : ConnectionState, newState : ConnectionState) {\r\n        if(newState == ConnectionState.DISCONNECTED) {\r\n            this.onGameDisconnect();\r\n        }\r\n        else if(oldState == ConnectionState.RECONNECTING && newState == ConnectionState.JOINED_ROOM) {\r\n            // \r\n            this.hasReconnected = true;\r\n            this.onGameReconnect();\r\n        }\r\n    }\r\n\r\n    sendStateToAllPlayers(newServerState: SNLRoomState) {\r\n        for(let i = 0; i < this.allPlayers.length; i++) {\r\n            this.allPlayers[i].onServerStateChange(newServerState);\r\n        }\r\n    }\r\n\r\n    sendReconnectionStateToAllPlayers(newServerState: SNLRoomState) {\r\n        console.log(\"=========Reconnection State Sent to All Players\");\r\n        for(let i = 0; i < this.allPlayers.length; i++) {\r\n            if(!this.allPlayers[i].node.active)continue;\r\n            this.allPlayers[i].onReconnection(newServerState);\r\n        }\r\n    }\r\n\r\n    \r\n    public InitializePlayers(newServerState: SNLRoomState) {\r\n        this.assignMyPlayerNumber(newServerState);\r\n        // Register player number with the PlayerService\r\n        PlayerService.instance.setMyPlayerNumber(this.myPlayerNumber);\r\n        PBLogger.info(\"My Player Number : \", this.myPlayerNumber);\r\n        for(let i = 0; i < newServerState.playersData.length; i++) {\r\n            if(i == this.myPlayerNumber) {\r\n                this.localPlayer.node.active = true;\r\n                this.localPlayer.initialize(newServerState, this.board, this.myPlayerNumber);\r\n                this.allPlayers.push(this.localPlayer);\r\n                // Register the local player with PlayerService\r\n                PlayerService.instance.registerPlayer(this.localPlayer, true);\r\n                PBLogger.info(\"Local Player node name : \", this.localPlayer.node.name);\r\n            }\r\n            else {\r\n                console.log(\"Initializing Player : \", i);\r\n                console.log(\"current player : \", this.allPlayers[i]);\r\n                var currentPlayer = this.allPlayers[i];\r\n                currentPlayer.node.active = true;\r\n                currentPlayer.initialize(newServerState, this.board, i);\r\n                // Register the player with PlayerService\r\n                PlayerService.instance.registerPlayer(currentPlayer);\r\n                PBLogger.info(\"Current Player node name : \", currentPlayer.node.name);\r\n            }\r\n        }\r\n    }\r\n\r\n    assignMyPlayerNumber(newServerState: SNLRoomState) {\r\n        for(let i = 0; i < newServerState.playersData.length; i++) {\r\n            if(newServerState.playersData[i].sessionId == NetworkManager.Instance.CurrentRoom.sessionId) {\r\n                this.myPlayerNumber = i;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /*rotatePlayerNumbersInProfileUI(count: number) {\r\n        // Normalize count to prevent unnecessary rotations\r\n        count = count % this.players.length;\r\n        \r\n        // No need to rotate if count is 0\r\n        if (count === 0) return;\r\n        // Store original player numbers\r\n        const originalNumbers = this.players.map(player => player.playerNumber);\r\n        // Assign new rotated numbers\r\n        for (let i = 0; i < this.players.length; i++) {\r\n            // Calculate new index with rotation, ensuring positive wrap-around\r\n            const newIndex = (i - count + this.players.length) % this.players.length;\r\n            this.players[i].playerNumber = originalNumbers[newIndex];\r\n        }\r\n    }*/\r\n    getPlayer(playerNumber: number): Player {\r\n        // Use PlayerService for consistency\r\n        return PlayerService.instance.getPlayer(playerNumber);\r\n    }\r\n    getNumberOfProfileRotation(playerNumber: number): number {\r\n        if(playerNumber == 0) {\r\n            return 0;\r\n        }\r\n        else if(playerNumber == 1) {\r\n            return 2;\r\n        }\r\n        else if(playerNumber == 2) {\r\n            return 1;\r\n        }\r\n        else if(playerNumber == 3) {\r\n            return 3;\r\n        }\r\n    }\r\n\r\n\r\n    allPlayersFinished(): boolean {\r\n        let finishedPlayersCount = 0;\r\n        let totalPlayersCount = 0;\r\n        for(let i = 0; i < this.allPlayers.length; i++) {\r\n            //some players are disabled, not removed from array::\r\n            if(!this.allPlayers[i].node.active) continue;\r\n            totalPlayersCount++;\r\n            if(this.allPlayers[i].isFinished()) {\r\n                finishedPlayersCount++;\r\n            }\r\n        }\r\n        console.log(\"Finished Players Count \", finishedPlayersCount);\r\n        console.log(\"Total Players \", this.allPlayers.length);\r\n        return finishedPlayersCount == totalPlayersCount - 1;\r\n    }\r\n\r\n    anyPlayerFinished(): boolean {\r\n        for(let i = 0; i < this.allPlayers.length; i++) {\r\n            if(this.allPlayers[i].isFinished()) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Gets the player with the most deaths\r\n     * @returns The player with the highest deathsCount, or null if no players exist\r\n     */\r\n    getMostDeathsPlayer(): Player {\r\n        let maxDeaths = -1;\r\n        let mostDeathsPlayerNumber = -1;\r\n\r\n        // Find the player with the highest deathsCount\r\n        for (let i = 0; i < this._serverState.playersData.length; i++) {\r\n            const playerData = this._serverState.playersData[i];\r\n            if (playerData.deathsCount > maxDeaths) {\r\n                maxDeaths = playerData.deathsCount;\r\n                mostDeathsPlayerNumber = playerData.playerNumber;\r\n            }\r\n        }\r\n        // Return the player object using PlayerService\r\n        return this.getPlayer(mostDeathsPlayerNumber);\r\n    }\r\n\r\n    /**\r\n     * Gets the player with the most ladder climbs\r\n     * @returns The player with the highest ladderClimbCount, or null if no players exist\r\n     */\r\n    getMostLadderClimbsPlayer(): Player {\r\n\r\n        let maxLadderClimbs = -1;\r\n        let mostLadderClimbsPlayerNumber = -1;\r\n\r\n        // Find the player with the highest ladderClimbCount\r\n        for (let i = 0; i < this._serverState.playersData.length; i++) {\r\n            const playerData = this._serverState.playersData[i];\r\n            if (playerData.ladderClimbCount > maxLadderClimbs) {\r\n                maxLadderClimbs = playerData.ladderClimbCount;\r\n                mostLadderClimbsPlayerNumber = playerData.playerNumber;\r\n            }\r\n        }\r\n\r\n\r\n        // Return the player object using PlayerService\r\n        return this.getPlayer(mostLadderClimbsPlayerNumber);\r\n    }\r\n\r\n    isLocalUserHost(): boolean {\r\n        const hostId = GameManager.Instance.miloSDK.getHostId();\r\n        const localUser = this.localPlayer.playerData.userId;\r\n        return hostId == localUser;\r\n    }\r\n\r\n    getHostPlayer(): Player | null {\r\n        const hostId = GameManager.Instance.miloSDK.getHostId();\r\n        if(!hostId) return null;\r\n        const activePlayers = this.allPlayers.filter(player => player.playerData);\r\n        const hostPlayer = activePlayers.find(player => player.playerData.userId == hostId);\r\n        return hostPlayer;\r\n    }\r\n\r\n    onDestroy() {\r\n        ConnectionStateChangeEvent.off(NetworkEvents.CONNECTION_STATE_CHANGE, this.onConnectionStateChange, this);\r\n        ServerRoomStateChangeEvent.off(NetworkEvents.SERVER_ROOM_STATE_CHANGE, this.OnServerStateChange, this);\r\n        game.off(Game.EVENT_HIDE, this.onGameHide, this);\r\n        game.off(Game.EVENT_SHOW, this.onGameShow, this);\r\n        game.off(Game.EVENT_RESTART, this.onGameRestart, this);\r\n        game.off(Game.EVENT_CLOSE, this.onGameClose, this);\r\n        window.removeEventListener(\"beforeunload\", this.onGameClose);\r\n        PlayerService.instance.clearPlayers();\r\n        SNLGameHandler._instance = null;\r\n    }\r\n\r\n}","export enum SNLGameState {\r\n    NONE,\r\n    ROLLING,\r\n    MOVING_PIECE,\r\n    END_TURN,\r\n    ROLLING_ACK,\r\n    MOVING_PIECE_ACK,\r\n};\r\n","import { BasePlayerData } from \"db://assets/SNLGame/pulse/schema/BasePlayerData\";\r\n\r\nexport class SNLPlayerData extends BasePlayerData {\r\n    pieces: number[] = [0, 0];\r\n    rollsList: number[] = [];\r\n    timeLeft: number = 0;\r\n    finishPosition : number = -1;\r\n    isBot : boolean = false;\r\n    hasKilled : boolean = false;\r\n    remainingTurnSkips: number = 0;\r\n    deathsCount: number = 0;\r\n    ladderClimbCount: number = 0;\r\n    hasShield: boolean[] = [false, false];\r\n    copyFrom(source: SNLPlayerData): void {\r\n      super.copyFrom(source);\r\n      this.pieces = [];\r\n      for (let i = 0; i < source.pieces.length; i++) {\r\n        this.pieces.push(source.pieces[i]);\r\n      }\r\n      this.rollsList = [];\r\n      for (let i = 0; i < source.rollsList.length; i++) {\r\n        this.rollsList.push(source.rollsList[i]);\r\n      }\r\n      this.timeLeft = source.timeLeft;\r\n      this.finishPosition = source.finishPosition;\r\n      this.isBot = source.isBot;\r\n      this.hasShield = [];\r\n      for (let i = 0; i < source.hasShield.length; i++) {\r\n        this.hasShield.push(source.hasShield[i]);\r\n      }\r\n      this.hasKilled = source.hasKilled;\r\n      this.remainingTurnSkips = source.remainingTurnSkips;\r\n      this.deathsCount = source.deathsCount;\r\n      this.ladderClimbCount = source.ladderClimbCount;\r\n    }\r\n  }","import { DefaultSNLGameOptions } from \"../Config/GameConfig\";\r\nimport { BaseRoomSettings } from \"db://assets/SNLGame/pulse/schema/BaseRoomSettings\";\r\n\r\nexport class SNLRoomSettings extends BaseRoomSettings {\r\n    turnWaitTime: number = DefaultSNLGameOptions.turnWaitTime;\r\n    boardTilesCount: number = DefaultSNLGameOptions.boardTilesCount;\r\n    boardTilesPerRow: number = DefaultSNLGameOptions.boardTilesPerRow;\r\n    piecesPerPlayer: number = DefaultSNLGameOptions.piecesPerPlayer;\r\n    boardIndex: number = DefaultSNLGameOptions.boardIndex;\r\n    diceRollWaitTime: number = DefaultSNLGameOptions.diceRollWaitTime;\r\n    movePiecesWaitTime: number = DefaultSNLGameOptions.movePiecesWaitTime;\r\n    lagDelayCompensationTime: number = DefaultSNLGameOptions.lagDelayCompensationTime;\r\n    animationWaitTime: number = DefaultSNLGameOptions.animationWaitTime;\r\n    rocketSteps: number = DefaultSNLGameOptions.rocketSteps;\r\n    PowerupTypes: number[] = DefaultSNLGameOptions.PowerupTypes;\r\n    show_mute_button: boolean = DefaultSNLGameOptions.show_mute_button;\r\n    show_result_screen: boolean = DefaultSNLGameOptions.show_result_screen;\r\n    show_faq: boolean = DefaultSNLGameOptions.show_faq;\r\n    MissTurnsToKickOut: number = DefaultSNLGameOptions.MissTurnsToKickOut;\r\n    maxReconnectionAttempts: number = DefaultSNLGameOptions.maxReconnectionAttempts;\r\n    snakeAnimationTimePerTile: number = DefaultSNLGameOptions.snakeAnimationTimePerTile;\r\n    ladderAnimationTimePerTile: number = DefaultSNLGameOptions.ladderAnimationTimePerTile;\r\n    copyFrom(source: SNLRoomSettings): void {\r\n      super.copyFrom(source);\r\n      this.turnWaitTime = source.turnWaitTime;\r\n      this.boardTilesCount = source.boardTilesCount;\r\n      this.boardTilesPerRow = source.boardTilesPerRow;\r\n      this.piecesPerPlayer = source.piecesPerPlayer;\r\n      this.boardIndex = source.boardIndex;\r\n      this.diceRollWaitTime = source.diceRollWaitTime;\r\n      this.movePiecesWaitTime = source.movePiecesWaitTime;\r\n      this.lagDelayCompensationTime = source.lagDelayCompensationTime;\r\n      this.animationWaitTime = source.animationWaitTime;\r\n      this.rocketSteps = source.rocketSteps;\r\n      this.PowerupTypes = source.PowerupTypes;\r\n      this.show_mute_button = source.show_mute_button;\r\n      this.show_result_screen = source.show_result_screen;\r\n      this.show_faq = source.show_faq;\r\n      this.MissTurnsToKickOut = source.MissTurnsToKickOut;\r\n      this.maxReconnectionAttempts = source.maxReconnectionAttempts;\r\n      this.snakeAnimationTimePerTile = source.snakeAnimationTimePerTile;\r\n      this.ladderAnimationTimePerTile = source.ladderAnimationTimePerTile;\r\n    }\r\n  }","import { SNLGameState } from \"../type/SNLGameState\";\r\nimport { BaseRoomState } from \"../../pulse/schema/BaseRoomState\";\r\nimport { BasePlayerData } from \"db://assets/SNLGame/pulse/schema/BasePlayerData\";\r\nimport { SNLRoomSettings } from \"./SNLRoomSettings\";\r\nimport { SNLBoard } from \"./SNLBoard\";\r\nimport { SNLPlayerData } from \"./SNLPlayerData\";\r\nexport class SNLInputPayload {\r\n  inputType: string;\r\n  inputValue: string;\r\n  copyFrom(source: SNLInputPayload): void {\r\n    this.inputType = source.inputType;\r\n    this.inputValue = source.inputValue;\r\n  }\r\n}\r\nexport class SNLRoomState extends BaseRoomState<SNLRoomSettings, SNLPlayerData> {\r\n  turnPlayerNumber: number = 0;\r\n  finishedCount: number = 0;\r\n  gameOptions: SNLRoomSettings = new SNLRoomSettings();\r\n  inputPayload: SNLInputPayload = new SNLInputPayload();\r\n  currentGameState : number = SNLGameState.NONE;\r\n  previousGameState : number = SNLGameState.NONE;\r\n  syncStateNumber : number = 0;\r\n  board: SNLBoard = new SNLBoard();\r\n  hasMissedTurn = true;\r\n  timer = 0;\r\n\r\n  constructor() {\r\n    super(new SNLRoomSettings(), []);\r\n  }\r\n  \r\n  copyFrom(source: SNLRoomState): void {\r\n    console.log(\"============ CopyFrom snl room state =========\");\r\n    super.copyFrom(source);\r\n    this.playersData = source.playersData.map(player => {\r\n      const newPlayer = new SNLPlayerData();\r\n      newPlayer.copyFrom(player);\r\n      return newPlayer;\r\n    });\r\n    this.spectatorsData = source.spectatorsData.map(spectator => {\r\n        const newSpectator = new BasePlayerData();\r\n        newSpectator.copyFrom(spectator);\r\n        return newSpectator;\r\n    });\r\n    this.turnPlayerNumber = source.turnPlayerNumber;\r\n    this.finishedCount = source.finishedCount;\r\n    this.gameOptions = new SNLRoomSettings();\r\n    this.gameOptions.copyFrom(source.gameOptions);\r\n    this.syncStateNumber = source.syncStateNumber;\r\n    this.inputPayload = new SNLInputPayload();\r\n    this.inputPayload.copyFrom(source.inputPayload);\r\n    this.board = new SNLBoard();\r\n    this.board.copyFrom(source.board);\r\n    this.hasMissedTurn = source.hasMissedTurn;\r\n    this.timer = source.timer;\r\n\r\n    this.currentGameState = source.currentGameState;\r\n    this.previousGameState = source.previousGameState;\r\n  }\r\n}\r\n","export enum SNLTileType {\r\n    DEFAULT = 1<<0,\r\n    SNAKE  = 1<<1,\r\n    LADDER = 1<<2,\r\n    SHIELD = 1<<3,\r\n    ROCKET = 1<<4,\r\n    SAFE   = 1<<5,\r\n}","import { Color } from 'cc';\r\nimport { color } from 'cc';\r\nimport { Sprite } from 'cc';\r\nimport { _decorator, Component, Node } from 'cc';\r\nimport { AudioManager } from './AudioManager';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('Timer')\r\nexport class Timer extends Component {\r\n    _totalTime : number = 0;\r\n    _currentTime : number = 0;\r\n    @property({ type: Sprite })\r\n    timerSprite : Sprite = null;\r\n    _canRunTimer : boolean = false;\r\n    _isTimerWarning : boolean = false;\r\n    _isLocal : boolean = false;\r\n    protected update(dt: number): void {\r\n        if(!this._canRunTimer) return;\r\n        this._currentTime -= dt;\r\n        if(this._currentTime < 0) {\r\n            this._currentTime = 0;\r\n        }\r\n        this.timerSprite.fillRange = this.getTimeLeftPercentage();\r\n        this.checkAndSetTimerWarning();\r\n    }\r\n\r\n    isTimeUp() : boolean {\r\n        return this._currentTime <= 0;\r\n    }\r\n\r\n    setTotalTime(time : number) {\r\n        this._totalTime = time;\r\n        this._currentTime = time;\r\n        this.timerSprite.fillRange = this.getTimeLeftPercentage();\r\n    }\r\n\r\n    setCurrentTime(time : number) {\r\n        this._currentTime = time;\r\n        this.timerSprite.fillRange = this.getTimeLeftPercentage();\r\n    }\r\n\r\n    run() {\r\n        this._canRunTimer = true;\r\n    }\r\n\r\n    stop() {\r\n        this._canRunTimer = false;\r\n        this.reset();\r\n    }\r\n\r\n    reset() {\r\n        this._isTimerWarning = false; \r\n        this.timerSprite.fillRange = 0;\r\n        AudioManager.instance.stopSound(\"TimerWarning\");\r\n    }\r\n\r\n    getTimeLeftPercentage() : number {\r\n        return this._currentTime / this._totalTime;\r\n    }\r\n\r\n    checkAndSetTimerWarning() {\r\n        if(!this._isLocal) return;\r\n        if(this.getTimeLeftPercentage() < 0.2) {\r\n            if(!this._isTimerWarning) {\r\n                AudioManager.instance.playSound(\"TimerWarning\");\r\n                this._isTimerWarning = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    setLocal(isLocal : boolean) {\r\n        this._isLocal = isLocal;\r\n    }\r\n}\r\n\r\n\r\n","import { _decorator, Component, Label, Node, Quat, Tween, tween, Vec3 } from 'cc';\r\nimport { Menu } from './Menu';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('TutorialScreen')\r\nexport class TutorialScreen extends Menu {\r\n    @property({type: Node})\r\n    handNode : Node = null;\r\n    _showHandGesture: boolean = true;\r\n    private _handAnimationTween: Tween<Node> = null;\r\n    \r\n    protected onLoad(): void {\r\n        super.onLoad();\r\n        // OnServerMessageEvent.on(GameOptionsBroadcastType, this.ServerGameOptionsReceived, this);\r\n    }\r\n    protected start(): void {\r\n        // GameEventsEmitter.on(GameEvents.SelectedLane, this.onSelectedLane, this);\r\n    }\r\n    protected onDestroy(): void {\r\n        // GameEventsEmitter.off(GameEvents.SelectedLane, this.onSelectedLane, this);\r\n        // OnServerMessageEvent.off(GameOptionsBroadcastType, this.ServerGameOptionsReceived, this);\r\n    }\r\n    ServerGameOptionsReceived(gameOptions: any) {\r\n        this._showHandGesture = gameOptions.show_hand_gesture;\r\n    }\r\n    onSelectedLane() {\r\n        console.log(\"Selected lane so closing tutorial\");\r\n        this.Close();\r\n    }\r\n    public Open(): void {\r\n        if(!this._showHandGesture) {\r\n            return;\r\n        }\r\n        super.Open();\r\n        this.initialization();\r\n    }\r\n    public Close(): void {\r\n        super.Close();\r\n        if(this._handAnimationTween) {\r\n            this._handAnimationTween.stop();\r\n        }\r\n    } \r\n    handClickAnimation() {\r\n        let  clockRotationQ : Quat = new Quat();\r\n        Quat.fromEuler(clockRotationQ, 0, 0, 15);\r\n        let  antiClockRotationQ : Quat = new Quat();\r\n        Quat.fromEuler(clockRotationQ, 0, 0, 15);\r\n        this._handAnimationTween = tween(this.handNode)\r\n        .call(()=>{\r\n            this.handNode.eulerAngles = Vec3.ZERO.clone();\r\n        })\r\n        .delay(.2)\r\n        .to(.3, {rotation: clockRotationQ}, {easing: 'backOut'})\r\n        .delay(.7)\r\n        .union()\r\n        .repeatForever()\r\n        this._handAnimationTween.start();\r\n    }\r\n\r\n    \r\n    initialization() {\r\n        this.handClickAnimation();\r\n        // this._handTween.start();\r\n    }\r\n}\r\n\r\n","// src/types.ts\r\n\r\n/** Named presets for haptic feedback */\r\nexport type VibratePreset = \r\n  | 'short' \r\n  | 'long' \r\n  | 'double'\r\n  | 'impactLight'\r\n  | 'impactMedium'\r\n  | 'impactHeavy'\r\n  | 'rigid'\r\n  | 'soft'\r\n  | 'light'\r\n  | 'medium'\r\n  | 'heavy'\r\n  | 'notificationSuccess'\r\n  | 'notificationWarning'\r\n  | 'notificationError'\r\n  | 'selection'\r\n  | 'clockTick'\r\n  | 'contextClick'\r\n  | 'keyboardPress'\r\n  | 'keyboardRelease'\r\n  | 'keyboardTap'\r\n  | 'longPress'\r\n  | 'textHandleMove'\r\n  | 'virtualKey'\r\n  | 'virtualKeyRelease'\r\n  | 'effectClick'\r\n  | 'effectDoubleClick'\r\n  | 'effectHeavyClick'\r\n  | 'effectTick';\r\n\r\n/** Payload for a preset vibration */\r\nexport interface VibratePresetPayload {\r\n  preset: VibratePreset;\r\n}\r\n\r\n/** Payload for a custom vibration pattern (ms intervals) */\r\nexport interface VibratePatternPayload {\r\n  pattern: number[]; // e.g. [100,50,100]\r\n}\r\n\r\n/** Payload when the game is loaded */\r\nexport interface GameLoadedPayload {\r\n    timestamp: number;\r\n    // …add other fields as needed\r\n  }\r\n\r\n/** Payload when the game starts */\r\nexport interface GameStartedPayload {\r\n    timestamp: number;\r\n    // …add other fields as needed\r\n  }\r\n  \r\n  /** Payload when the game ends */\r\n  export interface GameEndedPayload {\r\n    duration: number;\r\n    hasWinningScreen: boolean\r\n    // …add other fields as needed\r\n  }\r\n  \r\n  /** Payload when score changes */\r\n  export interface ScorePayload {\r\n    score: number;\r\n    level?: number;\r\n    // …add other fields as needed\r\n  }\r\n  \r\n  /** \r\n   * Generic message sent from the game to React Native \r\n   * `T` is the type of the payload (e.g. GameStartedPayload)\r\n   */\r\n  export interface GameMessage<T = any> {\r\n    /** one of the strings in GameEvents */\r\n    event: string;\r\n    /** the game name */\r\n    gameId: string;\r\n    /** the event-specific data */\r\n    data: T;\r\n    /** timestamp when it was sent */\r\n    ts: number;\r\n  }\r\n\r\n  export interface PlayAgainPayload {\r\n    timestamp: number;\r\n  }\r\n\r\n  export interface ChangeGamePayload {\r\n    timestamp: number;\r\n  }","import { _decorator, Camera, Component, Node, Sprite, Color, tween, Vec3, quat } from 'cc';\r\nimport { Menu } from './Menu';\r\nimport { NetworkEvents } from '../../pulse/types/NetworkTypes';\r\nimport { RoomStatus } from '../../pulse/types/RoomTypes';\r\nimport { CameraManger } from '../../pulse/pb-cocos-utils/CameraManger';\r\nimport { GameManager, RoomStatusChangeEvent } from '../../scripts/GameManager';\r\nimport { UITransform } from 'cc';\r\nimport { Widget } from 'cc';\r\nimport { Prefab } from 'cc';\r\nimport { instantiate } from 'cc';\r\nimport { input, Input } from 'cc';\r\nimport { KeyCode } from 'cc';\r\nimport { EventKeyboard } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('UIManager')\r\nexport class UIManager extends Component {\r\n\r\n    public static instance: UIManager = null;\r\n    @property({type: Camera})\r\n    public uiCamera : Camera = null;\r\n    @property({type: [Menu]})\r\n    public menus : Menu[] = [];\r\n    @property({type: Node})\r\n    public flashNode : Node = null;\r\n    @property({type: Prefab})\r\n    public showerConfettiPrefab : Prefab = null;\r\n    @property({type: Node})\r\n    public confettiPositionNode : Node = null;\r\n\r\n    showMuteButton: boolean = true;\r\n    showResultScreen: boolean = true;\r\n    showFAQ: boolean = true;\r\n\r\n    protected onLoad(): void {\r\n        UIManager.instance = this;\r\n        RoomStatusChangeEvent.on(NetworkEvents.ROOM_STATUS_CHANGE, this.onGameStateChange, this);\r\n    }\r\n\r\n    protected start(): void {\r\n        this.FixWidthOfUICamera();\r\n    }\r\n    protected onDestroy(): void {\r\n        RoomStatusChangeEvent.off(NetworkEvents.ROOM_STATUS_CHANGE, this.onGameStateChange, this);\r\n    }\r\n\r\n    public OpenHowToPlay(){\r\n        this.OpenMenu(\"HowToPlay\");\r\n    }\r\n    \r\n    public OpenMenu(menuName : string) {\r\n        // console.log(\"Got call to open menu: \" + menuName);\r\n        for (let i = 0; i < this.menus.length; i++) {\r\n            // console.log(\"Menu name: \" + this.menus[i].menuName);\r\n            if (this.menus[i].menuName == menuName) {\r\n                this.menus[i].Open();\r\n            }\r\n        }\r\n    }\r\n    public CloseMenu(menuName : string) {\r\n        for (let i = 0; i < this.menus.length; i++) {\r\n            if (this.menus[i].menuName == menuName) {\r\n                this.menus[i].Close();\r\n            }\r\n        }\r\n    }\r\n    public GetMenu(menuName : string) : Menu {\r\n        for (let i = 0; i < this.menus.length; i++) {\r\n            if (this.menus[i].menuName == menuName) {\r\n                return this.menus[i];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    public CloseAllMenus() {\r\n        for (let i = 0; i < this.menus.length; i++) {\r\n            this.menus[i].Close();\r\n        }\r\n    }\r\n    \r\n    public onGameStateChange(newState : RoomStatus) {\r\n        console.log(\"[UIManager] Game State Change: \", newState);\r\n        if(newState == RoomStatus.WAITING_FOR_PLAYERS) {\r\n            console.log(\"Opening waiting screen\");\r\n            this.updateUiBasedOnConfig();\r\n            this.OpenMenu(\"WaitingScreen\");\r\n        }\r\n        else if (newState == RoomStatus.COUNTDOWN) {\r\n            console.log(\"Opening countdown screen\");\r\n            this.CloseAllMenus();\r\n            this.OpenMenu(\"CountdownScreen\");\r\n        }\r\n        else if(newState == RoomStatus.GAME_SIMULATION) {\r\n            this.scheduleOnce(() => {\r\n                this.CloseMenu(\"CountdownScreen\");\r\n                this.OpenMenu(\"InGameMenu\");\r\n            }, 1);\r\n        }\r\n        else if(newState == RoomStatus.END_GAME) {\r\n            console.log(\"[UIManager] End Game State handling in ui manager\");\r\n            this.CloseAllMenus();\r\n            console.log(\"[UIManager] Opening end round screen\");\r\n            this.OpenMenu(\"RoundCompletedScreen\");\r\n        }\r\n        else if(newState == RoomStatus.KICKED_OUT) {\r\n            this.CloseAllMenus();\r\n            this.OpenMenu(\"KickedOutScreen\");\r\n        }\r\n    }\r\n\r\n    FixWidthOfUICamera() {\r\n        console.log(\"Fixing width of UI Camera\");\r\n        this.FixCanvasSize();\r\n    }\r\n\r\n    FixCanvasSize() {\r\n        let myUiTransform = this.node.getComponent(UITransform);\r\n        myUiTransform.setContentSize(CameraManger.instance.getWidth(), CameraManger.instance.camera.orthoHeight * 2);\r\n        console.log(\"UI Width: \", myUiTransform.width, \"UI Height: \", myUiTransform.height);\r\n        let widget = this.node.getComponent(Widget);\r\n        widget.top = 1920/2 - myUiTransform.height/2;\r\n        widget.bottom = 1920/2 - myUiTransform.height/2;\r\n        widget.updateAlignment();\r\n        let allWidgets = this.node.getComponentsInChildren(Widget);\r\n        for(let i = 0; i < allWidgets.length; i++) {\r\n            allWidgets[i].updateAlignment();\r\n        }\r\n        // this.getAllChildWidgets(this.node);\r\n    }\r\n\r\n    getAllChildWidgets(node : Node) {\r\n        let allWidgets = node.getComponentsInChildren(Widget);\r\n        console.log(\"All widgets: \", allWidgets.length);\r\n    }\r\n\r\n    updateUiBasedOnConfig(){\r\n        this.showMuteButton = GameManager.Instance._serverStateCopy.gameOptions.show_mute_button;\r\n        this.showResultScreen = GameManager.Instance._serverStateCopy.gameOptions.show_result_screen;\r\n        this.showFAQ = GameManager.Instance._serverStateCopy.gameOptions.show_faq;\r\n        //initialize all menus:\r\n        for (let i = 0; i < this.menus.length; i++) {\r\n            this.menus[i].initialize();\r\n        }\r\n    }\r\n\r\n\r\n    playFlashEffect(color : Color = new Color(197, 8, 8)){\r\n        this.flashNode.active = true;\r\n        \r\n        // Get the sprite component\r\n        const sprite = this.flashNode.getComponent(Sprite);\r\n        if (!sprite) {\r\n            console.error(\"No Sprite component found on flashNode\");\r\n            return;\r\n        }\r\n        \r\n        // Set the sprite color to red (#c50808) and initial alpha to 0\r\n        sprite.color = new Color(color.r, color.g, color.b, 0); // Red color #c50808 with 0 alpha\r\n        \r\n        // Create tween animation: fade in to full opacity, then fade out\r\n        tween(sprite)\r\n            .to(0.2, { color: new Color(color.r, color.g, color.b, 255) }) // Fade in quickly to full red\r\n            .delay(0.05)\r\n            .to(0.3, { color: new Color(color.r, color.g, color.b, 0) })   // Fade out slowly\r\n            .call(() => {\r\n                this.flashNode.active = false; // Hide the node when animation completes\r\n            })\r\n            .start();\r\n    }\r\n\r\n    showConfetti(){\r\n        let confetti = instantiate(this.showerConfettiPrefab);\r\n        this.confettiPositionNode.addChild(confetti);\r\n        confetti.setPosition(new Vec3(0, 150, 0));\r\n    }\r\n\r\n}\r\n\r\n\r\n","import { _decorator } from 'cc';\r\n\r\nexport class Utils {\r\n    /**\r\n     * Rounds a number to specified decimal places\r\n     * @param num - The number to round\r\n     * @param decimals - Number of decimal places (default: 2)\r\n     * @returns The rounded number\r\n     */\r\n    public static roundNumber(num: number, decimals: number = 2): number {\r\n        const multiplier = Math.pow(10, decimals);\r\n        return Math.round((num + Number.EPSILON) * multiplier) / multiplier;\r\n    }\r\n} ","import { _decorator, Component, Label, Node, Tween, tween, Vec3 } from 'cc';\r\nimport { Menu } from './Menu';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('WaitingScreen')\r\nexport class WaitingScreen extends Menu {\r\n    protected onLoad(): void {\r\n        super.onLoad();\r\n    }\r\n    protected onDestroy(): void {\r\n    }\r\n    public Open(): void {\r\n        super.Open();\r\n    }\r\n    public Close(): void {\r\n        super.Close();\r\n    } \r\n    public initialize() : void {\r\n        super.initialize();\r\n    }\r\n}\r\n\r\n","import { GameMessage } from '../types';\r\n\r\nexport class WebViewTransport {\r\n  send<T>(msg: GameMessage<T>) {\r\n    window.ReactNativeWebView?.postMessage(JSON.stringify(msg));\r\n  }\r\n}\r\n"]}